{"version":3,"sources":["webpack:///./src/Components/CancelRequestModal.js","webpack:///./src/Components/EditRequestModal.js","webpack:///./src/Components/MUARolesTable.js","webpack:///./src/Helpers/getActions.js","webpack:///./src/Helpers/getLabelProps.js"],"names":["CancelRequestModal","requestId","onClose","React","isLoading","setIsLoading","dispatch","useDispatch","Modal","title","isOpen","variant","actions","Button","key","onClick","fetch","API_BASE","method","headers","body","JSON","stringify","status","then","res","json","errors","length","Error","map","e","detail","join","addNotification","err","description","message","Spinner","size","propTypes","PropTypes","nameHelperText","helperTexts","invalidAccountTitle","getLabelIcon","field","Popover","bodyContent","type","aria-label","preventDefault","aria-describedby","className","noVerticalAlign","today","Date","setDate","getDate","maxStartDate","dateFormat","date","toLocaleDateString","year","month","day","dateParse","split","padStart","RequestDetailsForm","user","targetAccount","setTargetAccount","start","setStart","end","setEnd","disableAccount","error","startDate","setStartDate","validatedAccount","setValidatedAccount","startValidator","isValidDate","endValidator","maxToDate","setFullYear","getFullYear","Form","onSubmit","ev","isDisabled","Title","headingLevel","Split","hasGutter","SplitItem","isFilled","FormGroup","label","labelIcon","TextInput","id","value","first_name","last_name","isRequired","helperText","helperTextInvalid","validated","onChange","val","placeholder","DatePicker","width","str","validators","style","padding","rangeStart","spaceUnderStyle","paddingBottom","ReviewStep","roles","content","EmptyState","EmptyStateIcon","icon","context","WizardContextConsumer","ExclamationCircleIcon","color","EmptyStateBody","goToStepById","paddingRight","slice","role","EditRequestModal","isEdit","setError","setUser","setRoles","userPromise","window","insights","chrome","auth","getUser","detailsPromise","Promise","all","details","identity","target_account","start_date","end_date","display_name","step1Complete","every","Boolean","step2Complete","steps","name","component","enableNext","canJumpTo","nextButtonText","titleId","descriptionId","height","showClose","hasNoBodyWrapper","aria-labelledby","Wizard","capitalize","onSave","request_id","isInvalidAccount","test","onNext","onBack","onGoToStep","rolesCache","applicationsCache","MUARolesTable","selectedRoles","setSelectedRoles","isReadOnly","undefined","columns","Array","from","rows","setRows","applications","setApplications","data","forEach","isExpanded","permissions","accessCount","Object","assign","apps","flat","reduce","acc","cur","add","Set","sort","activeSortIndex","setActiveSortIndex","activeSortDirection","setActiveSortDirection","onSort","_ev","index","direction","isDropdownOpen","setIsDropdownOpen","filterColumn","setFilterColumn","isSelectOpen","setIsSelectOpen","appSelections","setAppSelections","nameFilterInput","setNameFilterInput","nameFilter","setNameFilter","hasFilters","selectLabelId","selectPlaceholder","selectedNames","filteredRows","filter","row","find","app","includes","toLowerCase","page","setPage","perPage","setPerPage","AccessRequestsPagination","Pagination","itemCount","onSetPage","pageNumber","onPerPageSelect","isCompact","pagedRows","a","b","localeCompare","isBulkSelectOpen","setIsBulkSelectOpen","anySelected","someChecked","isChecked","onSelect","isSelected","rowId","changed","concat","onSelectAll","clearFiltersButton","roleToolbar","Toolbar","ToolbarContent","ToolbarItem","Dropdown","position","toggle","DropdownToggle","splitButtonItems","DropdownToggleCheckbox","onToggle","dropdownItems","DropdownItem","r","Math","min","InputGroup","target","colName","hidden","Select","selection","s","selections","isCheckboxSelectionBadgeHidden","placeholderText","maxHeight","overflowY","SelectOption","replace","display","align","default","ChipGroup","categoryName","Chip","expandedColumns","roleTable","TableComposable","Thead","Tr","Th","sortBy","columnIndex","modifier","keys","i","Tbody","Td","col","dataLabel","rowIndex","select","Tooltip","entryDelay","css","access","uuid","permission","onExpand","borders","colSpan","isArray","SearchIcon","getInternalActions","setOpenModal","items","push","disable","StatusLabel","statusProp","hideActions","setStatus","isEditing","setIsEditing","newStatus","Label","getLabelProps"],"mappings":"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","file":"js/508.4151a3a716bd011051df.js","sourcesContent":["import React from 'react';\nimport { Modal, Button, Spinner } from '@patternfly/react-core';\nimport { useDispatch } from 'react-redux';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport PropTypes from 'prop-types';\n\nconst CancelRequestModal = ({ requestId, onClose }) => {\n  const [isLoading, setIsLoading] = React.useState(false);\n  const dispatch = useDispatch();\n  const onCancel = () => {\n    setIsLoading(true);\n    // https://ci.cloud.redhat.com/docs/api-docs/rbac#operations-CrossAccountRequest-patchCrossAccountRequest\n    fetch(`${API_BASE}/cross-account-requests/${requestId}/`, {\n      method: 'PATCH',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ status: 'cancelled' }),\n    })\n      .then((res) => res.json())\n      .then((res) => {\n        if (res.errors && res.errors.length > 0) {\n          throw Error(res.errors.map((e) => e.detail).join('\\n'));\n        }\n        dispatch(\n          addNotification({\n            variant: 'success',\n            title: 'Request cancelled successfully',\n          })\n        );\n        setIsLoading(false);\n        onClose(true);\n      })\n      .catch((err) => {\n        dispatch(\n          addNotification({\n            variant: 'danger',\n            title: 'There was an error cancelling your request',\n            description: err.message,\n          })\n        );\n        setIsLoading(false);\n        onClose(true);\n      });\n  };\n  return (\n    <Modal\n      title=\"Cancel request?\"\n      isOpen\n      variant=\"small\"\n      onClose={() => onClose(false)}\n      actions={[\n        <Button key=\"confirm\" variant=\"danger\" onClick={onCancel}>\n          Yes, cancel\n        </Button>,\n        <Button key=\"cancel\" variant=\"link\" onClick={() => onClose(false)}>\n          No, keep\n        </Button>,\n      ]}\n    >\n      Request <b>{requestId}</b> will be withdrawn.\n      {isLoading && <Spinner size=\"lg\" />}\n    </Modal>\n  );\n};\n\nCancelRequestModal.propTypes = {\n  requestId: PropTypes.string,\n  onClose: PropTypes.func,\n};\n\nexport default CancelRequestModal;\n","import React from 'react';\nimport {\n  Form,\n  FormGroup,\n  TextInput,\n  Split,\n  SplitItem,\n  Popover,\n  DatePicker,\n  Title,\n  Spinner,\n  EmptyState,\n  EmptyStateIcon,\n  EmptyStateBody,\n  Button,\n  Modal,\n  Wizard,\n  WizardContextConsumer,\n} from '@patternfly/react-core';\nimport HelpIcon from '@patternfly/react-icons/dist/js/icons/help-icon';\nimport ExclamationCircleIcon from '@patternfly/react-icons/dist/js/icons/exclamation-circle-icon';\nimport { capitalize } from '@patternfly/react-core/dist/esm/helpers/util';\nimport { isValidDate } from '@patternfly/react-core/dist/esm/components/CalendarMonth';\nimport { useDispatch } from 'react-redux';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport MUARolesTable from './MUARolesTable';\nimport PropTypes from 'prop-types';\n\nconst nameHelperText =\n  'Customers will be able to see this information as part of your request';\nconst helperTexts = {\n  'first name': nameHelperText,\n  'last name': nameHelperText,\n  'account number':\n    'This is the account number that you would like to receive read access to',\n  'access duration':\n    'This is the time frame you would like to be granted read access to accounts',\n};\nconst invalidAccountTitle = 'Invalid Account number';\nconst getLabelIcon = (field) => (\n  <Popover bodyContent={<p>{helperTexts[field]}</p>}>\n    <button\n      type=\"button\"\n      aria-label={`More info for ${field}`}\n      onClick={(e) => e.preventDefault()}\n      aria-describedby=\"form-name\"\n      className=\"pf-c-form__group-label-help\"\n    >\n      <HelpIcon noVerticalAlign />\n    </button>\n  </Popover>\n);\n\nconst today = new Date();\ntoday.setDate(today.getDate() - 1);\nconst maxStartDate = new Date();\nmaxStartDate.setDate(maxStartDate.getDate() + 60);\nconst dateFormat = (date) =>\n  date.toLocaleDateString('en-US', {\n    year: 'numeric',\n    month: '2-digit',\n    day: '2-digit',\n  });\nconst dateParse = (date) => {\n  const split = date.split('/');\n  if (split.length !== 3) {\n    return new Date();\n  }\n  let month = split[0].padStart(2, '0');\n  let day = split[1].padStart(2, '0');\n  let year = split[2].padStart(4, '0');\n  return new Date(`${year}-${month}-${day}T00:00:00`);\n};\nconst RequestDetailsForm = ({\n  user = {},\n  targetAccount,\n  setTargetAccount,\n  start,\n  setStart,\n  end,\n  setEnd,\n  disableAccount,\n  isLoading,\n  error,\n}) => {\n  let [startDate, setStartDate] = React.useState();\n  const [validatedAccount, setValidatedAccount] = React.useState(\n    error ? 'error' : 'default'\n  );\n\n  // https://github.com/RedHatInsights/insights-rbac/blob/master/rbac/api/cross_access/model.py#L49\n  const startValidator = (date) => {\n    if (isValidDate(date)) {\n      if (date < today) {\n        setEnd('');\n        return 'Start date must be today or later';\n      }\n      if (date > maxStartDate) {\n        setEnd('');\n        return 'Start date must be within 60 days of today';\n      }\n    }\n\n    return '';\n  };\n\n  const endValidator = (date) => {\n    if (isValidDate(startDate)) {\n      if (startDate > date) {\n        return 'End date must be after from date';\n      }\n    }\n\n    const maxToDate = new Date(startDate);\n    maxToDate.setFullYear(maxToDate.getFullYear() + 1);\n    if (date > maxToDate) {\n      return 'Access duration may not be longer than one year';\n    }\n\n    return '';\n  };\n\n  const onStartChange = (str, date) => {\n    setStartDate(new Date(date));\n    setStart(str);\n    if (isValidDate(date) && !startValidator(date)) {\n      date.setDate(date.getDate() + 7);\n      setEnd(dateFormat(date));\n    } else {\n      setEnd('');\n    }\n  };\n\n  const onEndChange = (str, date) => {\n    if (endValidator(date)) {\n      setEnd('');\n    } else {\n      setEnd(str);\n    }\n  };\n\n  return (\n    <Form onSubmit={(ev) => ev.preventDefault()} isDisabled={isLoading}>\n      <Title headingLevel=\"h2\">Request details</Title>\n      <Split hasGutter>\n        <SplitItem isFilled>\n          <FormGroup label=\"First name\" labelIcon={getLabelIcon('first name')}>\n            <TextInput id=\"first-name\" value={user.first_name} isDisabled />\n          </FormGroup>\n        </SplitItem>\n        <SplitItem isFilled>\n          <FormGroup label=\"Last name\" labelIcon={getLabelIcon('last name')}>\n            <TextInput id=\"last-name\" value={user.last_name} isDisabled />\n          </FormGroup>\n        </SplitItem>\n      </Split>\n      <FormGroup\n        label=\"Account number\"\n        isRequired\n        labelIcon={getLabelIcon('account number')}\n        helperText=\"Enter the account number you would like access to\"\n        helperTextInvalid=\"Please enter a valid account number\"\n        validated={validatedAccount}\n      >\n        <TextInput\n          id=\"account-number\"\n          value={targetAccount}\n          onChange={(val) => {\n            setTargetAccount(val);\n            setValidatedAccount('default');\n          }}\n          isRequired\n          placeholder=\"Example, 8675309\"\n          validated={validatedAccount}\n          isDisabled={disableAccount}\n        />\n      </FormGroup>\n      <FormGroup\n        label=\"Access duration\"\n        isRequired\n        labelIcon={getLabelIcon('access duration')}\n      >\n        <Split>\n          <SplitItem>\n            <DatePicker\n              width=\"300px\"\n              aria-label=\"Start date\"\n              value={start}\n              dateFormat={dateFormat}\n              dateParse={dateParse}\n              placeholder=\"mm/dd/yyyy\"\n              onChange={onStartChange}\n              validators={[startValidator]}\n            />\n          </SplitItem>\n          <SplitItem style={{ padding: '6px 12px 0 12px' }}>to</SplitItem>\n          <SplitItem>\n            <DatePicker\n              width=\"300px\"\n              aria-label=\"End date\"\n              value={end}\n              dateFormat={dateFormat}\n              dateParse={dateParse}\n              placeholder=\"mm/dd/yyyy\"\n              onChange={onEndChange}\n              validators={[endValidator]}\n              rangeStart={start}\n            />\n          </SplitItem>\n        </Split>\n      </FormGroup>\n    </Form>\n  );\n};\n\nRequestDetailsForm.propTypes = {\n  user: PropTypes.any,\n  targetAccount: PropTypes.any,\n  setTargetAccount: PropTypes.any,\n  start: PropTypes.any,\n  setStart: PropTypes.any,\n  end: PropTypes.any,\n  setEnd: PropTypes.any,\n  disableAccount: PropTypes.any,\n  isLoading: PropTypes.any,\n  error: PropTypes.any,\n};\n\n// Can't use CSS with @redhat-cloud-services/frontend-components-config because it's scoped to <main> content\n// rather than Modal content...\nconst spaceUnderStyle = { paddingBottom: '16px' };\nconst ReviewStep = ({\n  targetAccount,\n  start,\n  end,\n  roles,\n  isLoading,\n  error,\n  onClose,\n}) => {\n  let content = null;\n  if (isLoading) {\n    content = (\n      <EmptyState>\n        <EmptyStateIcon icon={() => <Spinner size=\"lg\" />} />\n        <Title headingLevel=\"h2\" size=\"lg\">\n          Submitting access request\n        </Title>\n        <Button variant=\"link\" onClick={onClose}>\n          Close\n        </Button>\n      </EmptyState>\n    );\n  } else if (error) {\n    const context = React.useContext(WizardContextConsumer);\n    content = (\n      <EmptyState>\n        <EmptyStateIcon icon={ExclamationCircleIcon} color=\"#C9190B\" />\n        <Title headingLevel=\"h2\" size=\"lg\">\n          {error.title}\n        </Title>\n        <EmptyStateBody>{error.description}</EmptyStateBody>\n        {error.title === invalidAccountTitle && (\n          <Button variant=\"primary\" onClick={() => context.goToStepById(1)}>\n            Return to Step 1\n          </Button>\n        )}\n      </EmptyState>\n    );\n  } else {\n    content = (\n      <React.Fragment>\n        <Title headingLevel=\"h2\" style={spaceUnderStyle}>\n          Review details\n        </Title>\n        <table>\n          <tr>\n            <td style={spaceUnderStyle}>\n              <b>Account number</b>\n            </td>\n            <td style={spaceUnderStyle}>{targetAccount}</td>\n          </tr>\n          <tr>\n            <td style={{ paddingRight: '32px' }}>\n              <b>Access duration</b>\n            </td>\n            <td></td>\n          </tr>\n          <tr>\n            <td>From</td>\n            <td>{start}</td>\n          </tr>\n          <tr>\n            <td style={spaceUnderStyle}>To</td>\n            <td style={spaceUnderStyle}>{end}</td>\n          </tr>\n          <tr>\n            <td>\n              <b>Roles</b>\n            </td>\n            <td>{roles[0]}</td>\n          </tr>\n          {roles.slice(1).map((role) => (\n            <tr key={role}>\n              <td></td>\n              <td>{role}</td>\n            </tr>\n          ))}\n        </table>\n      </React.Fragment>\n    );\n  }\n\n  return <React.Fragment>{content}</React.Fragment>;\n};\n\nReviewStep.propTypes = {\n  targetAccount: PropTypes.any,\n  start: PropTypes.any,\n  end: PropTypes.any,\n  roles: PropTypes.any,\n  isLoading: PropTypes.any,\n  error: PropTypes.any,\n  onClose: PropTypes.any,\n};\n\nconst EditRequestModal = ({ requestId, variant, onClose }) => {\n  const isEdit = variant === 'edit';\n  const [isLoading, setIsLoading] = React.useState(true);\n  const [error, setError] = React.useState();\n  const [user, setUser] = React.useState();\n  const [targetAccount, setTargetAccount] = React.useState();\n  const [start, setStart] = React.useState();\n  const [end, setEnd] = React.useState();\n  const [roles, setRoles] = React.useState([]);\n  const dispatch = useDispatch();\n\n  // We need to be logged in (and see the username) which is an async request.\n  // If we're editing we also need to fetch the roles\n  React.useEffect(() => {\n    const userPromise = window.insights.chrome.auth.getUser();\n    const detailsPromise = isEdit\n      ? fetch(`${API_BASE}/cross-account-requests/${requestId}/`).then((res) =>\n          res.json()\n        )\n      : new Promise((res) => res(true));\n\n    Promise.all([userPromise, detailsPromise])\n      .then(([user, details]) => {\n        if (user && user.identity && user.identity.user) {\n          setUser(user.identity.user);\n        } else {\n          throw Error(\"Couldn't get current user. Make sure you're logged in\");\n        }\n        if (isEdit) {\n          if (details.errors) {\n            throw Error(details.errors.map((e) => e.detail).join('\\n'));\n          }\n          if (details && details.target_account) {\n            setTargetAccount(details.target_account);\n            setStart(details.start_date);\n            setEnd(details.end_date);\n            setRoles(details.roles.map((role) => role.display_name));\n          } else {\n            throw Error(`Could not fetch details for request ${requestId}`);\n          }\n        }\n        setIsLoading(false);\n      })\n      .catch((err) => {\n        dispatch(\n          addNotification({\n            variant: 'danger',\n            title: 'Could not load access request',\n            description: err.message,\n          })\n        );\n      });\n  }, []);\n\n  const onSave = () => {\n    setIsLoading(true);\n    // https://cloud.redhat.com/docs/api-docs/rbac#operations-CrossAccountRequest-createCrossAccountRequests\n    const body = {\n      target_account: targetAccount,\n      start_date: start,\n      end_date: end,\n      roles,\n    };\n    fetch(\n      `${API_BASE}/cross-account-requests/${isEdit ? `/${requestId}/` : ''}`,\n      {\n        method: isEdit ? 'PUT' : 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(body),\n      }\n    )\n      .then((res) => res.json())\n      .then((res) => {\n        if (res.errors && res.errors.length > 0) {\n          throw Error(res.errors[0].detail);\n        }\n        dispatch(\n          addNotification({\n            variant: 'success',\n            title: `${isEdit ? 'Edited' : 'Created'} access request`,\n            description: res.request_id,\n          })\n        );\n        onClose(true);\n      })\n      .catch((err) => {\n        const isInvalidAccount = /Account .* does not exist/.test(err.message);\n        setError({\n          title: isInvalidAccount\n            ? invalidAccountTitle\n            : `Could not ${variant} access request`,\n          description: isInvalidAccount\n            ? 'Please return to Step 1: Request details and input a new account number for your request.'\n            : err.message,\n        });\n        setIsLoading(false);\n      });\n  };\n\n  const step1Complete = [targetAccount, start, end].every(Boolean);\n  const step2Complete = roles.length > 0;\n  const steps = [\n    {\n      id: 1,\n      name: 'Request details',\n      component: (\n        <RequestDetailsForm\n          user={user}\n          targetAccount={targetAccount}\n          setTargetAccount={setTargetAccount}\n          start={start}\n          setStart={setStart}\n          end={end}\n          setEnd={setEnd}\n          disableAccount={isEdit}\n          isLoading={isLoading}\n          error={error}\n        />\n      ),\n      enableNext: step1Complete,\n    },\n    {\n      id: 2,\n      name: 'Select roles',\n      component: <MUARolesTable roles={roles} setRoles={setRoles} />,\n      enableNext: step2Complete,\n      canJumpTo: step1Complete,\n    },\n    {\n      id: 3,\n      name: 'Review details',\n      component: (\n        <ReviewStep\n          targetAccount={targetAccount}\n          start={start}\n          end={end}\n          roles={roles}\n          isLoading={isLoading}\n          error={error}\n          setError={setError}\n          onClose={() => onClose(false)}\n        />\n      ),\n      canJumpTo: step1Complete && step2Complete,\n      enableNext: !isLoading,\n      nextButtonText: 'Finish',\n    },\n  ];\n\n  const titleId = `${variant}-request`;\n  const descriptionId = `${variant} request`;\n  return (\n    <Modal\n      variant=\"large\"\n      style={{ height: '900px' }}\n      showClose={false}\n      hasNoBodyWrapper\n      isOpen\n      onClose={() => onClose(false)}\n      aria-describedby={descriptionId}\n      aria-labelledby={titleId}\n    >\n      <Wizard\n        titleId={titleId}\n        descriptionId={descriptionId}\n        title={capitalize(variant) + ' request'}\n        steps={steps}\n        onClose={() => onClose(false)}\n        onSave={onSave}\n        onNext={() => setError()}\n        onBack={() => setError()}\n        onGoToStep={() => setError()}\n      />\n    </Modal>\n  );\n};\n\nEditRequestModal.propTypes = {\n  requestId: PropTypes.string,\n  variant: PropTypes.any,\n  onClose: PropTypes.func,\n};\n\nexport default EditRequestModal;\n","import React from 'react';\nimport {\n  Title,\n  Toolbar,\n  ToolbarContent,\n  ToolbarItem,\n  Select,\n  Dropdown,\n  SelectOption,\n  DropdownItem,\n  DropdownToggle,\n  InputGroup,\n  TextInput,\n  Button,\n  Pagination,\n  ChipGroup,\n  Chip,\n  DropdownToggleCheckbox,\n  Tooltip,\n  EmptyState,\n  EmptyStateIcon,\n  EmptyStateBody,\n} from '@patternfly/react-core';\nimport {\n  TableComposable,\n  Thead,\n  Tbody,\n  Tr,\n  Th,\n  Td,\n} from '@patternfly/react-table';\nimport FilterIcon from '@patternfly/react-icons/dist/js/icons/filter-icon';\nimport SearchIcon from '@patternfly/react-icons/dist/js/icons/search-icon';\nimport { capitalize } from '@patternfly/react-core/dist/esm/helpers/util';\nimport { css } from '@patternfly/react-styles';\nimport { useDispatch } from 'react-redux';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport PropTypes from 'prop-types';\n\nlet rolesCache = [];\nlet applicationsCache = [];\n\nconst MUARolesTable = ({\n  roles: selectedRoles,\n  setRoles: setSelectedRoles,\n}) => {\n  const isReadOnly = setSelectedRoles === undefined;\n  const columns = ['Role name', 'Role description', 'Permissions'];\n  const [rows, setRows] = React.useState(Array.from(rolesCache));\n  const [applications, setApplications] = React.useState(applicationsCache);\n  React.useEffect(() => {\n    if (rolesCache.length === 0 || applicationsCache.length === 0) {\n      fetch(\n        `${API_BASE}/roles/?limit=9999&order_by=display_name&add_fields=groups_in_count`\n      )\n        .then((res) => res.json())\n        .then(({ data }) => {\n          data.forEach((role) => {\n            role.isExpanded = false;\n            role.permissions = role.accessCount;\n          });\n          rolesCache = data.map((role) => Object.assign({}, role));\n          setRows(data);\n\n          // Build application filter from data\n          const apps = Array.from(\n            data\n              .map((role) => role.applications)\n              .flat()\n              .reduce((acc, cur) => {\n                acc.add(cur);\n                return acc;\n              }, new Set())\n          ).sort();\n          applicationsCache = apps;\n          setApplications(apps);\n        })\n        .catch((err) =>\n          dispatch(\n            addNotification({\n              variant: 'danger',\n              title: 'Could not fetch roles list',\n              description: err.message,\n            })\n          )\n        );\n    }\n  }, []);\n\n  // Sorting\n  const [activeSortIndex, setActiveSortIndex] = React.useState('name');\n  const [activeSortDirection, setActiveSortDirection] = React.useState('asc');\n  const onSort = (_ev, index, direction) => {\n    setActiveSortIndex(index);\n    setActiveSortDirection(direction);\n  };\n\n  // Filtering\n  const [isDropdownOpen, setIsDropdownOpen] = React.useState(false);\n  const [filterColumn, setFilterColumn] = React.useState(columns[0]);\n  const [isSelectOpen, setIsSelectOpen] = React.useState(false);\n  const [appSelections, setAppSelections] = React.useState([]);\n  const [nameFilterInput, setNameFilterInput] = React.useState('');\n  const [nameFilter, setNameFilter] = React.useState('');\n  const hasFilters = appSelections.length > 0 || nameFilter;\n  const selectLabelId = 'filter-application';\n  const selectPlaceholder = 'Filter by application';\n\n  const selectedNames = selectedRoles.map((role) => role.display_name);\n  const filteredRows = rows\n    .filter((row) =>\n      appSelections.length > 0\n        ? row.applications.find((app) => appSelections.includes(app))\n        : true\n    )\n    .filter((row) => row.name.toLowerCase().includes(nameFilter))\n    .filter((row) =>\n      isReadOnly ? selectedNames.includes(row.display_name) : true\n    );\n\n  // Pagination\n  const [page, setPage] = React.useState(1);\n  const [perPage, setPerPage] = React.useState(10);\n  const AccessRequestsPagination = ({ id }) => (\n    <Pagination\n      itemCount={filteredRows.length}\n      perPage={perPage}\n      page={page}\n      onSetPage={(_ev, pageNumber) => setPage(pageNumber)}\n      id={'access-requests-roles-table-pagination-' + id}\n      variant={id}\n      onPerPageSelect={(_ev, perPage) => {\n        setPage(1);\n        setPerPage(perPage);\n      }}\n      isCompact={id === 'top'}\n    />\n  );\n  AccessRequestsPagination.propTypes = {\n    id: PropTypes.string,\n  };\n  const pagedRows = filteredRows\n    .sort((a, b) => {\n      if (typeof a[activeSortIndex] === 'number') {\n        // numeric sort\n        if (activeSortDirection === 'asc') {\n          return a[activeSortIndex] - b[activeSortIndex];\n        }\n\n        return b[activeSortIndex] - a[activeSortIndex];\n      } else {\n        // string sort\n        if (activeSortDirection === 'asc') {\n          return (a[activeSortIndex] + '').localeCompare(b[activeSortIndex]);\n        }\n\n        return (b[activeSortIndex] + '').localeCompare(a[activeSortIndex]);\n      }\n    })\n    .slice((page - 1) * perPage, page * perPage);\n\n  // Selecting\n  const [isBulkSelectOpen, setIsBulkSelectOpen] = React.useState(false);\n  const anySelected = selectedRoles.length > 0;\n  const someChecked = anySelected ? null : false;\n  const isChecked =\n    selectedRoles.length === filteredRows.length && selectedRoles.length > 0\n      ? true\n      : someChecked;\n  const onSelect = (_ev, isSelected, rowId) => {\n    const changed = pagedRows[rowId].display_name;\n    if (isSelected) {\n      setSelectedRoles(selectedRoles.concat(changed));\n    } else {\n      setSelectedRoles(selectedRoles.filter((role) => role !== changed));\n    }\n  };\n\n  const onSelectAll = (_ev, isSelected) => {\n    if (isSelected) {\n      setSelectedRoles(filteredRows.map((row) => row.display_name));\n    } else {\n      setSelectedRoles([]);\n    }\n  };\n\n  const clearFiltersButton = (\n    <Button\n      variant=\"link\"\n      onClick={() => {\n        setAppSelections([]);\n        setNameFilter('');\n      }}\n    >\n      Clear filters\n    </Button>\n  );\n  const roleToolbar = isReadOnly ? null : (\n    <Toolbar id=\"access-requests-roles-table-toolbar\">\n      <ToolbarContent>\n        <ToolbarItem>\n          <Dropdown\n            onSelect={() => setIsBulkSelectOpen(!isBulkSelectOpen)}\n            position=\"left\"\n            toggle={\n              <DropdownToggle\n                splitButtonItems={[\n                  <DropdownToggleCheckbox\n                    key=\"a\"\n                    id=\"example-checkbox-2\"\n                    aria-label={anySelected ? 'Deselect all' : 'Select all'}\n                    isChecked={isChecked}\n                    onClick={() => onSelectAll(null, !anySelected)}\n                  />,\n                ]}\n                onToggle={(isOpen) => setIsBulkSelectOpen(isOpen)}\n                isDisabled={rows.length === 0}\n              >\n                {selectedRoles.length !== 0 && (\n                  <React.Fragment>\n                    {selectedRoles.length} selected\n                  </React.Fragment>\n                )}\n              </DropdownToggle>\n            }\n            isOpen={isBulkSelectOpen}\n            dropdownItems={[\n              <DropdownItem key=\"0\" onClick={() => onSelectAll(null, false)}>\n                Select none (0 items)\n              </DropdownItem>,\n              <DropdownItem\n                key=\"1\"\n                onClick={() =>\n                  setSelectedRoles(\n                    selectedRoles.concat(pagedRows.map((r) => r.display_name))\n                  )\n                }\n              >\n                Select page ({Math.min(pagedRows.length, perPage)} items)\n              </DropdownItem>,\n              <DropdownItem key=\"2\" onClick={() => onSelectAll(null, true)}>\n                Select all ({filteredRows.length} items)\n              </DropdownItem>,\n            ]}\n          />\n        </ToolbarItem>\n        <ToolbarItem>\n          <InputGroup>\n            <Dropdown\n              isOpen={isDropdownOpen}\n              onSelect={(ev) => {\n                setIsDropdownOpen(false);\n                setFilterColumn(ev.target.value);\n                setIsSelectOpen(false);\n              }}\n              toggle={\n                <DropdownToggle\n                  onToggle={(isOpen) => setIsDropdownOpen(isOpen)}\n                >\n                  <FilterIcon /> {filterColumn}\n                </DropdownToggle>\n              }\n              dropdownItems={['Role name', 'Application'].map((colName) => (\n                // Filterable columns are RequestID, AccountID, and Status\n                <DropdownItem key={colName} value={colName} component=\"button\">\n                  {capitalize(colName)}\n                </DropdownItem>\n              ))}\n            />\n            {filterColumn === 'Application' ? (\n              <React.Fragment>\n                <span id={selectLabelId} hidden>\n                  {selectPlaceholder}\n                </span>\n                <Select\n                  aria-labelledby={selectLabelId}\n                  variant=\"checkbox\"\n                  aria-label=\"Select applications\"\n                  onToggle={(isOpen) => setIsSelectOpen(isOpen)}\n                  onSelect={(_ev, selection) => {\n                    if (appSelections.includes(selection)) {\n                      setAppSelections(\n                        appSelections.filter((s) => s !== selection)\n                      );\n                    } else {\n                      setAppSelections([...appSelections, selection]);\n                    }\n                  }}\n                  isOpen={isSelectOpen}\n                  selections={appSelections}\n                  isCheckboxSelectionBadgeHidden\n                  placeholderText={selectPlaceholder}\n                  style={{ maxHeight: '400px', overflowY: 'auto' }}\n                >\n                  {applications.map((app) => (\n                    <SelectOption key={app} value={app}>\n                      {capitalize(app.replace(/-/g, ' '))}\n                    </SelectOption>\n                  ))}\n                </Select>\n              </React.Fragment>\n            ) : (\n              <form\n                style={{ display: 'flex' }}\n                onSubmit={(ev) => {\n                  ev.preventDefault();\n                  setNameFilter(nameFilterInput);\n                }}\n              >\n                <TextInput\n                  name=\"rolesSearch\"\n                  id=\"rolesSearch\"\n                  type=\"search\"\n                  aria-label=\"Search input\"\n                  placeholder=\"Filter by role name\"\n                  value={nameFilterInput}\n                  onChange={(val) => setNameFilterInput(val)}\n                />\n                <Button\n                  variant=\"control\"\n                  type=\"submit\"\n                  aria-label=\"Search button for roles input\"\n                >\n                  <SearchIcon />\n                </Button>\n              </form>\n            )}\n          </InputGroup>\n        </ToolbarItem>\n        <ToolbarItem variant=\"pagination\" align={{ default: 'alignRight' }}>\n          <AccessRequestsPagination id=\"top\" />\n        </ToolbarItem>\n      </ToolbarContent>\n      {hasFilters && (\n        <ToolbarContent>\n          {nameFilter && (\n            <ChipGroup categoryName=\"Role name\">\n              <Chip onClick={() => setNameFilter('')}>{nameFilter}</Chip>\n            </ChipGroup>\n          )}\n          {appSelections.length > 0 && (\n            <ChipGroup categoryName=\"Status\">\n              {appSelections.map((status) => (\n                <Chip\n                  key={status}\n                  onClick={() =>\n                    setAppSelections(appSelections.filter((s) => s !== status))\n                  }\n                >\n                  {status}\n                </Chip>\n              ))}\n            </ChipGroup>\n          )}\n          {clearFiltersButton}\n        </ToolbarContent>\n      )}\n    </Toolbar>\n  );\n\n  const expandedColumns = ['Application', 'Resource type', 'Operation'];\n  const dispatch = useDispatch();\n  const onExpand = (row) => {\n    row.isExpanded = !row.isExpanded;\n    setRows([...rows]);\n    if (!row.access) {\n      fetch(`${API_BASE}/roles/${row.uuid}/`)\n        .then((res) => res.json())\n        .then((res) => {\n          row.access = res.access.map((a) => a.permission.split(':'));\n          setRows([...rows]);\n        })\n        .catch((err) =>\n          dispatch(\n            addNotification({\n              variant: 'danger',\n              title: `Could not fetch permission list for ${row.name}.`,\n              description: err.message,\n            })\n          )\n        );\n    }\n  };\n  const roleTable = (\n    <TableComposable aria-label=\"My user access roles\" variant=\"compact\">\n      <Thead>\n        <Tr>\n          {!isReadOnly && <Th />}\n          <Th\n            width={30}\n            sort={{\n              sortBy: {\n                index: activeSortIndex,\n                direction: activeSortDirection,\n              },\n              onSort,\n              columnIndex: 'name',\n            }}\n          >\n            {columns[0]}\n          </Th>\n          <Th\n            width={50}\n            sort={{\n              sortBy: {\n                index: activeSortIndex,\n                direction: activeSortDirection,\n              },\n              onSort,\n              columnIndex: 'description',\n            }}\n          >\n            {columns[1]}\n          </Th>\n          <Th\n            width={10}\n            sort={{\n              sortBy: {\n                index: activeSortIndex,\n                direction: activeSortDirection,\n              },\n              onSort,\n              columnIndex: 'permissions',\n            }}\n            modifier=\"nowrap\"\n          >\n            {columns[2]}\n          </Th>\n        </Tr>\n      </Thead>\n      {rows.length === 0 &&\n        [...Array(perPage).keys()].map((i) => (\n          <Tbody key={i}>\n            <Tr>\n              {!isReadOnly && <Td />}\n              {columns.map((col, key) => (\n                <Td dataLabel={col} key={key}>\n                  <div\n                    style={{ height: '22px' }}\n                    className=\"ins-c-skeleton ins-c-skeleton__md\"\n                  >\n                    {' '}\n                  </div>\n                </Td>\n              ))}\n            </Tr>\n          </Tbody>\n        ))}\n      {pagedRows.map((row, rowIndex) => (\n        <Tbody key={rowIndex}>\n          <Tr>\n            {!isReadOnly && (\n              <Td\n                select={{\n                  rowIndex,\n                  onSelect,\n                  isSelected: selectedRoles.find((r) => r === row.display_name),\n                }}\n              />\n            )}\n            <Td dataLabel={columns[0]}>{row.display_name}</Td>\n            <Td dataLabel={columns[1]} className=\"pf-m-truncate\">\n              <Tooltip entryDelay={1000} content={row.description}>\n                <span className=\"pf-m-truncate pf-c-table__text\">\n                  {row.description}\n                </span>\n              </Tooltip>\n            </Td>\n            <Td\n              dataLabel={columns[2]}\n              className={css(\n                'pf-c-table__compound-expansion-toggle',\n                row.isExpanded && 'pf-m-expanded'\n              )}\n            >\n              <button\n                type=\"button\"\n                className=\"pf-c-table__button\"\n                onClick={() => onExpand(row)}\n              >\n                {row.permissions}\n              </button>\n            </Td>\n          </Tr>\n          <Tr isExpanded={row.isExpanded} borders={false}>\n            {!isReadOnly && <Td />}\n            <Td className=\"pf-u-p-0\" colSpan={3}>\n              <TableComposable isCompact className=\"pf-m-no-border-rows\">\n                <Thead>\n                  <Tr>\n                    {expandedColumns.map((col) => (\n                      <Th key={col}>{col}</Th>\n                    ))}\n                  </Tr>\n                </Thead>\n                <Tbody>\n                  {Array.isArray(row.access)\n                    ? row.access.map((permissions) => (\n                        <Tr key={permissions.join(':')}>\n                          <Td dataLabel={expandedColumns[0]}>\n                            {permissions[0]}\n                          </Td>\n                          <Td dataLabel={expandedColumns[1]}>\n                            {permissions[1]}\n                          </Td>\n                          <Td dataLabel={expandedColumns[2]}>\n                            {permissions[2]}\n                          </Td>\n                        </Tr>\n                      ))\n                    : [...Array(row.permissions).keys()].map((i) => (\n                        <Tr key={i}>\n                          {expandedColumns.map((val) => (\n                            <Td key={val} dataLabel={val}>\n                              <div\n                                style={{ height: '22px' }}\n                                className=\"ins-c-skeleton ins-c-skeleton__sm\"\n                              >\n                                {' '}\n                              </div>\n                            </Td>\n                          ))}\n                        </Tr>\n                      ))}\n                </Tbody>\n              </TableComposable>\n            </Td>\n          </Tr>\n        </Tbody>\n      ))}\n      {pagedRows.length === 0 && hasFilters && (\n        <Tr>\n          <Td colSpan={columns.length}>\n            <EmptyState variant=\"small\">\n              <EmptyStateIcon icon={SearchIcon} />\n              <Title headingLevel=\"h2\" size=\"lg\">\n                No matching requests found\n              </Title>\n              <EmptyStateBody>\n                No results match the filter criteria. Remove all filters or\n                clear all filters to show results.\n              </EmptyStateBody>\n              {clearFiltersButton}\n            </EmptyState>\n          </Td>\n        </Tr>\n      )}\n    </TableComposable>\n  );\n\n  return (\n    <React.Fragment>\n      {!isReadOnly && (\n        <React.Fragment>\n          <Title headingLevel=\"h2\">Select roles</Title>\n          <p>Select the roles you would like access to.</p>\n        </React.Fragment>\n      )}\n      {roleToolbar}\n      {roleTable}\n      {isReadOnly && <AccessRequestsPagination id=\"bottom\" />}\n    </React.Fragment>\n  );\n};\n\nMUARolesTable.propTypes = {\n  roles: PropTypes.any,\n  setRoles: PropTypes.any,\n};\n\nexport default MUARolesTable;\n","import React from 'react';\nimport { Button, Label } from '@patternfly/react-core';\nimport { useDispatch } from 'react-redux';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { getLabelProps } from './getLabelProps';\nimport EditAltIcon from '@patternfly/react-icons/dist/js/icons/edit-alt-icon';\nimport { capitalize } from '@patternfly/react-core/dist/esm/helpers/util';\nimport PropTypes from 'prop-types';\n\nexport function getInternalActions(status, requestId, setOpenModal) {\n  const items = [];\n  if (status === 'pending') {\n    items.push({\n      title: 'Edit',\n      onClick: () => setOpenModal({ type: 'edit', requestId }),\n    });\n    items.push({\n      title: 'Cancel',\n      onClick: () => setOpenModal({ type: 'cancel', requestId }),\n    });\n  }\n\n  return { items, disable: items.length === 0 };\n}\n\n// https://marvelapp.com/prototype/257je526/screen/74764732\nexport function StatusLabel({ requestId, status: statusProp, hideActions }) {\n  const [status, setStatus] = React.useState(statusProp);\n  const [isEditing, setIsEditing] = React.useState(false);\n  const [isLoading, setIsLoading] = React.useState(false);\n  const dispatch = useDispatch();\n\n  function onClick(newStatus) {\n    setIsLoading(true);\n    fetch(`${API_BASE}/cross-account-requests/${requestId}/`, {\n      method: 'PATCH',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ status: newStatus }),\n    })\n      .then((res) => res.json())\n      .then((res) => {\n        if (res.errors && res.errors.length > 0) {\n          throw Error(res.errors.map((e) => e.detail).join('\\n'));\n        }\n        dispatch(\n          addNotification({\n            variant: 'success',\n            title: `Request ${newStatus} successfully`,\n          })\n        );\n        setStatus(newStatus);\n        setIsEditing(false);\n        setIsLoading(false);\n      })\n      .catch((err) => {\n        dispatch(\n          addNotification({\n            variant: 'danger',\n            title: `There was an error ${\n              newStatus === 'approved' ? 'approving' : 'denying'\n            } your request`,\n            description: err.message,\n          })\n        );\n        setIsLoading(false);\n      });\n  }\n\n  const label = <Label {...getLabelProps(status)}>{capitalize(status)}</Label>;\n\n  // For internal view\n  if (hideActions) {\n    return label;\n  }\n\n  return (\n    <React.Fragment>\n      {isEditing || status === 'pending' ? (\n        <React.Fragment>\n          <Button\n            className=\"pf-u-mr-md\"\n            isDisabled={isLoading || status === 'approved'}\n            variant=\"primary\"\n            onClick={() => onClick('approved')}\n          >\n            Approve\n          </Button>\n          <Button\n            className=\"pf-u-mr-md\"\n            isDisabled={isLoading || status === 'denied'}\n            variant=\"danger\"\n            onClick={() => onClick('denied')}\n          >\n            Deny\n          </Button>\n        </React.Fragment>\n      ) : (\n        label\n      )}\n      {['approved', 'denied'].includes(status) && (\n        <Button\n          variant=\"plain\"\n          aria-label=\"Edit status\"\n          onClick={() => setIsEditing(!isEditing)}\n        >\n          <EditAltIcon />\n        </Button>\n      )}\n    </React.Fragment>\n  );\n}\n\nStatusLabel.propTypes = {\n  requestId: PropTypes.string,\n  status: PropTypes.any,\n  hideActions: PropTypes.any,\n};\n","import React from 'react';\nimport CheckCircleIcon from '@patternfly/react-icons/dist/js/icons/check-circle-icon';\nimport ExclamationCircleIcon from '@patternfly/react-icons/dist/js/icons/exclamation-circle-icon';\nimport ErrorCircleOIcon from '@patternfly/react-icons/dist/js/icons/error-circle-o-icon';\nimport PendingIcon from '@patternfly/react-icons/dist/js/icons/in-progress-icon';\nimport ClockIcon from '@patternfly/react-icons/dist/js/icons/history-icon';\n\nexport function getLabelProps(status) {\n  let color = null;\n  let icon = null;\n  if (status === 'pending') {\n    color = 'blue';\n    icon = <PendingIcon />;\n  } else if (status === 'approved') {\n    color = 'green';\n    icon = <CheckCircleIcon />;\n  } else if (status === 'denied') {\n    color = 'red';\n    icon = <ExclamationCircleIcon />;\n  } else if (status === 'cancelled') {\n    color = 'orange';\n    icon = <ErrorCircleOIcon />;\n  } else if (status === 'expired') {\n    color = 'grey';\n    icon = <ClockIcon />;\n  }\n\n  return { color, icon };\n}\n"],"sourceRoot":""}