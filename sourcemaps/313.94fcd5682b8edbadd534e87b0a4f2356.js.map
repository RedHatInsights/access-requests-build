{"version":3,"file":"js/313.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./node_modules/@patternfly/react-icons/dist/js/icons/filter-icon.js","webpack:///./node_modules/@patternfly/react-icons/dist/js/icons/plus-circle-icon.js","webpack:///./src/Components/AccessRequestsTable.js","webpack:///./src/Routes/AccessRequestsPage.js"],"sourcesContent":["\"use strict\"\nexports.__esModule = true;\nexports.FilterIconConfig = {\n  name: 'FilterIcon',\n  height: 512,\n  width: 512,\n  svgPath: 'M487.976 0H24.028C2.71 0-8.047 25.866 7.058 40.971L192 225.941V432c0 7.831 3.821 15.17 10.237 19.662l80 55.98C298.02 518.69 320 507.493 320 487.98V225.941l184.947-184.97C520.021 25.896 509.338 0 487.976 0z',\n  yOffset: 0,\n  xOffset: 0,\n};\nexports.FilterIcon = require('../createIcon').createIcon(exports.FilterIconConfig);\nexports[\"default\"] = exports.FilterIcon;","\"use strict\"\nexports.__esModule = true;\nexports.PlusCircleIconConfig = {\n  name: 'PlusCircleIcon',\n  height: 512,\n  width: 512,\n  svgPath: 'M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm144 276c0 6.6-5.4 12-12 12h-92v92c0 6.6-5.4 12-12 12h-56c-6.6 0-12-5.4-12-12v-92h-92c-6.6 0-12-5.4-12-12v-56c0-6.6 5.4-12 12-12h92v-92c0-6.6 5.4-12 12-12h56c6.6 0 12 5.4 12 12v92h92c6.6 0 12 5.4 12 12v56z',\n  yOffset: 0,\n  xOffset: 0,\n};\nexports.PlusCircleIcon = require('../createIcon').createIcon(exports.PlusCircleIconConfig);\nexports[\"default\"] = exports.PlusCircleIcon;","import React from 'react';\nimport {\n  capitalize,\n  Toolbar,\n  ToolbarItem,\n  ToolbarContent,\n  Button,\n  InputGroup,\n  TextInput,\n  Pagination,\n  ChipGroup,\n  Chip,\n  Bullseye,\n  EmptyState,\n  EmptyStateIcon,\n  EmptyStateBody,\n  EmptyStateHeader,\n  EmptyStateFooter,\n  InputGroupItem,\n} from '@patternfly/react-core';\nimport {\n  Dropdown,\n  DropdownToggle,\n  DropdownItem,\n  Select,\n  SelectOption,\n} from '@patternfly/react-core/deprecated';\nimport { Thead, Tbody, Tr, Th, Td } from '@patternfly/react-table';\nimport { Table } from '@patternfly/react-table/deprecated';\nimport CancelRequestModal from './CancelRequestModal';\nimport AccessRequestsWizard from './access-requests-wizard/AccessRequestsWizard';\nimport SearchIcon from '@patternfly/react-icons/dist/js/icons/search-icon';\nimport FilterIcon from '@patternfly/react-icons/dist/js/icons/filter-icon';\nimport PlusCircleIcon from '@patternfly/react-icons/dist/js/icons/plus-circle-icon';\nimport { useDispatch } from 'react-redux';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { Link } from 'react-router-dom';\nimport { getInternalActions, StatusLabel } from '../Helpers/getActions';\nimport PropTypes from 'prop-types';\nimport apiInstance from '../Helpers/apiInstance';\n\nconst uncapitalize = (input) => input[0].toLowerCase() + input.substring(1);\n\n// https://dev.to/gabe_ragland/debouncing-with-react-hooks-jci\nfunction useDebounce(value, delay) {\n  // State and setters for debounced value\n  const [debouncedValue, setDebouncedValue] = React.useState(value);\n\n  React.useEffect(\n    () => {\n      // Set debouncedValue to value (passed in) after the specified delay\n      const handler = setTimeout(() => {\n        setDebouncedValue(value);\n      }, delay);\n\n      // Return a cleanup function that will be called every time ...\n      // ... useEffect is re-called. useEffect will only be re-called ...\n      // ... if value changes (see the inputs array below).\n      // This is how we prevent debouncedValue from changing if value is ...\n      // ... changed within the delay period. Timeout gets cleared and restarted.\n      // To put it in context, if the user is typing within our app's ...\n      // ... search box, we don't want the debouncedValue to update until ...\n      // ... they've stopped typing for more than 500ms.\n      return () => {\n        clearTimeout(handler);\n      };\n    },\n    // Only re-call effect if value changes\n    // You could also add the \"delay\" var to inputs array if you ...\n    // ... need to be able to change that dynamically.\n    [value]\n  );\n\n  return debouncedValue;\n}\n\nconst statuses = ['pending', 'approved', 'denied', 'cancelled', 'expired'];\n\nconst AccessRequestsTable = ({ isInternal }) => {\n  const columns = isInternal\n    ? [\n        'Request ID',\n        'Account number',\n        'Start date',\n        'End date',\n        'Created',\n        'Status',\n      ]\n    : [\n        'Request ID',\n        'First name',\n        'Last name',\n        'Start date',\n        'End date',\n        'Created',\n        'Decision',\n      ];\n\n  // Sorting\n  const [activeSortIndex, setActiveSortIndex] = React.useState(\n    isInternal ? 4 : 5\n  );\n  const [activeSortDirection, setActiveSortDirection] = React.useState('desc');\n  const onSort = (_ev, index, direction) => {\n    setActiveSortIndex(index);\n    setActiveSortDirection(direction);\n  };\n\n  // Pagination\n  const [page, setPage] = React.useState(1);\n  const [perPage, setPerPage] = React.useState(20);\n  const AccessRequestsPagination = ({ id }) => (\n    <Pagination\n      itemCount={numRows}\n      perPage={perPage}\n      page={page}\n      onSetPage={(_ev, pageNumber) => setPage(pageNumber)}\n      id={`access-requests-table-pagination-${id}`}\n      variant={id}\n      perPageOptions={[5, 10, 20, 50].map((n) => ({ title: n, value: n }))}\n      onPerPageSelect={(_ev, perPage) => {\n        setPage(1);\n        setPerPage(perPage);\n      }}\n      isCompact={id === 'top'}\n    />\n  );\n\n  AccessRequestsPagination.propTypes = {\n    id: PropTypes.string,\n  };\n\n  // Filtering\n  const [isDropdownOpen, setIsDropdownOpen] = React.useState(false);\n  const [filterColumn, setFilterColumn] = React.useState(\n    columns[isInternal ? 1 : 6]\n  );\n  const [isSelectOpen, setIsSelectOpen] = React.useState(false);\n  const [statusSelections, setStatusSelections] = React.useState([]);\n\n  // Harder than it needs to be to match rest of RBAC which doesn't wait\n  // for user to click a button or press enter.\n  const [accountFilter, setAccountFilter] = React.useState('');\n  const [filtersDirty, setFiltersDirty] = React.useState(false);\n  const hasFilters = statusSelections.length > 0 || accountFilter;\n\n  // Row loading\n  const [isLoading, setIsLoading] = React.useState(true);\n  const [numRows, setNumRows] = React.useState(0);\n  const [rows, setRows] = React.useState([]);\n  const dispatch = useDispatch();\n  const fetchAccessRequests = () => {\n    setIsLoading(true);\n    const listUrl = new URL(\n      `${window.location.origin}${API_BASE}/cross-account-requests/`\n    );\n\n    isInternal\n      ? listUrl.searchParams.append('query_by', 'user_id')\n      : listUrl.searchParams.append('query_by', 'target_org');\n\n    listUrl.searchParams.append('offset', (page - 1) * perPage);\n    listUrl.searchParams.append('limit', perPage);\n    // https://github.com/RedHatInsights/insights-rbac/blob/master/rbac/api/cross_access/view.py\n    if (accountFilter) {\n      listUrl.searchParams.append('account', accountFilter);\n    }\n    if (statusSelections.length > 0) {\n      listUrl.searchParams.append('status', statusSelections.join(','));\n    }\n    const orderBy = `${activeSortDirection === 'desc' ? '-' : ''}${columns[\n      activeSortIndex\n    ]\n      .toLowerCase()\n      .replace(' ', '_')}`;\n    listUrl.searchParams.append('order_by', orderBy);\n\n    apiInstance\n      .get(listUrl.href, { headers: { Accept: 'application/json' } })\n      .then((res) => {\n        setNumRows(res.meta.count);\n        setRows(\n          res.data.map((d) =>\n            isInternal\n              ? [\n                  d.request_id,\n                  d.target_account,\n                  d.start_date,\n                  d.end_date,\n                  d.created,\n                  d.status,\n                ]\n              : [\n                  d.request_id,\n                  d.first_name,\n                  d.last_name,\n                  d.start_date,\n                  d.end_date,\n                  d.created,\n                  d.status,\n                ]\n          )\n        );\n        setIsLoading(false);\n      })\n      .catch((err) => {\n        setIsLoading(false);\n        dispatch(\n          addNotification({\n            variant: 'danger',\n            title: 'Could not list access requests',\n            description: err.message,\n          })\n        );\n      });\n  };\n  const debouncedAccountFilter = useDebounce(accountFilter, 400);\n  React.useEffect(() => {\n    fetchAccessRequests();\n  }, [\n    debouncedAccountFilter,\n    statusSelections,\n    activeSortIndex,\n    activeSortDirection,\n    perPage,\n    page,\n  ]);\n\n  // Modal actions\n  const [openModal, setOpenModal] = React.useState({ type: null });\n  const onModalClose = (isChanged) => {\n    setOpenModal({ type: null });\n    if (isChanged) {\n      fetchAccessRequests();\n    }\n  };\n  const modals = (\n    <React.Fragment>\n      {openModal.type === 'cancel' && (\n        <CancelRequestModal\n          requestId={openModal.requestId}\n          onClose={onModalClose}\n        />\n      )}\n      {['edit', 'create'].includes(openModal.type) && (\n        <AccessRequestsWizard\n          variant={openModal.type}\n          requestId={openModal.requestId}\n          onClose={onModalClose}\n        />\n      )}\n    </React.Fragment>\n  );\n\n  // Rendering\n  const createButton = isInternal && (\n    <Button variant=\"primary\" onClick={() => setOpenModal({ type: 'create' })}>\n      Create request\n    </Button>\n  );\n  if (rows.length === 0 && !isLoading && !filtersDirty) {\n    return (\n      <Bullseye style={{ height: 'auto' }} className=\"pf-v5-u-mt-lg\">\n        <EmptyState variant=\"lg\">\n          <EmptyStateHeader\n            titleText={\n              <>\n                {isInternal\n                  ? 'No access requests'\n                  : 'You have no access requests'}\n              </>\n            }\n            icon={<EmptyStateIcon icon={PlusCircleIcon} />}\n            headingLevel=\"h3\"\n          />\n          <EmptyStateBody>\n            {isInternal\n              ? 'Click the button below to create an access request.'\n              : 'You have no pending Red Hat access requests.'}\n          </EmptyStateBody>\n          <EmptyStateFooter>{createButton}</EmptyStateFooter>\n        </EmptyState>\n        {modals}\n      </Bullseye>\n    );\n  }\n\n  const selectLabelId = 'filter-status';\n  const selectPlaceholder = `Filter by ${uncapitalize(\n    columns[columns.length - 1]\n  )}`;\n  const clearFiltersButton = (\n    <Button\n      variant=\"link\"\n      onClick={() => {\n        setStatusSelections([]);\n        setAccountFilter('');\n        setPage(1);\n      }}\n    >\n      Clear filters\n    </Button>\n  );\n  const toolbar = (\n    <Toolbar id=\"access-requests-table-toolbar\">\n      <ToolbarContent>\n        <ToolbarItem>\n          <InputGroup>\n            <InputGroupItem>\n              <Dropdown\n                isOpen={isDropdownOpen}\n                onSelect={(ev) => {\n                  setIsDropdownOpen(false);\n                  setFilterColumn(ev.target.value);\n                  setIsSelectOpen(false);\n                  setFiltersDirty(true);\n                }}\n                toggle={\n                  <DropdownToggle\n                    onToggle={(_event, isOpen) => setIsDropdownOpen(isOpen)}\n                  >\n                    <FilterIcon /> {filterColumn}\n                  </DropdownToggle>\n                }\n                dropdownItems={(isInternal ? [1, 5] : [6])\n                  .map((i) => columns[i])\n                  .map((colName) => (\n                    // Filterable columns are RequestID, AccountID, and Status\n                    <DropdownItem\n                      key={colName}\n                      value={colName}\n                      component=\"button\"\n                    >\n                      {capitalize(colName)}\n                    </DropdownItem>\n                  ))}\n              />\n            </InputGroupItem>\n            {['Status', 'Decision'].includes(filterColumn) && (\n              <React.Fragment>\n                <span id={selectLabelId} hidden>\n                  {selectPlaceholder}\n                </span>\n                <Select\n                  aria-labelledby={selectLabelId}\n                  variant=\"checkbox\"\n                  aria-label=\"Select statuses\"\n                  onToggle={(_event, isOpen) => setIsSelectOpen(isOpen)}\n                  onSelect={(_ev, selection) => {\n                    setFiltersDirty(true);\n                    if (statusSelections.includes(selection)) {\n                      setStatusSelections(\n                        statusSelections.filter((s) => s !== selection)\n                      );\n                    } else {\n                      setStatusSelections([...statusSelections, selection]);\n                    }\n                    setPage(1);\n                  }}\n                  isOpen={isSelectOpen}\n                  selections={Array.from(statusSelections)}\n                  isCheckboxSelectionBadgeHidden\n                  placeholderText={selectPlaceholder}\n                >\n                  {statuses.map((status) => (\n                    <SelectOption key={status} value={status}>\n                      {capitalize(status)}\n                    </SelectOption>\n                  ))}\n                </Select>\n              </React.Fragment>\n            )}\n            {filterColumn === 'Account number' && (\n              <form\n                style={{ display: 'flex' }}\n                onSubmit={(ev) => ev.preventDefault()}\n              >\n                <TextInput\n                  name={`${filterColumn}-filter`}\n                  id={`${filterColumn}-filter`}\n                  type=\"search\"\n                  placeholder={`Filter by ${uncapitalize(filterColumn)}`}\n                  aria-label={`${filterColumn} search input`}\n                  value={accountFilter}\n                  onChange={(_event, val) => {\n                    setAccountFilter(val), setFiltersDirty(true), setPage(1);\n                  }}\n                />\n              </form>\n            )}\n          </InputGroup>\n        </ToolbarItem>\n        <ToolbarItem>{createButton}</ToolbarItem>\n        <ToolbarItem variant=\"pagination\" align={{ default: 'alignRight' }}>\n          <AccessRequestsPagination id=\"top\" />\n        </ToolbarItem>\n      </ToolbarContent>\n      <ToolbarContent>\n        <ChipGroup categoryName=\"Status\">\n          {statusSelections.map((status) => (\n            <Chip\n              key={status}\n              onClick={() => {\n                setStatusSelections(\n                  statusSelections.filter((s) => s !== status)\n                );\n                setPage(1);\n              }}\n            >\n              {status}\n            </Chip>\n          ))}\n        </ChipGroup>\n        {accountFilter && (\n          <ChipGroup categoryName=\"Account number\">\n            <Chip\n              onClick={() => {\n                setAccountFilter(''), setPage(1);\n              }}\n            >\n              {accountFilter}\n            </Chip>\n          </ChipGroup>\n        )}\n        {hasFilters && clearFiltersButton}\n      </ToolbarContent>\n    </Toolbar>\n  );\n  function getColumnWidth(columnIndex) {\n    if (isInternal) {\n      return columnIndex === 0 ? 30 : 15;\n    }\n\n    return [0, 6].includes(columnIndex) ? 20 : 10;\n  }\n  const table = (\n    <Table aria-label=\"Access requests table\" variant=\"compact\">\n      <Thead>\n        <Tr>\n          {columns.map((column, columnIndex) => (\n            <Th\n              key={columnIndex}\n              {...(!column.includes('name') &&\n                column !== 'Decision' && {\n                  sort: {\n                    sortBy: {\n                      index: activeSortIndex,\n                      direction: activeSortDirection,\n                    },\n                    onSort,\n                    columnIndex,\n                  },\n                })}\n              width={getColumnWidth(columnIndex)}\n            >\n              {column}\n            </Th>\n          ))}\n          {isInternal && <Th />}\n        </Tr>\n      </Thead>\n      <Tbody>\n        {isLoading\n          ? [...Array(rows.length || perPage).keys()].map((i) => (\n              <Tr key={i}>\n                {columns.map((name, j) => (\n                  <Td key={j} dataLabel={name}>\n                    <div\n                      style={{ height: '30px' }}\n                      className=\"ins-c-skeleton ins-c-skeleton__md\"\n                    >\n                      {' '}\n                    </div>\n                  </Td>\n                ))}\n              </Tr>\n            ))\n          : rows.map((row, rowIndex) => (\n              <Tr key={rowIndex}>\n                <Td dataLabel={columns[0]}>\n                  <Link to={row[0]}>{row[0]}</Link>\n                </Td>\n                <Td dataLabel={columns[1]}>{row[1]}</Td>\n                <Td dataLabel={columns[2]}>{row[2]}</Td>\n                <Td dataLabel={columns[3]}>{row[3]}</Td>\n                <Td dataLabel={columns[4]}>{row[4]}</Td>\n                {isInternal ? (\n                  <Td dataLabel={columns[5]}>\n                    <StatusLabel\n                      requestId={row[0]}\n                      status={row[5]}\n                      onLabelClick={() => {\n                        setStatusSelections([\n                          ...statusSelections.filter((s) => s !== status),\n                          status,\n                        ]);\n                        setPage(1);\n                      }}\n                      hideActions\n                    />\n                  </Td>\n                ) : (\n                  <Td dataLabel={columns[5]}>{row[5]}</Td>\n                )}\n                {isInternal ? (\n                  // Different actions based on status\n                  <Td\n                    actions={getInternalActions(row[5], row[0], setOpenModal)}\n                  />\n                ) : (\n                  <Td dataLabel={columns[6]}>\n                    <StatusLabel requestId={row[0]} status={row[6]} />\n                  </Td>\n                )}\n              </Tr>\n            ))}\n        {rows.length === 0 && hasFilters ? (\n          <Tr>\n            <Td colSpan={columns.length}>\n              <div>\n                <EmptyState variant=\"sm\">\n                  <EmptyStateHeader\n                    titleText=\"No matching requests found\"\n                    icon={<EmptyStateIcon icon={SearchIcon} />}\n                    headingLevel=\"h2\"\n                  />\n                  <EmptyStateBody>\n                    No results match the filter criteria. Remove all filters or\n                    clear all filters to show results.\n                  </EmptyStateBody>\n                  <EmptyStateFooter>{clearFiltersButton}</EmptyStateFooter>\n                </EmptyState>\n              </div>\n            </Td>\n          </Tr>\n        ) : null}\n      </Tbody>\n    </Table>\n  );\n\n  return (\n    <React.Fragment>\n      {toolbar}\n      {table}\n      <AccessRequestsPagination id=\"bottom\" />\n      {modals}\n    </React.Fragment>\n  );\n};\n\nAccessRequestsTable.propTypes = {\n  isInternal: PropTypes.bool,\n};\n\nexport default AccessRequestsTable;\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport { PageSection, Title } from '@patternfly/react-core';\nimport AccessRequestsTable from '../Components/AccessRequestsTable';\nimport PropTypes from 'prop-types';\nimport registry from '../store';\nimport ErroReducerCatcher from '../Components/ErrorReducerCatcher';\n\nconst AccessRequestsPage = (props) => {\n  return (\n    <Provider store={registry.getStore()}>\n      <ErroReducerCatcher>\n        <PageSection variant=\"light\">\n          <Title headingLevel=\"h1\" className=\"pf-v5-u-pb-sm\">\n            Access Requests\n          </Title>\n          <p>\n            Below is a list of all submitted requests for read only account\n            access.\n          </p>\n        </PageSection>\n        <PageSection padding={{ default: 'noPadding' }}>\n          <AccessRequestsTable isInternal={props?.isInternal} />\n        </PageSection>\n      </ErroReducerCatcher>\n    </Provider>\n  );\n};\n\n// This component is a federated module used in https://github.com/RedHatInsights/insights-rbac-ui\n// Try not to break RBAC.\nAccessRequestsPage.propTypes = {\n  isInternal: PropTypes.bool,\n};\n\nexport default AccessRequestsPage;\n"],"names":["exports","name","height","width","svgPath","yOffset","xOffset","uncapitalize","input","toLowerCase","substring","statuses","AccessRequestsTable","isInternal","columns","activeSortIndex","setActiveSortIndex","activeSortDirection","setActiveSortDirection","onSort","_ev","index","direction","page","setPage","perPage","setPerPage","AccessRequestsPagination","id","Pagination","itemCount","numRows","onSetPage","pageNumber","variant","perPageOptions","map","n","title","value","onPerPageSelect","isCompact","propTypes","isDropdownOpen","setIsDropdownOpen","filterColumn","setFilterColumn","isSelectOpen","setIsSelectOpen","statusSelections","setStatusSelections","accountFilter","setAccountFilter","filtersDirty","setFiltersDirty","hasFilters","length","isLoading","setIsLoading","setNumRows","rows","setRows","dispatch","fetchAccessRequests","listUrl","URL","window","location","origin","searchParams","append","join","orderBy","replace","apiInstance","get","href","headers","Accept","then","res","meta","count","data","d","request_id","target_account","start_date","end_date","created","status","first_name","last_name","catch","err","description","message","debouncedAccountFilter","delay","debouncedValue","setDebouncedValue","handler","setTimeout","clearTimeout","useDebounce","openModal","setOpenModal","type","onModalClose","isChanged","modals","CancelRequestModal","requestId","onClose","includes","AccessRequestsWizard","createButton","Button","onClick","Bullseye","style","className","EmptyState","EmptyStateHeader","titleText","icon","EmptyStateIcon","headingLevel","EmptyStateBody","EmptyStateFooter","selectLabelId","selectPlaceholder","clearFiltersButton","toolbar","Toolbar","ToolbarContent","ToolbarItem","InputGroup","InputGroupItem","Dropdown","isOpen","onSelect","ev","target","toggle","DropdownToggle","onToggle","_event","dropdownItems","i","colName","DropdownItem","key","component","hidden","Select","selection","filter","s","selections","Array","from","isCheckboxSelectionBadgeHidden","placeholderText","SelectOption","display","onSubmit","preventDefault","TextInput","placeholder","onChange","val","align","default","ChipGroup","categoryName","Chip","getColumnWidth","columnIndex","table","Table","Thead","Tr","column","Th","sort","sortBy","Tbody","keys","j","Td","dataLabel","row","rowIndex","Link","to","onLabelClick","hideActions","actions","colSpan","AccessRequestsPage","props","store","getStore","PageSection","Title","padding"],"sourceRoot":""}