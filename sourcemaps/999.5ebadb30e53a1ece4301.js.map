{"version":3,"sources":["webpack:///./src/Routes.js","webpack:///./src/App.js","webpack:///./src/store.js"],"names":["AccessRequestsPage","lazy","AccessRequestDetailsPage","Routes","getRegistry","useContext","RegistryContext","React","isInternal","Suspense","fallback","Bullseye","Spinner","process","Switch","Route","path","exact","component","Redirect","to","history","useHistory","useEffect","insights","chrome","init","identifyApp","unregister","on","event","push","navId","Fragment","NotificationPortal","createContext","registry","ReducerRegistry","notificationsMiddleware","errorTitleKey","errorDescriptionKey","register","notifications","notificationsReducer"],"mappings":"yQAQMA,GAAqBC,WAAK,kBAAM,kEAChCC,GAA2BD,WAAK,kBACpC,iEAKWE,EAAS,WAAM,IAClBC,GAAgBC,gBAAWC,KAA3BF,YADkB,EAEUG,cAAe,GAFzB,WAEnBC,EAFmB,KAa1B,OAb0B,KAcxB,kBAAC,EAAAC,SAAD,CACEC,SACE,kBAAC,EAAAC,SAAD,KACE,kBAAC,EAAAC,QAAD,SAnBIC,EAgCR,kBAAC,EAAAC,OAAD,KACE,kBAAC,EAAAC,MAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAtBM,kBAChC,kBAAClB,EAAD,CAAoBQ,WAAYA,EAAYJ,YAAaA,OAsBrD,kBAAC,EAAAW,MAAD,CACEC,KAAK,cACLC,OAAK,EACLC,UAhCgC,kBACtC,kBAAChB,EAAD,CACEM,WAAYA,EACZJ,YAAaA,OA+BX,kBAAC,EAAAW,MAAD,KACE,kBAAC,EAAAI,SAAD,CAAUC,GAAG,U,UCzBvB,QAtBY,WACV,IAAMC,GAAUC,kBAahB,OAZAC,gBAAU,WACRC,SAASC,OAAOC,OAEhBF,SAASC,OAAOE,YAAY,mBAC5B,IAAMC,EAAaJ,SAASC,OAAOI,GAAG,kBAAkB,SAACC,GAAD,OACtDT,EAAQU,KAAR,WAAiBD,EAAME,WAEzB,OAAO,WACLJ,OAED,IAGD,kBAAC,EAAAK,SAAD,KACE,kBAACC,EAAA,GAAD,MACA,kBAAC/B,EAAD,S,iGClBOG,GAAkB6B,mBAAc,CAC3C/B,YAAa,eAGTgC,EAAW,IAAIC,KAAgB,GAAI,EACvCC,QAAwB,CACtBC,cAAe,CAAC,WAChBC,oBAAqB,CAAC,SAAU,aAIpCJ,EAASK,SAAS,CAChBC,cAAeC,OAGjB","file":"js/999.68d5a90085b16035b157.js","sourcesContent":["import { Redirect, Route, Switch } from 'react-router-dom';\nimport React, { Suspense, lazy, useContext } from 'react';\nimport {\n  Bullseye,\n  Spinner,\n  Switch as ToggleSwitch,\n} from '@patternfly/react-core';\n\nconst AccessRequestsPage = lazy(() => import('./Routes/AccessRequestsPage'));\nconst AccessRequestDetailsPage = lazy(() =>\n  import('./Routes/AccessRequestDetailsPage')\n);\nimport { RegistryContext } from './store';\nconst isDev = process.env.NODE_ENV !== 'production';\n\nexport const Routes = () => {\n  const { getRegistry } = useContext(RegistryContext);\n  const [isInternal, setIsInternal] = React.useState(true);\n  const AccessRequestDetailsPageWrapper = () => (\n    <AccessRequestDetailsPage\n      isInternal={isInternal}\n      getRegistry={getRegistry}\n    />\n  );\n  const AccessRequestsPageWrapper = () => (\n    <AccessRequestsPage isInternal={isInternal} getRegistry={getRegistry} />\n  );\n\n  return (\n    <Suspense\n      fallback={\n        <Bullseye>\n          <Spinner />\n        </Bullseye>\n      }\n    >\n      {isDev && (\n        <ToggleSwitch\n          id=\"toggle-view\"\n          label=\"Internal view\"\n          labelOff=\"External view\"\n          isChecked={isInternal}\n          onChange={() => setIsInternal(!isInternal)}\n        />\n      )}\n      <Switch>\n        <Route path=\"/\" exact component={AccessRequestsPageWrapper} />\n        <Route\n          path=\"/:requestId\"\n          exact\n          component={AccessRequestDetailsPageWrapper}\n        />\n        <Route>\n          <Redirect to=\"/\" />\n        </Route>\n      </Switch>\n    </Suspense>\n  );\n};\n","import React, { Fragment, useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { Routes } from './Routes';\nimport NotificationPortal from '@redhat-cloud-services/frontend-components-notifications/NotificationPortal';\nimport './index.css';\n\nconst App = () => {\n  const history = useHistory();\n  useEffect(() => {\n    insights.chrome.init();\n\n    insights.chrome.identifyApp('access-requests');\n    const unregister = insights.chrome.on('APP_NAVIGATION', (event) =>\n      history.push(`/${event.navId}`)\n    );\n    return () => {\n      unregister();\n    };\n  }, []);\n\n  return (\n    <Fragment>\n      <NotificationPortal />\n      <Routes />\n    </Fragment>\n  );\n};\n\nexport default App;\n","import { createContext } from 'react';\nimport ReducerRegistry from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport notificationsMiddleware from '@redhat-cloud-services/frontend-components-notifications/notificationsMiddleware';\nimport { notificationsReducer } from '@redhat-cloud-services/frontend-components-notifications/redux';\n\nexport const RegistryContext = createContext({\n  getRegistry: () => {},\n});\n\nconst registry = new ReducerRegistry({}, [\n  notificationsMiddleware({\n    errorTitleKey: ['message'],\n    errorDescriptionKey: ['errors', 'stack'],\n  }),\n]);\n\nregistry.register({\n  notifications: notificationsReducer,\n});\n\nexport default registry;\n"],"sourceRoot":""}