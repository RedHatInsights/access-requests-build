{"version":3,"sources":["webpack:///./src/Components/AccessRequestsTable.js","webpack:///./src/Routes/AccessRequestsPage.js"],"names":["uncapitalize","input","toLowerCase","substring","statuses","AccessRequestsTable","isInternal","columns","React","activeSortIndex","setActiveSortIndex","activeSortDirection","setActiveSortDirection","onSort","_ev","index","direction","page","setPage","perPage","setPerPage","AccessRequestsPagination","id","Pagination","itemCount","numRows","onSetPage","pageNumber","variant","onPerPageSelect","propTypes","PropTypes","isDropdownOpen","setIsDropdownOpen","filterColumn","setFilterColumn","isSelectOpen","setIsSelectOpen","statusSelections","setStatusSelections","accountFilter","setAccountFilter","hasFilters","length","isLoading","setIsLoading","setNumRows","rows","setRows","dispatch","useDispatch","fetchAccessRequests","listUrl","URL","window","location","origin","API_BASE","searchParams","append","join","orderBy","replace","fetch","href","headers","Accept","then","res","json","meta","count","data","map","d","request_id","target_account","start_date","end_date","created","status","first_name","last_name","err","addNotification","title","description","message","type","openModal","setOpenModal","onModalClose","isChanged","modals","CancelRequestModal","requestId","onClose","includes","EditRequestModal","createButton","Button","onClick","Bullseye","style","height","className","EmptyState","EmptyStateIcon","icon","PlusCircleIcon","Title","headingLevel","size","EmptyStateBody","selectLabelId","selectPlaceholder","FilterTextForm","colName","value","setValue","inputValue","setInputValue","display","onSubmit","ev","preventDefault","TextInput","name","placeholder","aria-label","onChange","val","clearFiltersButton","toolbar","Toolbar","ToolbarContent","ToolbarItem","InputGroup","Dropdown","isOpen","onSelect","target","toggle","DropdownToggle","onToggle","dropdownItems","i","DropdownItem","key","component","capitalize","hidden","Select","aria-labelledby","selection","filter","s","selections","Array","from","isCheckboxSelectionBadgeHidden","placeholderText","SelectOption","align","default","ChipGroup","categoryName","Chip","getColumnWidth","columnIndex","url","useRouteMatch","table","TableComposable","Thead","Tr","column","Th","sort","sortBy","width","Tbody","keys","j","Td","dataLabel","row","rowIndex","Link","to","endsWith","onLabelClick","hideActions","actions","getInternalActions","colSpan","SearchIcon","AccessRequestsPage","getRegistry","Provider","store","getStore","PageSection","padding","withRouter"],"mappings":"saA0CA,SAASA,EAAaC,GACpB,OAAOA,EAAM,GAAGC,cAAgBD,EAAME,UAAU,GAGlD,IAAMC,EAAW,CAAC,UAAW,WAAY,SAAU,YAAa,WAE1DC,EAAsB,SAAC,GAAmB,IAAjBC,EAAiB,EAAjBA,WACvBC,EAAUD,EACZ,CACE,aACA,iBACA,aACA,WACA,UACA,UAEF,CACE,aACA,aACA,YACA,aACA,WACA,UACA,YAjBwC,EAqBAE,aAC5CF,EAAa,EAAI,GAtB2B,WAqBvCG,EArBuC,KAqBtBC,EArBsB,OAwBQF,aAAe,QAxBvB,WAwBvCG,EAxBuC,KAwBlBC,EAxBkB,KAyBxCC,EAAS,SAACC,EAAKC,EAAOC,GAC1BN,EAAmBK,GACnBH,EAAuBI,IA3BqB,EA+BtBR,aAAe,GA/BO,WA+BvCS,EA/BuC,KA+BjCC,EA/BiC,OAgChBV,aAAe,IAhCC,WAgCvCW,EAhCuC,KAgC9BC,EAhC8B,KAiCxCC,EAA2B,SAAC,GAAD,IAAGC,EAAH,EAAGA,GAAH,OAC/B,kBAAC,EAAAC,WAAD,CACEC,UAAWC,GACXN,QAASA,EACTF,KAAMA,EACNS,UAAW,SAACZ,EAAKa,GAAN,OAAqBT,EAAQS,IACxCL,GAAI,oCAAsCA,EAC1CM,QAASN,EACTO,gBAAiB,SAACf,EAAKK,GAAN,OAAkBC,EAAWD,OAIlDE,EAAyBS,UAAY,CACnCR,GAAIS,YA9CwC,MAkDFvB,cAAe,GAlDb,WAkDvCwB,EAlDuC,KAkDvBC,EAlDuB,OAmDNzB,aACtCD,EAAQD,EAAa,EAAI,IApDmB,WAmDvC4B,EAnDuC,KAmDzBC,EAnDyB,OAsDN3B,cAAe,GAtDT,WAsDvC4B,EAtDuC,KAsDzBC,EAtDyB,OAuDE7B,aAAe,IAvDjB,WAuDvC8B,GAvDuC,KAuDrBC,GAvDqB,QAwDJ/B,aAAe,IAxDX,aAwDvCgC,GAxDuC,MAwDxBC,GAxDwB,MAyDxCC,GAAaJ,GAAiBK,OAAS,GAAKH,GAzDJ,GA4DZhC,cAAe,GA5DH,aA4DvCoC,GA5DuC,MA4D5BC,GA5D4B,SA6DhBrC,aAAe,GA7DC,aA6DvCiB,GA7DuC,MA6D9BqB,GA7D8B,SA8DtBtC,aAAe,IA9DO,aA8DvCuC,GA9DuC,MA8DjCC,GA9DiC,MA+DxCC,IAAWC,mBACXC,GAAsB,WAC1BN,IAAa,GACb,IAAMO,EAAU,IAAIC,IAAJ,UACXC,OAAOC,SAASC,QADL,OACcC,eADd,6BAGZnD,GACF8C,EAAQM,aAAaC,OAAO,WAAY,WAE1CP,EAAQM,aAAaC,OAAO,UAAW1C,EAAO,GAAKE,GACnDiC,EAAQM,aAAaC,OAAO,QAASxC,GAEjCqB,IACFY,EAAQM,aAAaC,OAAO,UAAWnB,IAErCF,GAAiBK,OAAS,GAC5BS,EAAQM,aAAaC,OAAO,SAAUrB,GAAiBsB,KAAK,MAE9D,IAAMC,EAAU,GAAH,OAA8B,SAAxBlD,EAAiC,IAAM,IAA7C,OAAkDJ,EAC7DE,GAECP,cACA4D,QAAQ,IAAK,MAChBV,EAAQM,aAAaC,OAAO,WAAYE,GAExCE,MAAMX,EAAQY,KAAM,CAAEC,QAAS,CAAEC,OAAQ,sBACtCC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACC,GACLtB,GAAWsB,EAAIE,KAAKC,OACpBvB,GACEoB,EAAII,KAAKC,KAAI,SAACC,GAAD,OACXpE,EACI,CACEoE,EAAEC,WACFD,EAAEE,eACFF,EAAEG,WACFH,EAAEI,SACFJ,EAAEK,QACFL,EAAEM,QAEJ,CACEN,EAAEC,WACFD,EAAEO,WACFP,EAAEQ,UACFR,EAAEG,WACFH,EAAEI,SACFJ,EAAEK,QACFL,EAAEM,YAIZnC,IAAa,MA1BjB,OA4BS,SAACsC,GACNtC,IAAa,GACbI,IACEmC,QAAgB,CACdxD,QAAS,SACTyD,MAAO,iCACPC,YAAaH,EAAII,eAK3B/E,eAAgB,WACd2C,OACC,CACDX,GACAF,GACA7B,EACAE,EACAQ,EACAF,IAvI4C,OA2IZT,aAAe,CAAEgF,KAAM,OA3IX,aA2IvCC,GA3IuC,MA2I5BC,GA3I4B,MA4IxCC,GAAe,SAACC,GACpBF,GAAa,CAAEF,KAAM,OACjBI,GACFzC,MAGE0C,GACJ,kBAAC,aAAD,KACsB,WAAnBJ,GAAUD,MACT,kBAACM,EAAA,EAAD,CACEC,UAAWN,GAAUM,UACrBC,QAASL,KAGZ,CAAC,OAAQ,UAAUM,SAASR,GAAUD,OACrC,kBAACU,EAAA,EAAD,CACEtE,QAAS6D,GAAUD,KACnBO,UAAWN,GAAUM,UACrBC,QAASL,MAOXQ,GAAe7F,GACnB,kBAAC,EAAA8F,OAAD,CAAQxE,QAAQ,UAAUyE,QAAS,kBAAMX,GAAa,CAAEF,KAAM,aAA9D,kBAIF,GAAoB,IAAhBzC,GAAKJ,SAAiBC,KAAcF,GACtC,OACE,kBAAC,EAAA4D,SAAD,CAAUC,MAAO,CAAEC,OAAQ,QAAUC,UAAU,cAC7C,kBAAC,EAAAC,WAAD,CAAY9E,QAAQ,SAClB,kBAAC,EAAA+E,eAAD,CAAgBC,KAAMC,OACtB,kBAAC,EAAAC,MAAD,CAAOC,aAAa,KAAKC,KAAK,MAC3B1G,EAAa,qBAAuB,+BAEvC,kBAAC,EAAA2G,eAAD,KACG3G,EACG,sDACA,gDAEL6F,IAEFN,IAKP,IAAMqB,GAAgB,gBAChBC,GAAoB,aAAH,OAAgBnH,EACrCO,EAAQA,EAAQoC,OAAS,KAErByE,GAAiB,SAAC,GAAiC,IAA/BC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SAAe,EACnB/G,aAAe8G,GADI,WAChDE,EADgD,KACpCC,EADoC,KAEvD,OACE,0BACElB,MAAO,CAAEmB,QAAS,QAClBC,SAAU,SAACC,GACTA,EAAGC,iBACHN,EAASC,KAGX,kBAAC,EAAAM,UAAD,CACEC,KAAI,UAAKV,EAAL,WACJ/F,GAAE,UAAK+F,EAAL,WACF7B,KAAK,SACLwC,YAAW,oBAAehI,EAAaqH,IACvCY,aAAA,UAAeZ,EAAf,iBACAC,MAAOE,EACPU,SAAU,SAACC,GAAD,OAASV,EAAcU,MAEnC,kBAAC,EAAA/B,OAAD,CACExE,QAAQ,UACR4D,KAAK,SACLyC,aAAA,4BAAiCZ,EAAjC,YAEA,kBAAC,KAAD,SAMRD,GAAetF,UAAY,CACzBuF,QAAStF,WACTuF,MAAOvF,WACPwF,SAAUxF,UAGZ,IAAMqG,GACJ,kBAAC,EAAAhC,OAAD,CACExE,QAAQ,OACRyE,QAAS,WACP9D,GAAoB,IACpBE,GAAiB,MAJrB,iBAUI4F,GACJ,kBAAC,EAAAC,QAAD,CAAShH,GAAG,iCACV,kBAAC,EAAAiH,eAAD,KACE,kBAAC,EAAAC,YAAD,KACE,kBAAC,EAAAC,WAAD,KACE,kBAAC,EAAAC,SAAD,CACEC,OAAQ3G,EACR4G,SAAU,SAAChB,GACT3F,GAAkB,GAClBE,EAAgByF,EAAGiB,OAAOvB,OAC1BjF,GAAgB,IAElByG,OACE,kBAAC,EAAAC,eAAD,CACEC,SAAU,SAACL,GAAD,OAAY1G,EAAkB0G,KAExC,kBAAC,KAAD,MAHF,IAGkBzG,GAIpB+G,eAAgB3I,EAAa,CAAC,EAAG,GAAK,CAAC,IACpCmE,KAAI,SAACyE,GAAD,OAAO3I,EAAQ2I,MACnBzE,KAAI,SAAC4C,GAAD,OAEH,kBAAC,EAAA8B,aAAD,CACEC,IAAK/B,EACLC,MAAOD,EACPgC,UAAU,WAETC,QAAWjC,SAInB,CAAC,SAAU,YAAYpB,SAAS/D,IAC/B,kBAAC,aAAD,KACE,0BAAMZ,GAAI4F,GAAeqC,QAAM,GAC5BpC,IAEH,kBAAC,EAAAqC,OAAD,CACEC,kBAAiBvC,GACjBtF,QAAQ,WACRqG,aAAW,kBACXe,SAAU,SAACL,GAAD,OAAYtG,EAAgBsG,IACtCC,SAAU,SAAC9H,EAAK4I,GACVpH,GAAiB2D,SAASyD,GAC5BnH,GACED,GAAiBqH,QAAO,SAACC,GAAD,OAAOA,IAAMF,MAGvCnH,GAAoB,GAAD,WAAKD,IAAL,CAAuBoH,MAG9Cf,OAAQvG,EACRyH,WAAYC,MAAMC,KAAKzH,IACvB0H,gCAA8B,EAC9BC,gBAAiB9C,IAEhB/G,EAASqE,KAAI,SAACO,GAAD,OACZ,kBAAC,EAAAkF,aAAD,CAAcd,IAAKpE,EAAQsC,MAAOtC,IAC/BsE,QAAWtE,SAMJ,mBAAjB9C,GACC,kBAACkF,GAAD,CACEC,QAASnF,EACToF,MAAO9E,GACP+E,SAAU9E,OAKlB,kBAAC,EAAA+F,YAAD,KAAcrC,IACd,kBAAC,EAAAqC,YAAD,CAAa5G,QAAQ,aAAauI,MAAO,CAAEC,QAAS,eAClD,kBAAC/I,EAAD,CAA0BC,GAAG,UAGjC,kBAAC,EAAAiH,eAAD,KACE,kBAAC,EAAA8B,UAAD,CAAWC,aAAa,UACrBhI,GAAiBmC,KAAI,SAACO,GAAD,OACpB,kBAAC,EAAAuF,KAAD,CACEnB,IAAKpE,EACLqB,QAAS,kBACP9D,GACED,GAAiBqH,QAAO,SAACC,GAAD,OAAOA,IAAM5E,QAIxCA,OAINxC,IACC,kBAAC,EAAA6H,UAAD,CAAWC,aAAa,kBACtB,kBAAC,EAAAC,KAAD,CAAMlE,QAAS,kBAAM5D,GAAiB,MAAMD,KAG/CE,IAAc0F,KAIrB,SAASoC,GAAeC,GACtB,OAAInK,EACqB,IAAhBmK,EAAoB,GAAK,GAG3B,CAAC,EAAG,GAAGxE,SAASwE,GAAe,GAAK,GA7VC,IA+VtCC,IAAQC,qBAARD,IACFE,GACJ,kBAAC,EAAAC,gBAAD,CAAiB5C,aAAW,wBAAwBrG,QAAQ,WAC1D,kBAAC,EAAAkJ,MAAD,KACE,kBAAC,EAAAC,GAAD,KACGxK,EAAQkE,KAAI,SAACuG,EAAQP,GAAT,OACX,kBAAC,EAAAQ,GAAD,KACE7B,IAAKqB,IACCO,EAAO/E,SAAS,SAAW,CAC/BiF,KAAM,CACJC,OAAQ,CACNpK,MAAON,EACPO,UAAWL,GAEbE,SACA4J,gBATN,CAYEW,MAAOZ,GAAeC,KAErBO,MAGJ1K,GAAc,kBAAC,EAAA2K,GAAD,QAGnB,kBAAC,EAAAI,MAAD,KACGzI,GACG,IAAIkH,MAAM/G,GAAKJ,QAAUxB,GAASmK,QAAQ7G,KAAI,SAACyE,GAAD,OAC5C,kBAAC,EAAA6B,GAAD,CAAI3B,IAAKF,GACN3I,EAAQkE,KAAI,SAACsD,EAAMwD,GAAP,OACX,kBAAC,EAAAC,GAAD,CAAIpC,IAAKmC,EAAGE,UAAW1D,GACrB,yBACExB,MAAO,CAAEC,OAAQ,QACjBC,UAAU,qCAET,aAMX1D,GAAK0B,KAAI,SAACiH,EAAKC,GAAN,OACP,kBAAC,EAAAZ,GAAD,CAAI3B,IAAKuC,GACP,kBAAC,EAAAH,GAAD,CAAIC,UAAWlL,EAAQ,IACrB,kBAAC,EAAAqL,KAAD,CAAMC,GAAE,UAAKnB,IAAL,OAAWA,GAAIoB,SAAS,KAAO,GAAK,KAApC,OAA0CJ,EAAI,KACnDA,EAAI,KAGT,kBAAC,EAAAF,GAAD,CAAIC,UAAWlL,EAAQ,IAAKmL,EAAI,IAChC,kBAAC,EAAAF,GAAD,CAAIC,UAAWlL,EAAQ,IAAKmL,EAAI,IAChC,kBAAC,EAAAF,GAAD,CAAIC,UAAWlL,EAAQ,IAAKmL,EAAI,IAChC,kBAAC,EAAAF,GAAD,CAAIC,UAAWlL,EAAQ,IAAKmL,EAAI,IAC/BpL,EACC,kBAAC,EAAAkL,GAAD,CAAIC,UAAWlL,EAAQ,IACrB,kBAAC,IAAD,CACEwF,UAAW2F,EAAI,GACf1G,OAAQ0G,EAAI,GACZK,aAAc,kBACZxJ,GAAoB,GAAD,WACdD,GAAiBqH,QAAO,SAACC,GAAD,OAAOA,IAAM5E,WADvB,CAEjBA,WAGJgH,aAAW,KAIf,kBAAC,EAAAR,GAAD,CAAIC,UAAWlL,EAAQ,IAAKmL,EAAI,IAEjCpL,EAEC,kBAAC,EAAAkL,GAAD,CACES,SAASC,OAAmBR,EAAI,GAAIA,EAAI,GAAIhG,MAG9C,kBAAC,EAAA8F,GAAD,CAAIC,UAAWlL,EAAQ,IACrB,kBAAC,IAAD,CAAawF,UAAW2F,EAAI,GAAI1G,OAAQ0G,EAAI,UAKvC,IAAhB3I,GAAKJ,QAAgBD,IACpB,kBAAC,EAAAqI,GAAD,KACE,kBAAC,EAAAS,GAAD,CAAIW,QAAS5L,EAAQoC,QACnB,kBAAC,EAAA+D,WAAD,CAAY9E,QAAQ,SAClB,kBAAC,EAAA+E,eAAD,CAAgBC,KAAMwF,OACtB,kBAAC,EAAAtF,MAAD,CAAOC,aAAa,KAAKC,KAAK,MAA9B,8BAGA,kBAAC,EAAAC,eAAD,uGAICmB,QASf,OACE,kBAAC,aAAD,KACGC,GACAuC,GACD,kBAACvJ,EAAD,CAA0BC,GAAG,WAC5BuE,KAKPxF,EAAoByB,UAAY,CAC9BxB,WAAYyB,UAGd,UC7fA,IAAMsK,EAAqB,SAAC,GAAgC,IAA9BC,EAA8B,EAA9BA,YAAahM,EAAiB,EAAjBA,WACzC,OACE,kBAAC,EAAAiM,SAAD,CAAUC,MAAOF,IAAcG,YAC7B,kBAAC,EAAAC,YAAD,CAAa9K,QAAQ,SACnB,kBAAC,EAAAkF,MAAD,CAAOC,aAAa,KAAKN,UAAU,cAAnC,mBAGA,uGAKF,kBAAC,EAAAiG,YAAD,CAAaC,QAAS,CAAEvC,QAAS,cAC/B,kBAAC,EAAD,CAAqB9J,WAAYA,OAQzC+L,EAAmBvK,UAAY,CAC7BwK,YAAavK,SACbzB,WAAYyB,UAGd,SAAe6K,gBAAWP","file":"js/395.dcd939d5d48c6be57ca4.js","sourcesContent":["import React from 'react';\nimport {\n  Toolbar,\n  ToolbarItem,\n  ToolbarContent,\n  Button,\n  InputGroup,\n  TextInput,\n  Pagination,\n  Dropdown,\n  DropdownToggle,\n  DropdownItem,\n  Select,\n  SelectOption,\n  ChipGroup,\n  Chip,\n  Bullseye,\n  EmptyState,\n  EmptyStateIcon,\n  EmptyStateBody,\n  Title,\n} from '@patternfly/react-core';\nimport {\n  TableComposable,\n  Thead,\n  Tbody,\n  Tr,\n  Th,\n  Td,\n} from '@patternfly/react-table';\nimport CancelRequestModal from './CancelRequestModal';\nimport EditRequestModal from './EditRequestModal';\nimport { capitalize } from '@patternfly/react-core/dist/esm/helpers/util';\nimport SearchIcon from '@patternfly/react-icons/dist/js/icons/search-icon';\nimport FilterIcon from '@patternfly/react-icons/dist/js/icons/filter-icon';\nimport PlusCircleIcon from '@patternfly/react-icons/dist/js/icons/plus-circle-icon';\nimport { useDispatch } from 'react-redux';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { Link, useRouteMatch } from 'react-router-dom';\nimport { getInternalActions, StatusLabel } from '../Helpers/getActions';\nimport PropTypes from 'prop-types';\n\nfunction uncapitalize(input) {\n  return input[0].toLowerCase() + input.substring(1);\n}\n\nconst statuses = ['pending', 'approved', 'denied', 'cancelled', 'expired'];\n\nconst AccessRequestsTable = ({ isInternal }) => {\n  const columns = isInternal\n    ? [\n        'Request ID',\n        'Account number',\n        'Start date',\n        'End date',\n        'Created',\n        'Status',\n      ]\n    : [\n        'Request ID',\n        'First name',\n        'Last name',\n        'Start date',\n        'End date',\n        'Created',\n        'Decision',\n      ];\n\n  // Sorting\n  const [activeSortIndex, setActiveSortIndex] = React.useState(\n    isInternal ? 4 : 5\n  );\n  const [activeSortDirection, setActiveSortDirection] = React.useState('desc');\n  const onSort = (_ev, index, direction) => {\n    setActiveSortIndex(index);\n    setActiveSortDirection(direction);\n  };\n\n  // Pagination\n  const [page, setPage] = React.useState(1);\n  const [perPage, setPerPage] = React.useState(10);\n  const AccessRequestsPagination = ({ id }) => (\n    <Pagination\n      itemCount={numRows}\n      perPage={perPage}\n      page={page}\n      onSetPage={(_ev, pageNumber) => setPage(pageNumber)}\n      id={'access-requests-table-pagination-' + id}\n      variant={id}\n      onPerPageSelect={(_ev, perPage) => setPerPage(perPage)}\n    />\n  );\n\n  AccessRequestsPagination.propTypes = {\n    id: PropTypes.string,\n  };\n\n  // Filtering\n  const [isDropdownOpen, setIsDropdownOpen] = React.useState(false);\n  const [filterColumn, setFilterColumn] = React.useState(\n    columns[isInternal ? 1 : 6]\n  );\n  const [isSelectOpen, setIsSelectOpen] = React.useState(false);\n  const [statusSelections, setStatusSelections] = React.useState([]);\n  const [accountFilter, setAccountFilter] = React.useState('');\n  const hasFilters = statusSelections.length > 0 || accountFilter;\n\n  // Row loading\n  const [isLoading, setIsLoading] = React.useState(true);\n  const [numRows, setNumRows] = React.useState(0);\n  const [rows, setRows] = React.useState([]);\n  const dispatch = useDispatch();\n  const fetchAccessRequests = () => {\n    setIsLoading(true);\n    const listUrl = new URL(\n      `${window.location.origin}${API_BASE}/cross-account-requests/`\n    );\n    if (isInternal) {\n      listUrl.searchParams.append('query_by', 'user_id');\n    }\n    listUrl.searchParams.append('offset', (page - 1) * perPage);\n    listUrl.searchParams.append('limit', perPage);\n    // https://github.com/RedHatInsights/insights-rbac/blob/master/rbac/api/cross_access/view.py\n    if (accountFilter) {\n      listUrl.searchParams.append('account', accountFilter);\n    }\n    if (statusSelections.length > 0) {\n      listUrl.searchParams.append('status', statusSelections.join(','));\n    }\n    const orderBy = `${activeSortDirection === 'desc' ? '-' : ''}${columns[\n      activeSortIndex\n    ]\n      .toLowerCase()\n      .replace(' ', '_')}`;\n    listUrl.searchParams.append('order_by', orderBy);\n\n    fetch(listUrl.href, { headers: { Accept: 'application/json' } })\n      .then((res) => res.json())\n      .then((res) => {\n        setNumRows(res.meta.count);\n        setRows(\n          res.data.map((d) =>\n            isInternal\n              ? [\n                  d.request_id,\n                  d.target_account,\n                  d.start_date,\n                  d.end_date,\n                  d.created,\n                  d.status,\n                ]\n              : [\n                  d.request_id,\n                  d.first_name,\n                  d.last_name,\n                  d.start_date,\n                  d.end_date,\n                  d.created,\n                  d.status,\n                ]\n          )\n        );\n        setIsLoading(false);\n      })\n      .catch((err) => {\n        setIsLoading(false);\n        dispatch(\n          addNotification({\n            variant: 'danger',\n            title: 'Could not list access requests',\n            description: err.message,\n          })\n        );\n      });\n  };\n  React.useEffect(() => {\n    fetchAccessRequests();\n  }, [\n    accountFilter,\n    statusSelections,\n    activeSortIndex,\n    activeSortDirection,\n    perPage,\n    page,\n  ]);\n\n  // Modal actions\n  const [openModal, setOpenModal] = React.useState({ type: null });\n  const onModalClose = (isChanged) => {\n    setOpenModal({ type: null });\n    if (isChanged) {\n      fetchAccessRequests();\n    }\n  };\n  const modals = (\n    <React.Fragment>\n      {openModal.type === 'cancel' && (\n        <CancelRequestModal\n          requestId={openModal.requestId}\n          onClose={onModalClose}\n        />\n      )}\n      {['edit', 'create'].includes(openModal.type) && (\n        <EditRequestModal\n          variant={openModal.type}\n          requestId={openModal.requestId}\n          onClose={onModalClose}\n        />\n      )}\n    </React.Fragment>\n  );\n\n  // Rendering\n  const createButton = isInternal && (\n    <Button variant=\"primary\" onClick={() => setOpenModal({ type: 'create' })}>\n      Create request\n    </Button>\n  );\n  if (rows.length === 0 && !isLoading && !hasFilters) {\n    return (\n      <Bullseye style={{ height: 'auto' }} className=\"pf-u-mt-lg\">\n        <EmptyState variant=\"large\">\n          <EmptyStateIcon icon={PlusCircleIcon} />\n          <Title headingLevel=\"h3\" size=\"lg\">\n            {isInternal ? 'No access requests' : 'You have no access requests'}\n          </Title>\n          <EmptyStateBody>\n            {isInternal\n              ? 'Click the button below to create an access request.'\n              : 'You have no pending Red Hat access requests.'}\n          </EmptyStateBody>\n          {createButton}\n        </EmptyState>\n        {modals}\n      </Bullseye>\n    );\n  }\n\n  const selectLabelId = 'filter-status';\n  const selectPlaceholder = `Filter by ${uncapitalize(\n    columns[columns.length - 1]\n  )}`;\n  const FilterTextForm = ({ colName, value, setValue }) => {\n    const [inputValue, setInputValue] = React.useState(value);\n    return (\n      <form\n        style={{ display: 'flex' }}\n        onSubmit={(ev) => {\n          ev.preventDefault();\n          setValue(inputValue);\n        }}\n      >\n        <TextInput\n          name={`${colName}-filter`}\n          id={`${colName}-filter`}\n          type=\"search\"\n          placeholder={`Filter by ${uncapitalize(colName)}`}\n          aria-label={`${colName} search input`}\n          value={inputValue}\n          onChange={(val) => setInputValue(val)}\n        />\n        <Button\n          variant=\"control\"\n          type=\"submit\"\n          aria-label={`Search button for ${colName} filter`}\n        >\n          <SearchIcon />\n        </Button>\n      </form>\n    );\n  };\n\n  FilterTextForm.propTypes = {\n    colName: PropTypes.string,\n    value: PropTypes.string,\n    setValue: PropTypes.func,\n  };\n\n  const clearFiltersButton = (\n    <Button\n      variant=\"link\"\n      onClick={() => {\n        setStatusSelections([]);\n        setAccountFilter('');\n      }}\n    >\n      Clear filters\n    </Button>\n  );\n  const toolbar = (\n    <Toolbar id=\"access-requests-table-toolbar\">\n      <ToolbarContent>\n        <ToolbarItem>\n          <InputGroup>\n            <Dropdown\n              isOpen={isDropdownOpen}\n              onSelect={(ev) => {\n                setIsDropdownOpen(false);\n                setFilterColumn(ev.target.value);\n                setIsSelectOpen(false);\n              }}\n              toggle={\n                <DropdownToggle\n                  onToggle={(isOpen) => setIsDropdownOpen(isOpen)}\n                >\n                  <FilterIcon /> {filterColumn}\n                </DropdownToggle>\n              }\n              // https://marvelapp.com/prototype/257je526/screen/74764732\n              dropdownItems={(isInternal ? [1, 5] : [6])\n                .map((i) => columns[i])\n                .map((colName) => (\n                  // Filterable columns are RequestID, AccountID, and Status\n                  <DropdownItem\n                    key={colName}\n                    value={colName}\n                    component=\"button\"\n                  >\n                    {capitalize(colName)}\n                  </DropdownItem>\n                ))}\n            />\n            {['Status', 'Decision'].includes(filterColumn) && (\n              <React.Fragment>\n                <span id={selectLabelId} hidden>\n                  {selectPlaceholder}\n                </span>\n                <Select\n                  aria-labelledby={selectLabelId}\n                  variant=\"checkbox\"\n                  aria-label=\"Select statuses\"\n                  onToggle={(isOpen) => setIsSelectOpen(isOpen)}\n                  onSelect={(_ev, selection) => {\n                    if (statusSelections.includes(selection)) {\n                      setStatusSelections(\n                        statusSelections.filter((s) => s !== selection)\n                      );\n                    } else {\n                      setStatusSelections([...statusSelections, selection]);\n                    }\n                  }}\n                  isOpen={isSelectOpen}\n                  selections={Array.from(statusSelections)}\n                  isCheckboxSelectionBadgeHidden\n                  placeholderText={selectPlaceholder}\n                >\n                  {statuses.map((status) => (\n                    <SelectOption key={status} value={status}>\n                      {capitalize(status)}\n                    </SelectOption>\n                  ))}\n                </Select>\n              </React.Fragment>\n            )}\n            {filterColumn === 'Account number' && (\n              <FilterTextForm\n                colName={filterColumn}\n                value={accountFilter}\n                setValue={setAccountFilter}\n              />\n            )}\n          </InputGroup>\n        </ToolbarItem>\n        <ToolbarItem>{createButton}</ToolbarItem>\n        <ToolbarItem variant=\"pagination\" align={{ default: 'alignRight' }}>\n          <AccessRequestsPagination id=\"top\" />\n        </ToolbarItem>\n      </ToolbarContent>\n      <ToolbarContent>\n        <ChipGroup categoryName=\"Status\">\n          {statusSelections.map((status) => (\n            <Chip\n              key={status}\n              onClick={() =>\n                setStatusSelections(\n                  statusSelections.filter((s) => s !== status)\n                )\n              }\n            >\n              {status}\n            </Chip>\n          ))}\n        </ChipGroup>\n        {accountFilter && (\n          <ChipGroup categoryName=\"Account number\">\n            <Chip onClick={() => setAccountFilter('')}>{accountFilter}</Chip>\n          </ChipGroup>\n        )}\n        {hasFilters && clearFiltersButton}\n      </ToolbarContent>\n    </Toolbar>\n  );\n  function getColumnWidth(columnIndex) {\n    if (isInternal) {\n      return columnIndex === 0 ? 30 : 15;\n    }\n\n    return [0, 6].includes(columnIndex) ? 20 : 10;\n  }\n  const { url } = useRouteMatch();\n  const table = (\n    <TableComposable aria-label=\"Access requests table\" variant=\"compact\">\n      <Thead>\n        <Tr>\n          {columns.map((column, columnIndex) => (\n            <Th\n              key={columnIndex}\n              {...(!column.includes('name') && {\n                sort: {\n                  sortBy: {\n                    index: activeSortIndex,\n                    direction: activeSortDirection,\n                  },\n                  onSort,\n                  columnIndex,\n                },\n              })}\n              width={getColumnWidth(columnIndex)}\n            >\n              {column}\n            </Th>\n          ))}\n          {isInternal && <Th />}\n        </Tr>\n      </Thead>\n      <Tbody>\n        {isLoading\n          ? [...Array(rows.length || perPage).keys()].map((i) => (\n              <Tr key={i}>\n                {columns.map((name, j) => (\n                  <Td key={j} dataLabel={name}>\n                    <div\n                      style={{ height: '30px' }}\n                      className=\"ins-c-skeleton ins-c-skeleton__md\"\n                    >\n                      {' '}\n                    </div>\n                  </Td>\n                ))}\n              </Tr>\n            ))\n          : rows.map((row, rowIndex) => (\n              <Tr key={rowIndex}>\n                <Td dataLabel={columns[0]}>\n                  <Link to={`${url}${url.endsWith('/') ? '' : '/'}${row[0]}`}>\n                    {row[0]}\n                  </Link>\n                </Td>\n                <Td dataLabel={columns[1]}>{row[1]}</Td>\n                <Td dataLabel={columns[2]}>{row[2]}</Td>\n                <Td dataLabel={columns[3]}>{row[3]}</Td>\n                <Td dataLabel={columns[4]}>{row[4]}</Td>\n                {isInternal ? (\n                  <Td dataLabel={columns[5]}>\n                    <StatusLabel\n                      requestId={row[0]}\n                      status={row[5]}\n                      onLabelClick={() =>\n                        setStatusSelections([\n                          ...statusSelections.filter((s) => s !== status),\n                          status,\n                        ])\n                      }\n                      hideActions\n                    />\n                  </Td>\n                ) : (\n                  <Td dataLabel={columns[5]}>{row[5]}</Td>\n                )}\n                {isInternal ? (\n                  // Different actions based on status\n                  <Td\n                    actions={getInternalActions(row[5], row[0], setOpenModal)}\n                  />\n                ) : (\n                  <Td dataLabel={columns[6]}>\n                    <StatusLabel requestId={row[0]} status={row[6]} />\n                  </Td>\n                )}\n              </Tr>\n            ))}\n        {rows.length === 0 && hasFilters && (\n          <Tr>\n            <Td colSpan={columns.length}>\n              <EmptyState variant=\"small\">\n                <EmptyStateIcon icon={SearchIcon} />\n                <Title headingLevel=\"h2\" size=\"lg\">\n                  No matching requests found\n                </Title>\n                <EmptyStateBody>\n                  No results match the filter criteria. Remove all filters or\n                  clear all filters to show results.\n                </EmptyStateBody>\n                {clearFiltersButton}\n              </EmptyState>\n            </Td>\n          </Tr>\n        )}\n      </Tbody>\n    </TableComposable>\n  );\n\n  return (\n    <React.Fragment>\n      {toolbar}\n      {table}\n      <AccessRequestsPagination id=\"bottom\" />\n      {modals}\n    </React.Fragment>\n  );\n};\n\nAccessRequestsTable.propTypes = {\n  isInternal: PropTypes.bool,\n};\n\nexport default AccessRequestsTable;\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { PageSection, Title } from '@patternfly/react-core';\nimport AccessRequestsTable from '../Components/AccessRequestsTable';\nimport PropTypes from 'prop-types';\n\nconst AccessRequestsPage = ({ getRegistry, isInternal }) => {\n  return (\n    <Provider store={getRegistry().getStore()}>\n      <PageSection variant=\"light\">\n        <Title headingLevel=\"h1\" className=\"pf-u-pb-sm\">\n          Access Requests\n        </Title>\n        <p>\n          Below is a list of all submitted requests for read only account\n          access.\n        </p>\n      </PageSection>\n      <PageSection padding={{ default: 'noPadding' }}>\n        <AccessRequestsTable isInternal={isInternal} />\n      </PageSection>\n    </Provider>\n  );\n};\n\n// This component is a federated module used in https://github.com/RedHatInsights/insights-rbac-ui\n// Try not to break RBAC.\nAccessRequestsPage.propTypes = {\n  getRegistry: PropTypes.func,\n  isInternal: PropTypes.bool,\n};\n\nexport default withRouter(AccessRequestsPage);\n"],"sourceRoot":""}