{"version":3,"file":"js/953.643d7e1f7beb243d6baf.js","mappings":"2VA8BMA,EAA+B,SAAC,GAAmB,IAAjBC,EAAiB,EAAjBA,WACtC,EAA8BC,IAAAA,WAA9B,eAAOC,EAAP,KAAgBC,EAAhB,KACQC,GAAcC,EAAAA,EAAAA,aAAdD,UACFE,GAAWC,EAAAA,EAAAA,MACjBN,IAAAA,WAAgB,WACdO,EAAAA,EACGC,IADH,UAEOC,eAFP,mCAE0CN,EAF1C,YAGMJ,EAAa,oBAAsB,wBAErC,CAAEW,QAAS,CAAEC,OAAQ,sBAEtBC,MAAK,SAACC,GACL,GAAIA,EAAIC,OACN,MAAMC,MAAMF,EAAIC,OAAOE,KAAI,SAACC,GAAD,OAAOA,EAAEC,MAAT,IAAiBC,KAAK,OAEnDjB,EAAWW,EACZ,IAZH,OAaS,SAACO,GACNf,GACEgB,EAAAA,EAAAA,IAAgB,CACdC,QAAS,SACTC,MAAO,gCACPC,YAAaJ,EAAIK,UAGtB,GACJ,GAAE,IAGH,MAAkCzB,IAAAA,SAAe,CAAE0B,KAAM,OAAzD,eAAOC,EAAP,KAAkBC,EAAlB,KACMC,EAAe,kBAAMD,EAAa,CAAEF,KAAM,MAA3B,EACfI,GAAUC,EAAAA,EAAAA,GACd9B,GAAWA,EAAQ+B,OACnB7B,EACAyB,GAEF,EAA4C5B,IAAAA,UAAe,GAA3D,eAAOiC,EAAP,KAAuBC,EAAvB,KAEMC,EAAsB,GAAH,eACnBpC,EACA,CAAC,aAAc,iBAAkB,cACjC,CAAC,aAAc,cAHI,CAIvB,aACA,WACA,YAEF,OACE,kBAAC,aAAD,KACE,kBAAC,EAAAqC,YAAD,CAAad,QAAQ,SACnB,kBAAC,EAAAe,WAAD,KACE,kBAAC,EAAAC,eAAD,CACEC,OAAQ,kBACN,kBAAC,EAAAC,KAAD,CAAMC,GAAG,OAAO1C,GAAc,WAA9B,kBADM,IAIV,kBAAC,EAAAuC,eAAD,KAAiBnC,IAEnB,kBAAC,EAAAuC,KAAD,CAAMC,UAAW,CAAEC,QAAS,SAAUC,GAAI,QACxC,kBAAC,EAAAC,SAAD,CAAUC,KAAM,CAAEH,QAAS,SACzB,kBAAC,EAAAI,MAAD,CAAOC,aAAa,KAAKC,KAAK,MAAMC,UAAU,cAC3ChD,IAGJJ,GAAc+B,EAAQsB,MAAMC,OAAS,GACpC,kBAAC,EAAAP,SAAD,CAAUQ,UAAW,CAAEV,QAAS,eAC9B,kBAAC,EAAAW,SAAD,CACEC,SAAS,QACTC,OACE,kBAAC,EAAAC,YAAD,CACEC,SAAU,kBAAMzB,GAAmBD,EAAzB,EACV2B,GAAG,mBAGPC,OAAQ5B,EACR6B,SAAO,EACPC,cAAejC,EAAQsB,MAAMpC,KAAI,gBAAGO,EAAH,EAAGA,MAAOyC,EAAV,EAAUA,QAAV,OAC/B,kBAAC,EAAAC,aAAD,CACEC,IAAK3C,EACL4C,UAAU,SACVH,QAASA,GAERzC,EAN4B,IASjC6C,WAAYtC,EAAQuC,aAM9B,kBAAC,EAAAjC,YAAD,KACE,kBAAC,EAAAM,KAAD,CACE4B,WAAY,CAAEC,GAAI,gBAClB5B,UAAW,CAAEC,QAAS,SAAU4B,GAAI,QAEpC,kBAAC,EAAA1B,SAAD,CACE2B,KAAM,CAAE7B,QAAS,UACjBU,UAAW,CAAEV,QAAS,qBAEtB,kBAAC,EAAA8B,KAAD,CAAMC,OAAO,kBAAkBC,MAAO,CAAEC,OAAQ,SAC9C,kBAAC,EAAAC,UAAD,KACE,kBAAC,EAAA9B,MAAD,CAAOC,aAAa,KAAKC,KAAK,MAA9B,oBAIF,kBAAC,EAAA6B,SAAD,KACI9E,EAGA,kBAAC,aAAD,KACE,yBAAKkD,UAAU,cACZpD,EACC,6BACE,+BACE,8CAEF,6BACA,kBAAC,EAAAiF,OAAD,QACE7B,UAAU,eACN8B,EAAAA,EAAAA,GAAchF,EAAQ+B,UAEzBkD,EAAAA,EAAAA,IAAWjF,EAAQ+B,UAIxB,kBAAC,aAAD,KACE,+BACE,gDAEF,6BACA,kBAAC,IAAD,CACE7B,UAAWA,EACX6B,OAAQ/B,EAAQ+B,WAKvBG,EAAoBnB,KAAI,SAACmE,EAAMjB,GAAP,OACvB,yBAAKf,UAAU,aAAae,IAAKA,GAC/B,+BACE,4BACGgB,EAAAA,EAAAA,IACCC,EAAKC,QAAQ,KAAM,KAAKA,QAAQ,KAAM,SAI5C,6BACA,6BAAMnF,EAAQkF,IAVO,KA9B3B,kBAAC,EAAAE,QAAD,CAASnC,KAAK,UAgDtB,kBAAC,EAAAJ,SAAD,CACE2B,KAAM,CAAE7B,QAAS,UACjBG,KAAM,CAAEH,QAAS,QACjBU,UAAW,CAAEV,QAAS,qBAEtB,kBAAC,EAAA8B,KAAD,CAAMC,OAAO,gBAAgBC,MAAO,CAAEC,OAAQ,SAC5C,kBAAC,EAAAC,UAAD,KACE,kBAAC,EAAA9B,MAAD,CAAOC,aAAa,KAAKC,KAAK,MAA9B,oBAIF,kBAAC,EAAA6B,SAAD,KACI9E,EAGA,kBAAC,IAAD,CAAeqF,MAAOrF,EAAQqF,QAF9B,kBAAC,EAAAD,QAAD,CAASnC,KAAK,YASN,WAAnBvB,EAAUD,MACT,kBAAC,IAAD,CAAoBvB,UAAWA,EAAWoF,QAAS1D,IAEjC,SAAnBF,EAAUD,MACT,kBAAC,IAAD,CACEJ,QAAQ,OACRnB,UAAWA,EACXoF,QAAS1D,IAKlB,EAIK2D,EAA2B,SAACC,GAChC,IAAQC,GAAgBC,EAAAA,EAAAA,YAAWC,EAAAA,GAA3BF,YACR,OACE,kBAAC,KAAD,CAAUG,MAAOH,IAAcI,YAC7B,kBAAChG,EAAD,CAA8BC,WAAY0F,aAAF,EAAEA,EAAO1F,aAGtD,EAEDyF,EAAyBO,UAAY,CACnCL,YAAaM,IAAAA,KACbjG,WAAYiG,IAAAA,MAGdlG,EAA6BiG,UAAY,CACvChG,WAAYiG,IAAAA,MAGd,S","sources":["webpack:///./src/Routes/AccessRequestDetailsPage.js"],"sourcesContent":["import React, { useContext } from 'react';\nimport {\n  Breadcrumb,\n  BreadcrumbItem,\n  PageSection,\n  Title,\n  Card,\n  CardTitle,\n  CardBody,\n  Flex,\n  FlexItem,\n  Spinner,\n  Label,\n  Dropdown,\n  DropdownItem,\n  KebabToggle,\n} from '@patternfly/react-core';\nimport { capitalize } from '@patternfly/react-core/dist/esm/helpers/util';\nimport { Link, useParams } from 'react-router-dom';\nimport { useDispatch, Provider } from 'react-redux';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport MUARolesTable from '../Components/mua-roles-table/MUARolesTable';\nimport { RegistryContext } from '../store';\nimport CancelRequestModal from '../Components/CancelRequestModal';\nimport AccessRequestWizard from '../Components/access-requests-wizard/AccessRequestsWizard';\nimport { getLabelProps } from '../Helpers/getLabelProps';\nimport { getInternalActions, StatusLabel } from '../Helpers/getActions';\nimport PropTypes from 'prop-types';\nimport apiInstance from '../Helpers/apiInstance';\n\nconst BaseAccessRequestDetailsPage = ({ isInternal }) => {\n  const [request, setRequest] = React.useState();\n  const { requestId } = useParams();\n  const dispatch = useDispatch();\n  React.useEffect(() => {\n    apiInstance\n      .get(\n        `${API_BASE}/cross-account-requests/${requestId}/${\n          isInternal ? '?query_by=user_id' : '?query_by=target_org'\n        }`,\n        { headers: { Accept: 'application/json' } }\n      )\n      .then((res) => {\n        if (res.errors) {\n          throw Error(res.errors.map((e) => e.detail).join('\\n'));\n        }\n        setRequest(res);\n      })\n      .catch((err) => {\n        dispatch(\n          addNotification({\n            variant: 'danger',\n            title: 'Could not load access request',\n            description: err.message,\n          })\n        );\n      });\n  }, []);\n\n  // Modal actions\n  const [openModal, setOpenModal] = React.useState({ type: null });\n  const onModalClose = () => setOpenModal({ type: null });\n  const actions = getInternalActions(\n    request && request.status,\n    requestId,\n    setOpenModal\n  );\n  const [isDropdownOpen, setIsDropdownOpen] = React.useState(false);\n\n  const requestDisplayProps = [\n    ...(isInternal\n      ? ['request_id', 'target_account', 'target_org']\n      : ['first_name', 'last_name']),\n    'start_date',\n    'end_date',\n    'created',\n  ];\n  return (\n    <React.Fragment>\n      <PageSection variant=\"light\">\n        <Breadcrumb>\n          <BreadcrumbItem\n            render={() => (\n              <Link to=\"..\">{!isInternal && 'Red Hat '}Access Requests</Link>\n            )}\n          />\n          <BreadcrumbItem>{requestId}</BreadcrumbItem>\n        </Breadcrumb>\n        <Flex direction={{ default: 'column', md: 'row' }}>\n          <FlexItem grow={{ default: 'grow' }}>\n            <Title headingLevel=\"h1\" size=\"2xl\" className=\"pf-u-pt-md\">\n              {requestId}\n            </Title>\n          </FlexItem>\n          {isInternal && actions.items.length > 0 && (\n            <FlexItem alignSelf={{ default: 'alignRight' }}>\n              <Dropdown\n                position=\"right\"\n                toggle={\n                  <KebabToggle\n                    onToggle={() => setIsDropdownOpen(!isDropdownOpen)}\n                    id=\"actions-toggle\"\n                  />\n                }\n                isOpen={isDropdownOpen}\n                isPlain\n                dropdownItems={actions.items.map(({ title, onClick }) => (\n                  <DropdownItem\n                    key={title}\n                    component=\"button\"\n                    onClick={onClick}\n                  >\n                    {title}\n                  </DropdownItem>\n                ))}\n                isDisabled={actions.disable}\n              />\n            </FlexItem>\n          )}\n        </Flex>\n      </PageSection>\n      <PageSection>\n        <Flex\n          spaceItems={{ xl: 'spaceItemsLg' }}\n          direction={{ default: 'column', lg: 'row' }}\n        >\n          <FlexItem\n            flex={{ default: 'flex_1' }}\n            alignSelf={{ default: 'alignSelfStretch' }}\n          >\n            <Card ouiaId=\"request-details\" style={{ height: '100%' }}>\n              <CardTitle>\n                <Title headingLevel=\"h2\" size=\"xl\">\n                  Request details\n                </Title>\n              </CardTitle>\n              <CardBody>\n                {!request ? (\n                  <Spinner size=\"xl\" />\n                ) : (\n                  <React.Fragment>\n                    <div className=\"pf-u-pb-md\">\n                      {isInternal ? (\n                        <div>\n                          <label>\n                            <b>Request status</b>\n                          </label>\n                          <br />\n                          <Label\n                            className=\"pf-u-mt-sm\"\n                            {...getLabelProps(request.status)}\n                          >\n                            {capitalize(request.status)}\n                          </Label>\n                        </div>\n                      ) : (\n                        <React.Fragment>\n                          <label>\n                            <b>Request decision</b>\n                          </label>\n                          <br />\n                          <StatusLabel\n                            requestId={requestId}\n                            status={request.status}\n                          />\n                        </React.Fragment>\n                      )}\n                    </div>\n                    {requestDisplayProps.map((prop, key) => (\n                      <div className=\"pf-u-pb-md\" key={key}>\n                        <label>\n                          <b>\n                            {capitalize(\n                              prop.replace(/_/g, ' ').replace('id', 'ID')\n                            )}\n                          </b>\n                        </label>\n                        <br />\n                        <div>{request[prop]}</div>\n                      </div>\n                    ))}\n                  </React.Fragment>\n                )}\n              </CardBody>\n            </Card>\n          </FlexItem>\n          <FlexItem\n            flex={{ default: 'flex_3' }}\n            grow={{ default: 'grow' }}\n            alignSelf={{ default: 'alignSelfStretch' }}\n          >\n            <Card ouiaId=\"request-roles\" style={{ height: '100%' }}>\n              <CardTitle>\n                <Title headingLevel=\"h2\" size=\"xl\">\n                  Roles requested\n                </Title>\n              </CardTitle>\n              <CardBody>\n                {!request ? (\n                  <Spinner size=\"xl\" />\n                ) : (\n                  <MUARolesTable roles={request.roles} />\n                )}\n              </CardBody>\n            </Card>\n          </FlexItem>\n        </Flex>\n      </PageSection>\n      {openModal.type === 'cancel' && (\n        <CancelRequestModal requestId={requestId} onClose={onModalClose} />\n      )}\n      {openModal.type === 'edit' && (\n        <AccessRequestWizard\n          variant=\"edit\"\n          requestId={requestId}\n          onClose={onModalClose}\n        />\n      )}\n    </React.Fragment>\n  );\n};\n\n// This component is a federated module used in https://github.com/RedHatInsights/insights-rbac-ui\n// Try not to break RBAC.\nconst AccessRequestDetailsPage = (props) => {\n  const { getRegistry } = useContext(RegistryContext);\n  return (\n    <Provider store={getRegistry().getStore()}>\n      <BaseAccessRequestDetailsPage isInternal={props?.isInternal} />\n    </Provider>\n  );\n};\n\nAccessRequestDetailsPage.propTypes = {\n  getRegistry: PropTypes.func,\n  isInternal: PropTypes.bool,\n};\n\nBaseAccessRequestDetailsPage.propTypes = {\n  isInternal: PropTypes.bool,\n};\n\nexport default AccessRequestDetailsPage;\n"],"names":["BaseAccessRequestDetailsPage","isInternal","React","request","setRequest","requestId","useParams","dispatch","useDispatch","apiInstance","get","API_BASE","headers","Accept","then","res","errors","Error","map","e","detail","join","err","addNotification","variant","title","description","message","type","openModal","setOpenModal","onModalClose","actions","getInternalActions","status","isDropdownOpen","setIsDropdownOpen","requestDisplayProps","PageSection","Breadcrumb","BreadcrumbItem","render","Link","to","Flex","direction","default","md","FlexItem","grow","Title","headingLevel","size","className","items","length","alignSelf","Dropdown","position","toggle","KebabToggle","onToggle","id","isOpen","isPlain","dropdownItems","onClick","DropdownItem","key","component","isDisabled","disable","spaceItems","xl","lg","flex","Card","ouiaId","style","height","CardTitle","CardBody","Label","getLabelProps","capitalize","prop","replace","Spinner","roles","onClose","AccessRequestDetailsPage","props","getRegistry","useContext","RegistryContext","store","getStore","propTypes","PropTypes"],"sourceRoot":""}