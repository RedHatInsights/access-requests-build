{"version":3,"file":"js/116.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./src/Components/CancelRequestModal.js","webpack:///./src/Components/common/InputHelpPopover.js","webpack:///./src/Components/access-requests-wizard/schema.js","webpack:///./src/Components/access-requests-wizard/SelectRoles.js","webpack:///./src/Components/access-requests-wizard/ReviewDetails.js","webpack:///./src/Components/access-requests-wizard/AccessRequestsWizard.js","webpack:///./src/Components/access-requests-wizard/SetName.js","webpack:///./src/Components/access-requests-wizard/AccessDuration.js","webpack:///./src/Components/mua-roles-table/RoleToolbar.js","webpack:///./src/Components/mua-roles-table/MUANoResults.js","webpack:///./src/Components/mua-roles-table/MUARolesTable.js","webpack:///./src/Helpers/apiInstance.js","webpack:///./src/Helpers/getActions.js","webpack:///./src/Helpers/getLabelProps.js"],"sourcesContent":["import React from 'react';\nimport { Modal, Button, Spinner } from '@patternfly/react-core';\nimport { useDispatch } from 'react-redux';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport PropTypes from 'prop-types';\nimport apiInstance from '../Helpers/apiInstance';\n\nconst CancelRequestModal = ({ requestId, onClose }) => {\n  const [isLoading, setIsLoading] = React.useState(false);\n  const dispatch = useDispatch();\n  const onCancel = () => {\n    setIsLoading(true);\n    // https://ci.cloud.redhat.com/docs/api-docs/rbac#operations-CrossAccountRequest-patchCrossAccountRequest\n    apiInstance\n      .patch(\n        `${API_BASE}/cross-account-requests/${requestId}/`,\n        { status: 'cancelled' },\n        {\n          headers: {\n            'Content-Type': 'application/json',\n            Accept: 'application/json',\n          },\n        }\n      )\n      .then((res) => {\n        if (res.errors && res.errors.length > 0) {\n          throw Error(res.errors.map((e) => e.detail).join('\\n'));\n        }\n        dispatch(\n          addNotification({\n            variant: 'success',\n            title: 'Request cancelled successfully',\n          })\n        );\n        setIsLoading(false);\n        onClose(true);\n      })\n      .catch((err) => {\n        dispatch(\n          addNotification({\n            variant: 'danger',\n            title: 'There was an error cancelling your request',\n            description: err.message,\n          })\n        );\n        setIsLoading(false);\n        onClose(true);\n      });\n  };\n  return (\n    <Modal\n      title=\"Cancel request?\"\n      isOpen\n      variant=\"small\"\n      onClose={() => onClose(false)}\n      actions={[\n        <Button key=\"confirm\" variant=\"danger\" onClick={onCancel}>\n          Yes, cancel\n        </Button>,\n        <Button key=\"cancel\" variant=\"link\" onClick={() => onClose(false)}>\n          No, keep\n        </Button>,\n      ]}\n    >\n      Request <b>{requestId}</b> will be withdrawn.\n      {isLoading && <Spinner size=\"lg\" />}\n    </Modal>\n  );\n};\n\nCancelRequestModal.propTypes = {\n  requestId: PropTypes.string,\n  onClose: PropTypes.func,\n};\n\nexport default CancelRequestModal;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport HelpIcon from '@patternfly/react-icons/dist/esm/icons/help-icon';\nimport { Popover } from '@patternfly/react-core';\n\nconst InputHelpPopover = ({\n  headerContent = null,\n  bodyContent = null,\n  field = 'input',\n}) => (\n  <Popover headerContent={headerContent} bodyContent={bodyContent}>\n    <button\n      type=\"button\"\n      aria-label={`More info for ${field}`}\n      onClick={(e) => e.preventDefault()}\n      aria-describedby=\"form-name\"\n      className=\"pf-v5-c-form__group-label-help\"\n    >\n      <HelpIcon noVerticalAlign />\n    </button>\n  </Popover>\n);\n\nInputHelpPopover.propTypes = {\n  headerContent: PropTypes.element,\n  bodyContent: PropTypes.element,\n  field: PropTypes.string,\n};\n\nexport default InputHelpPopover;\n","import React from 'react';\nimport { capitalize } from '@patternfly/react-core';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport InputHelpPopover from '../common/InputHelpPopover';\n\nexport const ACCOUNT_NUMBER = 'account-number';\nexport const ORG_ID = 'org-id';\nexport const ACCESS_FROM = 'start';\nexport const ACCESS_TO = 'end';\nexport const SELECTED_ROLES = 'selected-roles';\n\nexport default (isEdit, variant) => ({\n  fields: [\n    {\n      component: 'wizard',\n      name: 'wizard',\n      isDynamic: true,\n      inModal: true,\n      showTitles: true,\n      className: 'accessRequests',\n      title: `${capitalize(variant)} request`,\n      fields: [\n        {\n          name: 'details',\n          nextStep: 'select-roles',\n          title: 'Request details',\n          fields: [\n            {\n              component: 'set-name',\n              name: 'name',\n              validate: [\n                {\n                  type: validatorTypes.REQUIRED,\n                },\n              ],\n            },\n            {\n              component: componentTypes.TEXT_FIELD,\n              isRequired: true,\n              label: 'Account number',\n              isDisabled: isEdit,\n              placeholder: 'Example, 8675309',\n              FormGroupProps: {\n                labelIcon: (\n                  <InputHelpPopover\n                    bodyContent={\n                      <p>\n                        This is the account number that you would like to\n                        receive read access to\n                      </p>\n                    }\n                    field=\"account number\"\n                  />\n                ),\n              },\n              helperText: 'Enter the account number you would like access to',\n              name: ACCOUNT_NUMBER,\n              validate: [{ type: 'validate-account' }],\n            },\n            {\n              component: componentTypes.TEXT_FIELD,\n              isRequired: true,\n              label: 'Organization ID',\n              placeholder: 'Example, 1234567',\n              isDisabled: isEdit,\n              FormGroupProps: {\n                labelIcon: (\n                  <InputHelpPopover\n                    bodyContent={\n                      <p>\n                        This is the org ID of the account that you would like to\n                        receive read access to\n                      </p>\n                    }\n                    field=\"organization ID\"\n                  />\n                ),\n              },\n              helperText: 'Enter the organization ID you would like access to',\n              name: ORG_ID,\n              validate: [{ type: 'validate-org-id' }],\n            },\n            {\n              name: 'access-duration',\n              component: 'access-duration',\n              label: 'Access duration',\n              isRequired: true,\n            },\n            {\n              name: ACCESS_FROM,\n              component: componentTypes.TEXT_FIELD,\n              hideField: true,\n              isRequired: true,\n              validate: [\n                (value) =>\n                  value?.length > 0 ? undefined : 'Invalid start date',\n              ],\n            },\n            {\n              name: ACCESS_TO,\n              component: componentTypes.TEXT_FIELD,\n              hideField: true,\n              isRequired: true,\n              validate: [\n                (value) => (value?.length > 0 ? undefined : 'Invalid end date'),\n              ],\n            },\n          ],\n        },\n        {\n          name: 'select-roles',\n          nextStep: 'review-details',\n          title: 'Select roles',\n          StepTemplate: (props) => props.formFields,\n          fields: [\n            {\n              component: 'select-roles',\n              name: SELECTED_ROLES,\n              validate: [\n                (value) =>\n                  value?.length > 0 ? undefined : 'No roles selected',\n              ],\n            },\n          ],\n        },\n        {\n          name: 'review-details',\n          title: 'Review details',\n          fields: [\n            {\n              component: 'review-details',\n              name: 'review-details',\n            },\n          ],\n        },\n      ],\n    },\n  ],\n});\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport { FormGroup } from '@patternfly/react-core';\nimport MUARolesTable from '../mua-roles-table/MUARolesTable';\nimport { SELECTED_ROLES } from './schema';\n\nconst SelectRoles = (props) => {\n  const { input } = useFieldApi(props);\n  const formOptions = useFormApi();\n  const values = formOptions.getState().values;\n  const [selectedRoles, setSelectedRoles] = useState(\n    values[SELECTED_ROLES] || []\n  );\n\n  useEffect(() => {\n    input.onChange(selectedRoles);\n  }, [selectedRoles]);\n\n  return (\n    <FormGroup fieldId=\"select-role\">\n      <MUARolesTable roles={selectedRoles} setRoles={setSelectedRoles} />\n    </FormGroup>\n  );\n};\n\nSelectRoles.propTypes = {\n  selectedRoles: PropTypes.array,\n  setSelectedRoles: PropTypes.func,\n  title: PropTypes.string,\n  description: PropTypes.string,\n};\n\nexport default SelectRoles;\n","import React from 'react';\nimport {\n  Grid,\n  GridItem,\n  Stack,\n  StackItem,\n  Text,\n  TextVariants,\n} from '@patternfly/react-core';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport PropTypes from 'prop-types';\nimport {\n  ACCESS_FROM,\n  ACCESS_TO,\n  ACCOUNT_NUMBER,\n  SELECTED_ROLES,\n} from './schema';\nimport './review-details.scss';\n\nconst ReviewDetails = () => {\n  const formOptions = useFormApi();\n  const values = formOptions.getState().values;\n\n  return (\n    <React.Fragment>\n      <Stack className=\"accessRequests\">\n        <StackItem className=\"pf-v5-u-mb-md\">\n          <Grid>\n            <GridItem sm={12} md={2}>\n              <Text\n                component={TextVariants.h4}\n                className=\"access-requests-bold-text\"\n              >\n                Account number\n              </Text>\n            </GridItem>\n            <GridItem sm={12} md={10}>\n              <Text component={TextVariants.p}>{values[ACCOUNT_NUMBER]}</Text>\n            </GridItem>\n          </Grid>\n        </StackItem>\n        <StackItem>\n          <Grid>\n            <GridItem sm={12} md={2}>\n              <Text\n                component={TextVariants.h4}\n                className=\"access-requests-bold-text\"\n              >\n                Access duration\n              </Text>\n            </GridItem>\n          </Grid>\n        </StackItem>\n        <StackItem>\n          <Grid>\n            <GridItem sm={12} md={2}>\n              <Text component={TextVariants.h4}>From</Text>\n            </GridItem>\n            <GridItem sm={12} md={10}>\n              <Text component={TextVariants.p}>{values[ACCESS_FROM]}</Text>\n            </GridItem>\n          </Grid>\n        </StackItem>\n        <StackItem className=\"pf-v5-u-mb-md\">\n          <Grid>\n            <GridItem sm={12} md={2}>\n              <Text component={TextVariants.h4}>To</Text>\n            </GridItem>\n            <GridItem sm={12} md={10}>\n              <Text component={TextVariants.p}>{values[ACCESS_TO]}</Text>\n            </GridItem>\n          </Grid>\n        </StackItem>\n        <StackItem>\n          <Grid>\n            <GridItem sm={12} md={2}>\n              <Text\n                component={TextVariants.h4}\n                className=\"access-requests-bold-text\"\n              >\n                Roles\n              </Text>\n            </GridItem>\n            <GridItem sm={12} md={10}>\n              <Text component={TextVariants.p}>\n                {values[SELECTED_ROLES]?.[0]}\n              </Text>\n            </GridItem>\n          </Grid>\n        </StackItem>\n        {values[SELECTED_ROLES]?.slice(1).map((role) => (\n          <StackItem key={role}>\n            <Grid>\n              <GridItem sm={12} md={2}>\n                <Text component={TextVariants.h4}></Text>\n              </GridItem>\n              <GridItem sm={12} md={10}>\n                <Text component={TextVariants.p}>{role}</Text>\n              </GridItem>\n            </Grid>\n          </StackItem>\n        ))}\n      </Stack>\n    </React.Fragment>\n  );\n};\n\nReviewDetails.propTypes = {\n  targetAccount: PropTypes.any,\n  start: PropTypes.any,\n  end: PropTypes.any,\n  roles: PropTypes.any,\n  isLoading: PropTypes.any,\n  error: PropTypes.any,\n  onClose: PropTypes.any,\n};\n\nexport default ReviewDetails;\n","import React, { useRef, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport {\n  Bullseye,\n  Button,\n  capitalize,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  Modal,\n  ModalVariant,\n  Spinner,\n  Title,\n} from '@patternfly/react-core';\nimport { Wizard } from '@patternfly/react-core/deprecated';\nimport ExclamationCircleIcon from '@patternfly/react-icons/dist/js/icons/exclamation-circle-icon';\nimport FormRenderer from '@data-driven-forms/react-form-renderer/form-renderer';\nimport Pf4FormTemplate from '@data-driven-forms/pf4-component-mapper/form-template';\nimport componentMapper from '@data-driven-forms/pf4-component-mapper/component-mapper';\nimport SelectRoles from './SelectRoles';\nimport ReviewDetails from './ReviewDetails';\nimport AccessDuration from './AccessDuration';\nimport SetName from './SetName';\nimport apiInstance from '../../Helpers/apiInstance';\nimport schemaBuilder, {\n  ACCESS_FROM,\n  ACCESS_TO,\n  ACCOUNT_NUMBER,\n  ORG_ID,\n  SELECTED_ROLES,\n} from './schema';\n\nconst invalidAccountTitle = 'Invalid Account number';\n\nconst FormTemplate = (props) => (\n  <Pf4FormTemplate {...props} showFormControls={false} />\n);\n\nexport const mapperExtension = {\n  'set-name': SetName,\n  'access-duration': AccessDuration,\n  'select-roles': SelectRoles,\n  'review-details': ReviewDetails,\n};\n\nconst AccessRequestsWizard = ({ requestId, variant, onClose }) => {\n  const dispatch = useDispatch();\n  const isEdit = variant === 'edit';\n  const schema = useRef(schemaBuilder(isEdit, variant));\n  const [cancelWarningVisible, setCancelWarningVisible] = useState(false);\n  const [error, setError] = React.useState();\n  const [initialValues, setInitialValues] = React.useState();\n  const [isLoading, setIsLoading] = React.useState(false);\n  const [isSubmitting, setIsSubmitting] = React.useState(false);\n  const [user, setUser] = React.useState();\n\n  // We need to be logged in (and see the username) which is an async request.\n  // If we're editing we also need to fetch the roles\n  React.useEffect(() => {\n    setIsLoading(true);\n    const userPromise = insights.chrome.auth.getUser();\n    const detailsPromise = isEdit\n      ? apiInstance.get(\n          `${API_BASE}/cross-account-requests/${requestId}/?query_by=user_id`,\n          {\n            headers: { Accept: 'application/json' },\n          }\n        )\n      : new Promise((res) => res(true));\n    Promise.all([userPromise, detailsPromise])\n      .then(([user, details]) => {\n        if (user && user.identity && user.identity.user) {\n          setUser(user.identity.user);\n        } else {\n          throw Error(\"Couldn't get current user. Make sure you're logged in\");\n        }\n        if (isEdit) {\n          if (details.errors) {\n            throw Error(details.errors.map((e) => e.detail).join('\\n'));\n          }\n          if (details && details.target_account) {\n            setInitialValues({\n              [ACCOUNT_NUMBER]: details.target_account,\n              [ORG_ID]: details.target_org,\n              [ACCESS_FROM]: details.start_date,\n              [ACCESS_TO]: details.end_date,\n              [SELECTED_ROLES]: details.roles.map((role) => role.display_name),\n            });\n          } else {\n            throw Error(`Could not fetch details for request ${requestId}`);\n          }\n        }\n        setIsLoading(false);\n      })\n      .catch((err) => {\n        dispatch(\n          addNotification({\n            variant: 'danger',\n            title: 'Could not load access request',\n            description: err.message,\n          })\n        );\n      });\n  }, []);\n\n  const onSubmit = (values) => {\n    setIsSubmitting(true);\n    // https://cloud.redhat.com/docs/api-docs/rbac#operations-CrossAccountRequest-createCrossAccountRequests\n    const body = {\n      target_account: values[ACCOUNT_NUMBER],\n      start_date: values[ACCESS_FROM],\n      end_date: values[ACCESS_TO],\n      target_org: values[ORG_ID],\n      roles: values[SELECTED_ROLES],\n    };\n    setInitialValues(values);\n    apiInstance[isEdit ? 'put' : 'post'](\n      `${API_BASE}/cross-account-requests/${isEdit ? `/${requestId}/` : ''}`,\n      body,\n      {\n        headers: {\n          'Content-Type': 'application/json',\n          Accept: 'application/json',\n        },\n      }\n    )\n      .then((res) => {\n        if (res.errors && res.errors.length > 0) {\n          throw Error(res.errors[0].detail);\n        }\n        dispatch(\n          addNotification({\n            variant: 'success',\n            title: `${isEdit ? 'Edited' : 'Created'} access request`,\n            description: res.request_id,\n          })\n        );\n        onClose(true);\n      })\n      .catch(({ errors = [] }) => {\n        const isInvalidAccount = /Account .* does not exist/.test(\n          errors[0]?.message || errors[0]?.detail\n        );\n        setError({\n          title: isInvalidAccount\n            ? invalidAccountTitle\n            : `Could not ${variant} access request`,\n          description: isInvalidAccount\n            ? 'Please return to Step 1: Request details and input a new account number for your request.'\n            : errors[0]?.message || errors[0]?.detail,\n        });\n        setIsSubmitting(false);\n      });\n  };\n\n  const validatorMapper = {\n    'validate-account': () => (value) =>\n      value && !error ? undefined : 'Please enter a valid account number',\n    'validate-org-id': () => (value) =>\n      value && !error ? undefined : 'Please enter a valid organization ID',\n    'validate-duration': () => (value) => value?.length > 0,\n  };\n\n  if (cancelWarningVisible) {\n    return (\n      <Modal\n        title=\"Exit request creation?\"\n        variant=\"small\"\n        titleIconVariant=\"warning\"\n        isOpen\n        onClose={() => {\n          setCancelWarningVisible(false);\n          onClose(false);\n        }}\n        actions={[\n          <Button\n            key=\"confirm\"\n            variant=\"primary\"\n            onClick={() => onClose(false)}\n          >\n            Exit\n          </Button>,\n          <Button\n            key=\"cancel\"\n            variant=\"link\"\n            onClick={() => setCancelWarningVisible(false)}\n          >\n            Stay\n          </Button>,\n        ]}\n      >\n        All inputs will be discarded.\n      </Modal>\n    );\n  } else if (error || isLoading || isSubmitting) {\n    return (\n      <Modal\n        isOpen\n        variant={ModalVariant.large}\n        showClose={false}\n        className=\"accessRequests\"\n        hasNoBodyWrapper\n        aria-describedby=\"wiz-modal-description\"\n        aria-labelledby=\"wiz-modal-title\"\n      >\n        <Wizard\n          className=\"accessRequests\"\n          title={`${capitalize(variant)} request`}\n          steps={[\n            {\n              name: 'status',\n              component: isLoading ? (\n                <Bullseye>\n                  <Spinner />\n                </Bullseye>\n              ) : (\n                <EmptyState>\n                  {isSubmitting ? (\n                    <>\n                      <EmptyStateIcon icon={() => <Spinner size=\"lg\" />} />\n                      <Title headingLevel=\"h2\" size=\"lg\">\n                        Submitting access request\n                      </Title>\n                      <Button variant=\"link\" onClick={() => onClose(true)}>\n                        Close\n                      </Button>\n                    </>\n                  ) : (\n                    <>\n                      <EmptyStateIcon\n                        icon={ExclamationCircleIcon}\n                        color=\"#C9190B\"\n                      />\n                      <Title headingLevel=\"h2\" size=\"lg\">\n                        {error.title || 'An error occured'}\n                      </Title>\n                      <EmptyStateBody>{error.description}</EmptyStateBody>\n                      {error.title !== invalidAccountTitle && (\n                        <Button variant=\"primary\" onClick={() => setError()}>\n                          Return to Step 1\n                        </Button>\n                      )}\n                    </>\n                  )}\n                </EmptyState>\n              ),\n              isFinishedStep: true,\n            },\n          ]}\n          onClose={() => onClose(true)}\n        />\n      </Modal>\n    );\n  } else {\n    return (\n      <FormRenderer\n        schema={schema.current}\n        subscription={{ values: true }}\n        FormTemplate={FormTemplate}\n        componentMapper={{ ...componentMapper, ...mapperExtension }}\n        validatorMapper={validatorMapper}\n        onSubmit={onSubmit}\n        initialValues={{\n          ...initialValues,\n          'first-name': user?.first_name,\n          'last-name': user?.last_name,\n        }}\n        onCancel={() => setCancelWarningVisible(true)}\n      />\n    );\n  }\n};\n\nAccessRequestsWizard.propTypes = {\n  requestId: PropTypes.string,\n  variant: PropTypes.any,\n  onClose: PropTypes.func,\n};\n\nexport default AccessRequestsWizard;\n","import React from 'react';\nimport { FormGroup, Split, SplitItem, TextInput } from '@patternfly/react-core';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport InputHelpPopover from '../common/InputHelpPopover';\n\nconst SetName = () => {\n  const { getState } = useFormApi();\n  const popoverBody = (\n    <p>\n      Customers will be able to see this information as part of your request\n    </p>\n  );\n\n  return (\n    <Split hasGutter>\n      <SplitItem isFilled>\n        <FormGroup\n          label=\"First name\"\n          name=\"first-name\"\n          labelIcon={\n            <InputHelpPopover bodyContent={popoverBody} field=\"first name\" />\n          }\n        >\n          <TextInput\n            id=\"first-name\"\n            value={getState().values['first-name']}\n            isDisabled\n          />\n        </FormGroup>\n      </SplitItem>\n      <SplitItem isFilled>\n        <FormGroup\n          label=\"Last name\"\n          name=\"last-name\"\n          labelIcon={\n            <InputHelpPopover bodyContent={popoverBody} field=\"last name\" />\n          }\n        >\n          <TextInput\n            id=\"last-name\"\n            value={getState().values['last-name']}\n            isDisabled\n          />\n        </FormGroup>\n      </SplitItem>\n    </Split>\n  );\n};\n\nexport default SetName;\n","import React from 'react';\nimport {\n  DatePicker,\n  FormGroup,\n  HelperText,\n  HelperTextItem,\n  isValidDate,\n  Split,\n  SplitItem,\n  ValidatedOptions,\n} from '@patternfly/react-core';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport InputHelpPopover from '../common/InputHelpPopover';\nimport { ACCESS_FROM, ACCESS_TO } from './schema';\n\nconst AccessDuration = () => {\n  const formOptions = useFormApi();\n  const values = formOptions.getState().values;\n  const [startDate, setStartDate] = React.useState();\n  const [endError, setEndError] = React.useState();\n  const [startError, setStartError] = React.useState();\n\n  const today = new Date();\n  today.setDate(today.getDate() - 1);\n  const maxStartDate = new Date();\n  maxStartDate.setDate(maxStartDate.getDate() + 60);\n\n  const dateFormat = (date) =>\n    date.toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: '2-digit',\n      day: '2-digit',\n    });\n\n  const isCorrectFormat = (date) =>\n    /^([0]?[1-9]|[1][0-2])\\/([0]?[1-9]|[1|2][0-9]|[3][0|1])\\/([0-9]{4})$/.test(\n      date\n    );\n\n  const dateParse = (date) => {\n    const split = date.split('/');\n    if (!isCorrectFormat(date)) {\n      return undefined;\n    }\n    const month = split[0].padStart(2, '0');\n    const day = split[1].padStart(2, '0');\n    const year = split[2].padStart(4, '0');\n    return new Date(`${year}-${month}-${day}T00:00:00`);\n  };\n\n  const startValidator = (date) => {\n    if (isValidDate(date)) {\n      if (date < today) {\n        const message = 'Start date must be today or later';\n        setStartError(message);\n        return message;\n      }\n      if (date > maxStartDate) {\n        const message = 'Start date must be within 60 days of today';\n        setStartError(message);\n        return message;\n      }\n    }\n    setStartError();\n    return '';\n  };\n\n  const endValidator = (date) => {\n    setEndError();\n    if (isValidDate(startDate)) {\n      if (startDate > date) {\n        const message = 'End date must be after start date';\n        setEndError(message);\n        return message;\n      }\n\n      const maxToDate = new Date(startDate);\n      maxToDate.setFullYear(maxToDate.getFullYear() + 1);\n      const message = 'Access duration may not be longer than one year';\n      date > maxToDate && setEndError(message);\n      return date > maxToDate ? message : '';\n    }\n    setEndError();\n    return '';\n  };\n\n  const onStartChange = (_e, str, date) => {\n    setStartDate(date ? new Date(date) : undefined);\n    formOptions.change(ACCESS_FROM, isCorrectFormat(str) ? str : '');\n    if (isValidDate(date) && !startValidator(date)) {\n      date.setDate(date.getDate() + 7);\n      formOptions.change(ACCESS_TO, dateFormat(date));\n      setEndError();\n    }\n  };\n\n  const onEndChange = (_e, str, date) => {\n    if (endValidator(date) || !isCorrectFormat(str)) {\n      formOptions.change(ACCESS_TO, '');\n    } else {\n      formOptions.change(ACCESS_TO, str);\n      startValidator(startDate) &&\n        formOptions.change(ACCESS_FROM, '') &&\n        setStartError();\n    }\n  };\n\n  return (\n    <FormGroup\n      label=\"Access duration\"\n      isRequired\n      labelIcon={\n        <InputHelpPopover\n          bodyContent={\n            <div>\n              This is the time frame you would like to be granted read access to\n              accounts.\n            </div>\n          }\n          field=\"access duration\"\n        />\n      }\n    >\n      <Split hasGutter>\n        <SplitItem>\n          <DatePicker\n            aria-label=\"Start date\"\n            placeholder=\"mm/dd/yyyy\"\n            value={values[ACCESS_FROM]}\n            dateFormat={dateFormat}\n            dateParse={dateParse}\n            onChange={onStartChange}\n            validators={[startValidator]}\n            inputProps={{\n              onBlur: ({ target: { value } }) => onStartChange(value),\n              validated:\n                values[ACCESS_FROM] === '' ||\n                (values[ACCESS_FROM] && !isCorrectFormat(values[ACCESS_FROM]))\n                  ? ValidatedOptions.error\n                  : ValidatedOptions.default,\n            }}\n          />\n          {startError || values[ACCESS_FROM] === '' ? (\n            <HelperText>\n              <HelperTextItem variant=\"error\">\n                {values[ACCESS_FROM] === ''\n                  ? 'Enter a valid date '\n                  : startError}\n              </HelperTextItem>\n            </HelperText>\n          ) : null}\n        </SplitItem>\n        <SplitItem className=\"pf-v5-u-mt-sm\">to</SplitItem>\n        <SplitItem>\n          <DatePicker\n            aria-label=\"End date\"\n            placeholder=\"mm/dd/yyyy\"\n            value={values[ACCESS_TO]}\n            dateFormat={dateFormat}\n            dateParse={dateParse}\n            onChange={onEndChange}\n            validators={[endValidator]}\n            inputProps={{\n              onBlur: ({ target: { value } }) => onEndChange(value),\n              validated:\n                values[ACCESS_TO] === '' ||\n                (values[ACCESS_TO] && !isCorrectFormat(values[ACCESS_TO]))\n                  ? ValidatedOptions.error\n                  : ValidatedOptions.default,\n            }}\n          />\n          {endError || values[ACCESS_TO] === '' ? (\n            <HelperText>\n              <HelperTextItem variant=\"error\">\n                {values[ACCESS_FROM] === '' ? 'Enter a valid date ' : endError}\n              </HelperTextItem>\n            </HelperText>\n          ) : null}\n        </SplitItem>\n      </Split>\n    </FormGroup>\n  );\n};\n\nexport default AccessDuration;\n","import React, { useReducer } from 'react';\nimport {\n  capitalize,\n  Toolbar,\n  ToolbarContent,\n  ToolbarItem,\n  InputGroup,\n  TextInput,\n  ChipGroup,\n  Chip,\n  InputGroupItem,\n} from '@patternfly/react-core';\nimport {\n  Dropdown,\n  DropdownItem,\n  DropdownToggle,\n  DropdownToggleCheckbox,\n  Select,\n  SelectOption,\n} from '@patternfly/react-core/deprecated';\nimport { FilterIcon } from '@patternfly/react-icons';\nimport PropTypes from 'prop-types';\n\nconst selectLabelId = 'filter-application';\nconst selectPlaceholder = 'Filter by application';\n\nconst RoleToolbar = ({\n  selectedRoles,\n  setSelectedRoles,\n  isChecked,\n  appSelections,\n  setAppSelections,\n  columns,\n  rows,\n  filteredRows,\n  pagedRows,\n  anySelected,\n  clearFiltersButton,\n  perPage,\n  nameFilter,\n  setNameFilter,\n  AccessRequestsPagination,\n  applications,\n}) => {\n  const initialValue = {\n    isDropdownOpen: false,\n    isSelectOpen: false,\n    isBulkSelectOpen: false,\n    filterColumn: columns[0],\n  };\n\n  const reducer = (state, action) => {\n    switch (action.type) {\n      case 'set':\n        return {\n          ...state,\n          [action.payload.key]: action.payload.value,\n        };\n      case 'reset':\n        return initialValue;\n      default:\n        throw new Error('Unknown action type: ${action.type}');\n    }\n  };\n  const [state, dispatch] = useReducer(reducer, initialValue);\n  const setActions = (name, value) => {\n    dispatch({\n      type: 'set',\n      payload: { key: name, value: value },\n    });\n  };\n  const hasFilters = appSelections.length > 0 || nameFilter;\n  const onSelectAll = (_ev, isSelected) => {\n    if (isSelected) {\n      setSelectedRoles(filteredRows.map((row) => row.display_name));\n    } else {\n      setSelectedRoles([]);\n    }\n  };\n\n  return (\n    <React.Fragment>\n      <Toolbar id=\"access-requests-roles-table-toolbar\">\n        <ToolbarContent>\n          <ToolbarItem>\n            <Dropdown\n              onSelect={() =>\n                setActions('isBulkSelectOpen', !state.isBulkSelectOpen)\n              }\n              position=\"left\"\n              toggle={\n                <DropdownToggle\n                  splitButtonItems={[\n                    <DropdownToggleCheckbox\n                      key=\"a\"\n                      id=\"example-checkbox-2\"\n                      aria-label={anySelected ? 'Deselect all' : 'Select all'}\n                      isChecked={isChecked}\n                      onClick={() => onSelectAll(null, !anySelected)}\n                    />,\n                  ]}\n                  onToggle={(_event, isOpen) =>\n                    setActions('isBulkSelectOpen', isOpen)\n                  }\n                  isDisabled={rows.length === 0}\n                >\n                  {selectedRoles.length !== 0 && (\n                    <React.Fragment>\n                      {selectedRoles.length} selected\n                    </React.Fragment>\n                  )}\n                </DropdownToggle>\n              }\n              isOpen={state.isBulkSelectOpen}\n              dropdownItems={[\n                <DropdownItem key=\"0\" onClick={() => onSelectAll(null, false)}>\n                  Select none (0 items)\n                </DropdownItem>,\n                <DropdownItem\n                  key=\"1\"\n                  onClick={() =>\n                    setSelectedRoles(\n                      selectedRoles.concat(pagedRows.map((r) => r.display_name))\n                    )\n                  }\n                >\n                  Select page ({Math.min(pagedRows.length, perPage)} items)\n                </DropdownItem>,\n                <DropdownItem key=\"2\" onClick={() => onSelectAll(null, true)}>\n                  Select all ({filteredRows.length} items)\n                </DropdownItem>,\n              ]}\n            />\n          </ToolbarItem>\n          <ToolbarItem>\n            <InputGroup>\n              <InputGroupItem>\n                <Dropdown\n                  isOpen={state.isDropdownOpen}\n                  onSelect={(ev) => {\n                    setActions('isDropdownOpen', false);\n                    setActions('isSelectOpen', false);\n                    setActions('filterColumn', ev.target.value);\n                  }}\n                  toggle={\n                    <DropdownToggle\n                      onToggle={(_event, isOpen) =>\n                        setActions('isDropdownOpen', isOpen)\n                      }\n                    >\n                      <FilterIcon /> {state.filterColumn}\n                    </DropdownToggle>\n                  }\n                  dropdownItems={['Role name', 'Application'].map((colName) => (\n                    // Filterable columns are RequestID, AccountID, and Status\n                    <DropdownItem\n                      key={colName}\n                      value={colName}\n                      component=\"button\"\n                    >\n                      {capitalize(colName)}\n                    </DropdownItem>\n                  ))}\n                />\n              </InputGroupItem>\n              {state.filterColumn === 'Application' ? (\n                <React.Fragment>\n                  <span id={selectLabelId} hidden>\n                    {selectPlaceholder}\n                  </span>\n                  <Select\n                    aria-labelledby={selectLabelId}\n                    variant=\"checkbox\"\n                    aria-label=\"Select applications\"\n                    onToggle={(_event, isOpen) =>\n                      setActions('isSelectOpen', isOpen)\n                    }\n                    onSelect={(_ev, selection) => {\n                      if (appSelections.includes(selection)) {\n                        setAppSelections((prev) =>\n                          prev.filter((s) => s !== selection)\n                        );\n                      } else {\n                        setAppSelections([...appSelections, selection]);\n                      }\n                    }}\n                    isOpen={state.isSelectOpen}\n                    selections={appSelections}\n                    isCheckboxSelectionBadgeHidden\n                    placeholderText={selectPlaceholder}\n                    className=\"select-toolbar\"\n                  >\n                    {applications.map((app) => (\n                      <SelectOption key={app} value={app}>\n                        {capitalize(app.replace(/-/g, ' '))}\n                      </SelectOption>\n                    ))}\n                  </Select>\n                </React.Fragment>\n              ) : (\n                <TextInput\n                  name=\"rolesSearch\"\n                  id=\"rolesSearch\"\n                  type=\"search\"\n                  aria-label=\"Search input\"\n                  placeholder=\"Filter by role name\"\n                  value={nameFilter}\n                  onChange={(_event, val) => setNameFilter(val)}\n                />\n              )}\n            </InputGroup>\n          </ToolbarItem>\n          <ToolbarItem variant=\"pagination\" align={{ default: 'alignRight' }}>\n            <AccessRequestsPagination id=\"top\" />\n          </ToolbarItem>\n        </ToolbarContent>\n        {hasFilters && (\n          <ToolbarContent>\n            {nameFilter && (\n              <ChipGroup categoryName=\"Role name\">\n                <Chip onClick={() => setNameFilter('')}>{nameFilter}</Chip>\n              </ChipGroup>\n            )}\n            {appSelections.length > 0 && (\n              <ChipGroup categoryName=\"Status\">\n                {appSelections.map((status) => (\n                  <Chip\n                    key={status}\n                    onClick={() =>\n                      setAppSelections((prev) =>\n                        prev.filter((s) => s !== status)\n                      )\n                    }\n                  >\n                    {status}\n                  </Chip>\n                ))}\n              </ChipGroup>\n            )}\n            {clearFiltersButton}\n          </ToolbarContent>\n        )}\n      </Toolbar>\n    </React.Fragment>\n  );\n};\n\nRoleToolbar.propTypes = {\n  selectedRoles: PropTypes.array,\n  setSelectedRoles: PropTypes.func,\n  isChecked: PropTypes.bool,\n  appSelections: PropTypes.any,\n  setAppSelections: PropTypes.func,\n  columns: PropTypes.array,\n  rows: PropTypes.array,\n  filteredRows: PropTypes.array,\n  pagedRows: PropTypes.array,\n  anySelected: PropTypes.bool,\n  clearFiltersButton: PropTypes.object,\n  perPage: PropTypes.number,\n  nameFilter: PropTypes.string,\n  setNameFilter: PropTypes.func,\n  AccessRequestsPagination: PropTypes.func,\n  applications: PropTypes.array,\n};\n\nexport default RoleToolbar;\n","import React from 'react';\nimport {\n  EmptyState,\n  EmptyStateIcon,\n  EmptyStateBody,\n  EmptyStateHeader,\n  EmptyStateFooter,\n} from '@patternfly/react-core';\nimport { Tbody, Tr, Td } from '@patternfly/react-table';\nimport SearchIcon from '@patternfly/react-icons/dist/js/icons/search-icon';\nimport PropTypes from 'prop-types';\n\nconst MUANoResults = ({ columns, clearFiltersButton }) => {\n  return (\n    <Tbody>\n      <Tr>\n        <Td colSpan={columns.length}>\n          <EmptyState variant=\"sm\">\n            <EmptyStateHeader\n              titleText=\"No matching requests found\"\n              icon={<EmptyStateIcon icon={SearchIcon} />}\n              headingLevel=\"h2\"\n            />\n            <EmptyStateBody>\n              No results match the filter criteria. Remove all filters or clear\n              all filters to show results.\n            </EmptyStateBody>\n            <EmptyStateFooter>{clearFiltersButton}</EmptyStateFooter>\n          </EmptyState>\n        </Td>\n      </Tr>\n    </Tbody>\n  );\n};\n\nMUANoResults.propTypes = {\n  columns: PropTypes.array,\n  clearFiltersButton: PropTypes.object,\n};\n\nexport default MUANoResults;\n","import React from 'react';\nimport { Title, Button, Pagination, Tooltip } from '@patternfly/react-core';\nimport {\n  Thead,\n  Tbody,\n  Tr,\n  Th,\n  Td,\n  TableVariant,\n} from '@patternfly/react-table';\nimport { Table } from '@patternfly/react-table/deprecated';\nimport { css } from '@patternfly/react-styles';\nimport { useDispatch } from 'react-redux';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport PropTypes from 'prop-types';\nimport apiInstance from '../../Helpers/apiInstance';\nimport RoleToolbar from './RoleToolbar';\nimport MUANoResults from './MUANoResults';\n\nlet rolesCache = [];\nlet applicationsCache = [];\n\nconst MUARolesTable = ({\n  roles: selectedRoles,\n  setRoles: setSelectedRoles,\n}) => {\n  const isReadOnly = setSelectedRoles === undefined;\n  const columns = ['Role name', 'Role description', 'Permissions'];\n  const [rows, setRows] = React.useState(Array.from(rolesCache));\n  const [applications, setApplications] = React.useState(applicationsCache);\n  const [appSelections, setAppSelections] = React.useState([]);\n  React.useEffect(() => {\n    if (rolesCache.length === 0 || applicationsCache.length === 0) {\n      apiInstance\n        .get(\n          `${API_BASE}/roles/?system=true&limit=9999&order_by=display_name&add_fields=groups_in_count`,\n          { headers: { Accept: 'application/json' } }\n        )\n        .then(({ data }) => {\n          data.forEach((role) => {\n            role.isExpanded = false;\n            role.permissions = role.accessCount;\n          });\n          rolesCache = data.map((role) => Object.assign({}, role));\n          setRows(data);\n          // Build application filter from data\n          const apps = Array.from(\n            data\n              .map((role) => role.applications)\n              .flat()\n              .reduce((acc, cur) => {\n                acc.add(cur);\n                return acc;\n              }, new Set())\n          ).sort();\n          applicationsCache = apps;\n          setApplications(apps);\n        })\n        .catch((err) =>\n          dispatch(\n            addNotification({\n              variant: 'danger',\n              title: 'Could not fetch roles list',\n              description: err.message,\n            })\n          )\n        );\n    }\n  }, []);\n\n  // Sorting\n  const [activeSortIndex, setActiveSortIndex] = React.useState('name');\n  const [activeSortDirection, setActiveSortDirection] = React.useState('asc');\n  const onSort = (_ev, index, direction) => {\n    setActiveSortIndex(index);\n    setActiveSortDirection(direction);\n  };\n\n  const [nameFilter, setNameFilter] = React.useState('');\n  const hasFilters = appSelections.length > 0 || nameFilter;\n\n  const selectedNames = selectedRoles.map((role) => role.display_name);\n  const filteredRows = rows\n    .filter((row) =>\n      appSelections.length > 0\n        ? row.applications.find((app) => appSelections.includes(app))\n        : true\n    )\n    .filter((row) => row.name.toLowerCase().includes(nameFilter))\n    .filter((row) =>\n      isReadOnly ? selectedNames.includes(row.display_name) : true\n    );\n\n  // Pagination\n  const [page, setPage] = React.useState(1);\n  const [perPage, setPerPage] = React.useState(10);\n  const AccessRequestsPagination = ({ id }) => (\n    <Pagination\n      itemCount={filteredRows.length}\n      perPage={perPage}\n      page={page}\n      onSetPage={(_ev, pageNumber) => setPage(pageNumber)}\n      id={`access-requests-roles-table-pagination-${id}`}\n      variant={id}\n      onPerPageSelect={(_ev, perPage) => {\n        setPage(1);\n        setPerPage(perPage);\n      }}\n      isCompact={id === 'top'}\n    />\n  );\n  AccessRequestsPagination.propTypes = {\n    id: PropTypes.string,\n  };\n  const pagedRows = filteredRows\n    .sort((a, b) => {\n      if (typeof a[activeSortIndex] === 'number') {\n        // numeric sort\n        if (activeSortDirection === 'asc') {\n          return a[activeSortIndex] - b[activeSortIndex];\n        }\n\n        return b[activeSortIndex] - a[activeSortIndex];\n      } else {\n        // string sort\n        if (activeSortDirection === 'asc') {\n          return (a[activeSortIndex] + '').localeCompare(b[activeSortIndex]);\n        }\n\n        return (b[activeSortIndex] + '').localeCompare(a[activeSortIndex]);\n      }\n    })\n    .slice((page - 1) * perPage, page * perPage);\n\n  // Selecting\n  const anySelected = selectedRoles.length > 0;\n  const someChecked = anySelected ? null : false;\n  const isChecked =\n    selectedRoles.length === filteredRows.length && selectedRoles.length > 0\n      ? true\n      : someChecked;\n  const onSelect = (_ev, isSelected, rowId) => {\n    const changed = pagedRows[rowId].display_name;\n    if (isSelected) {\n      setSelectedRoles(selectedRoles.concat(changed));\n    } else {\n      setSelectedRoles(selectedRoles.filter((role) => role !== changed));\n    }\n  };\n\n  const clearFiltersButton = (\n    <Button\n      variant=\"link\"\n      onClick={() => {\n        setAppSelections([]);\n        setNameFilter('');\n      }}\n    >\n      Clear filters\n    </Button>\n  );\n\n  const roleToolbar = isReadOnly ? null : (\n    <RoleToolbar\n      selectedRoles={selectedRoles}\n      setSelectedRoles={setSelectedRoles}\n      isChecked={isChecked}\n      appSelections={appSelections}\n      setAppSelections={setAppSelections}\n      columns={columns}\n      rows={rows}\n      filteredRows={filteredRows}\n      pagedRows={pagedRows}\n      clearFiltersButton={clearFiltersButton}\n      perPage={perPage}\n      nameFilter={nameFilter}\n      setNameFilter={setNameFilter}\n      AccessRequestsPagination={AccessRequestsPagination}\n      applications={applications}\n    />\n  );\n\n  const expandedColumns = ['Application', 'Resource type', 'Operation'];\n  const dispatch = useDispatch();\n  const onExpand = (row) => {\n    row.isExpanded = !row.isExpanded;\n    setRows([...rows]);\n    if (!row.access) {\n      apiInstance\n        .get(`${API_BASE}/roles/${row.uuid}/`, {\n          headers: { Accept: 'application/json' },\n        })\n        .then((res) => {\n          row.access = res.access.map((a) => a.permission.split(':'));\n          setRows([...rows]);\n        })\n        .catch((err) =>\n          dispatch(\n            addNotification({\n              variant: 'danger',\n              title: `Could not fetch permission list for ${row.name}.`,\n              description: err.message,\n            })\n          )\n        );\n    }\n  };\n  const roleTable = (\n    <Table aria-label=\"My user access roles\" variant={TableVariant.compact}>\n      <Thead>\n        <Tr>\n          {!isReadOnly && <Th />}\n          <Th\n            width={30}\n            sort={{\n              sortBy: {\n                index: activeSortIndex,\n                direction: activeSortDirection,\n              },\n              onSort,\n              columnIndex: 'name',\n            }}\n          >\n            {columns[0]}\n          </Th>\n          <Th\n            width={50}\n            sort={{\n              sortBy: {\n                index: activeSortIndex,\n                direction: activeSortDirection,\n              },\n              onSort,\n              columnIndex: 'description',\n            }}\n          >\n            {columns[1]}\n          </Th>\n          <Th\n            width={10}\n            sort={{\n              sortBy: {\n                index: activeSortIndex,\n                direction: activeSortDirection,\n              },\n              onSort,\n              columnIndex: 'permissions',\n            }}\n            modifier=\"nowrap\"\n          >\n            {columns[2]}\n          </Th>\n        </Tr>\n      </Thead>\n      {rows.length === 0 &&\n        [...Array(perPage).keys()].map((i) => (\n          <Tbody key={i}>\n            <Tr>\n              {!isReadOnly && <Td />}\n              {columns.map((col, key) => (\n                <Td dataLabel={col} key={key}>\n                  <div\n                    style={{ height: '22px' }}\n                    className=\"ins-c-skeleton ins-c-skeleton__md\"\n                  >\n                    {' '}\n                  </div>\n                </Td>\n              ))}\n            </Tr>\n          </Tbody>\n        ))}\n      {pagedRows.map((row, rowIndex) => (\n        <Tbody key={rowIndex}>\n          <Tr>\n            {!isReadOnly && (\n              <Td\n                select={{\n                  rowIndex,\n                  onSelect,\n                  isSelected: selectedRoles.find((r) => r === row.display_name),\n                }}\n              />\n            )}\n            <Td dataLabel={columns[0]}>{row.display_name}</Td>\n            <Td dataLabel={columns[1]} className=\"pf-v5-m-truncate\">\n              <Tooltip entryDelay={1000} content={row.description}>\n                <span className=\"pf-v5-m-truncate pf-v5-c-table__text\">\n                  {row.description}\n                </span>\n              </Tooltip>\n            </Td>\n            <Td\n              dataLabel={columns[2]}\n              className={css(\n                'pf-c-table__compound-expansion-toggle',\n                row.isExpanded && 'pf-v5-m-expanded'\n              )}\n            >\n              <button\n                type=\"button\"\n                className=\"pf-v5-c-table__button\"\n                onClick={() => onExpand(row)}\n              >\n                {row.permissions}\n              </button>\n            </Td>\n          </Tr>\n          <Tr isExpanded={row.isExpanded}>\n            {!isReadOnly && <Td />}\n            <Td className=\"pf-v5-u-p-0\" colSpan={3}>\n              <Table className=\"pf-v5-m-no-border-rows\">\n                <Thead>\n                  <Tr>\n                    {expandedColumns.map((col) => (\n                      <Th key={col}>{col}</Th>\n                    ))}\n                  </Tr>\n                </Thead>\n                <Tbody>\n                  {Array.isArray(row.access)\n                    ? row.access.map((permissions) => (\n                        <Tr key={permissions.join(':')}>\n                          <Td dataLabel={expandedColumns[0]}>\n                            {permissions[0]}\n                          </Td>\n                          <Td dataLabel={expandedColumns[1]}>\n                            {permissions[1]}\n                          </Td>\n                          <Td dataLabel={expandedColumns[2]}>\n                            {permissions[2]}\n                          </Td>\n                        </Tr>\n                      ))\n                    : [...Array(row.permissions).keys()].map((i) => (\n                        <Tr key={i}>\n                          {expandedColumns.map((val) => (\n                            <Td key={val} dataLabel={val}>\n                              <div\n                                style={{ height: '22px' }}\n                                className=\"ins-c-skeleton ins-c-skeleton__sm\"\n                              >\n                                {' '}\n                              </div>\n                            </Td>\n                          ))}\n                        </Tr>\n                      ))}\n                </Tbody>\n              </Table>\n            </Td>\n          </Tr>\n        </Tbody>\n      ))}\n      {pagedRows.length === 0 && hasFilters ? (\n        <MUANoResults\n          columns={columns}\n          clearFiltersButton={clearFiltersButton}\n        />\n      ) : null}\n    </Table>\n  );\n\n  return (\n    <React.Fragment>\n      {!isReadOnly && (\n        <React.Fragment>\n          <Title headingLevel=\"h2\">Select roles</Title>\n          <p>Select the roles you would like access to.</p>\n        </React.Fragment>\n      )}\n      {roleToolbar}\n      {roleTable}\n      {isReadOnly && <AccessRequestsPagination id=\"bottom\" />}\n    </React.Fragment>\n  );\n};\n\nMUARolesTable.propTypes = {\n  roles: PropTypes.any,\n  setRoles: PropTypes.any,\n};\n\nexport default MUARolesTable;\n","import axios from 'axios';\nimport {\n  authInterceptor,\n  responseDataInterceptor,\n  interceptor401,\n  interceptor500,\n  errorInterceptor,\n} from '@redhat-cloud-services/frontend-components-utilities/interceptors';\nimport registry from '../store';\nimport { API_ERROR } from '../Redux/action-types';\n\nconst interceptor403 = (error) => {\n  const store = registry.getStore();\n  if (error.response && error.response.status === 403) {\n    store.dispatch({ type: API_ERROR, payload: 403 });\n  }\n\n  throw error;\n};\n\nconst apiInstance = axios.create();\napiInstance.interceptors.request.use(authInterceptor);\napiInstance.interceptors.response.use(responseDataInterceptor);\n\napiInstance.interceptors.response.use(null, interceptor401);\napiInstance.interceptors.response.use(null, interceptor403);\napiInstance.interceptors.response.use(null, interceptor500);\napiInstance.interceptors.response.use(null, errorInterceptor);\n\nexport default apiInstance;\n","import React from 'react';\nimport { Button, Label } from '@patternfly/react-core';\nimport { useDispatch } from 'react-redux';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { getLabelProps } from './getLabelProps';\nimport EditAltIcon from '@patternfly/react-icons/dist/js/icons/edit-alt-icon';\nimport { capitalize } from '@patternfly/react-core/dist/esm/helpers/util';\nimport PropTypes from 'prop-types';\nimport apiInstance from './apiInstance';\n\nexport function getInternalActions(status, requestId, setOpenModal) {\n  const items = [];\n  if (status === 'pending') {\n    items.push({\n      title: 'Edit',\n      onClick: () => setOpenModal({ type: 'edit', requestId }),\n    });\n    items.push({\n      title: 'Cancel',\n      onClick: () => setOpenModal({ type: 'cancel', requestId }),\n    });\n  }\n\n  return { items, disable: items.length === 0 };\n}\n\nexport function StatusLabel({ requestId, status: statusProp, hideActions }) {\n  const [status, setStatus] = React.useState(statusProp);\n  const [isEditing, setIsEditing] = React.useState(false);\n  const [isLoading, setIsLoading] = React.useState(false);\n  const dispatch = useDispatch();\n\n  function onClick(newStatus) {\n    setIsLoading(true);\n    apiInstance\n      .patch(\n        `${API_BASE}/cross-account-requests/${requestId}/`,\n        { status: newStatus },\n        {\n          headers: {\n            'Content-Type': 'application/json',\n            Accept: 'application/json',\n          },\n        }\n      )\n      .then((res) => {\n        if (res.errors && res.errors.length > 0) {\n          throw Error(res.errors.map((e) => e.detail).join('\\n'));\n        }\n        dispatch(\n          addNotification({\n            variant: 'success',\n            title: `Request ${newStatus} successfully`,\n          })\n        );\n        setStatus(newStatus);\n        setIsEditing(false);\n        setIsLoading(false);\n      })\n      .catch((err) => {\n        dispatch(\n          addNotification({\n            variant: 'danger',\n            title: `There was an error ${\n              newStatus === 'approved' ? 'approving' : 'denying'\n            } your request`,\n            description: err.message,\n          })\n        );\n        setIsLoading(false);\n      });\n  }\n\n  const label = <Label {...getLabelProps(status)}>{capitalize(status)}</Label>;\n\n  // For internal view\n  if (hideActions) {\n    return label;\n  }\n\n  return (\n    <React.Fragment>\n      {isEditing || status === 'pending' ? (\n        <React.Fragment>\n          <Button\n            className=\"pf-v5-u-mr-md\"\n            isDisabled={isLoading || status === 'approved'}\n            variant=\"primary\"\n            onClick={() => onClick('approved')}\n          >\n            Approve\n          </Button>\n          <Button\n            className=\"pf-v5-u-mr-md\"\n            isDisabled={isLoading || status === 'denied'}\n            variant=\"danger\"\n            onClick={() => onClick('denied')}\n          >\n            Deny\n          </Button>\n        </React.Fragment>\n      ) : (\n        label\n      )}\n      {['approved', 'denied'].includes(status) && (\n        <Button\n          variant=\"plain\"\n          aria-label=\"Edit status\"\n          onClick={() => setIsEditing(!isEditing)}\n        >\n          <EditAltIcon />\n        </Button>\n      )}\n    </React.Fragment>\n  );\n}\n\nStatusLabel.propTypes = {\n  requestId: PropTypes.string,\n  status: PropTypes.any,\n  hideActions: PropTypes.any,\n};\n","import React from 'react';\nimport CheckCircleIcon from '@patternfly/react-icons/dist/js/icons/check-circle-icon';\nimport ExclamationCircleIcon from '@patternfly/react-icons/dist/js/icons/exclamation-circle-icon';\nimport ErrorCircleOIcon from '@patternfly/react-icons/dist/js/icons/error-circle-o-icon';\nimport PendingIcon from '@patternfly/react-icons/dist/js/icons/in-progress-icon';\nimport ClockIcon from '@patternfly/react-icons/dist/js/icons/history-icon';\n\nexport function getLabelProps(status) {\n  let color = null;\n  let icon = null;\n  if (status === 'pending') {\n    color = 'blue';\n    icon = <PendingIcon />;\n  } else if (status === 'approved') {\n    color = 'green';\n    icon = <CheckCircleIcon />;\n  } else if (status === 'denied') {\n    color = 'red';\n    icon = <ExclamationCircleIcon />;\n  } else if (status === 'cancelled') {\n    color = 'orange';\n    icon = <ErrorCircleOIcon />;\n  } else if (status === 'expired') {\n    color = 'grey';\n    icon = <ClockIcon />;\n  }\n\n  return { color, icon };\n}\n"],"names":["CancelRequestModal","requestId","onClose","isLoading","setIsLoading","dispatch","title","isOpen","variant","actions","key","onClick","patch","status","headers","Accept","then","res","errors","length","Error","map","e","detail","join","catch","err","description","message","size","propTypes","InputHelpPopover","headerContent","bodyContent","field","Popover","type","preventDefault","className","noVerticalAlign","ACCOUNT_NUMBER","ORG_ID","ACCESS_FROM","ACCESS_TO","SELECTED_ROLES","SelectRoles","props","input","values","getState","selectedRoles","setSelectedRoles","useState","useEffect","onChange","FormGroup","fieldId","MUARolesTable","roles","setRoles","ReviewDetails","Stack","StackItem","Grid","GridItem","sm","md","Text","component","h4","p","slice","role","targetAccount","start","end","error","invalidAccountTitle","FormTemplate","showFormControls","mapperExtension","popoverBody","Split","hasGutter","SplitItem","isFilled","label","name","labelIcon","TextInput","id","value","isDisabled","formOptions","startDate","setStartDate","endError","setEndError","startError","setStartError","today","Date","setDate","getDate","maxStartDate","dateFormat","date","toLocaleDateString","year","month","day","isCorrectFormat","test","dateParse","split","padStart","startValidator","endValidator","maxToDate","setFullYear","getFullYear","onStartChange","_e","str","undefined","change","onEndChange","isRequired","DatePicker","placeholder","validators","inputProps","onBlur","target","validated","default","HelperText","HelperTextItem","AccessRequestsWizard","isEdit","schema","useRef","fields","isDynamic","inModal","showTitles","nextStep","validate","REQUIRED","TEXT_FIELD","FormGroupProps","helperText","hideField","StepTemplate","formFields","cancelWarningVisible","setCancelWarningVisible","setError","initialValues","setInitialValues","isSubmitting","setIsSubmitting","user","setUser","userPromise","insights","chrome","auth","getUser","detailsPromise","apiInstance","get","Promise","all","details","identity","target_account","target_org","start_date","end_date","display_name","validatorMapper","Modal","titleIconVariant","Button","large","showClose","hasNoBodyWrapper","Wizard","steps","Bullseye","Spinner","EmptyState","EmptyStateIcon","icon","Title","headingLevel","color","EmptyStateBody","isFinishedStep","current","subscription","componentMapper","onSubmit","body","request_id","isInvalidAccount","first_name","last_name","onCancel","selectLabelId","selectPlaceholder","RoleToolbar","isChecked","appSelections","setAppSelections","columns","rows","filteredRows","pagedRows","anySelected","clearFiltersButton","perPage","nameFilter","setNameFilter","AccessRequestsPagination","applications","initialValue","isDropdownOpen","isSelectOpen","isBulkSelectOpen","filterColumn","state","useReducer","action","payload","setActions","hasFilters","onSelectAll","_ev","isSelected","row","Toolbar","ToolbarContent","ToolbarItem","Dropdown","onSelect","position","toggle","DropdownToggle","splitButtonItems","DropdownToggleCheckbox","onToggle","_event","dropdownItems","DropdownItem","concat","r","Math","min","InputGroup","InputGroupItem","ev","colName","hidden","Select","selection","includes","prev","filter","s","selections","isCheckboxSelectionBadgeHidden","placeholderText","app","SelectOption","replace","val","align","ChipGroup","categoryName","Chip","MUANoResults","Tbody","Tr","Td","colSpan","EmptyStateHeader","titleText","EmptyStateFooter","rolesCache","applicationsCache","isReadOnly","setRows","Array","from","setApplications","data","forEach","isExpanded","permissions","accessCount","Object","assign","apps","flat","reduce","acc","cur","add","Set","sort","activeSortIndex","setActiveSortIndex","activeSortDirection","setActiveSortDirection","onSort","index","direction","selectedNames","find","toLowerCase","page","setPage","setPerPage","Pagination","itemCount","onSetPage","pageNumber","onPerPageSelect","isCompact","a","b","localeCompare","someChecked","rowId","changed","roleToolbar","expandedColumns","roleTable","Table","compact","Thead","Th","width","sortBy","columnIndex","modifier","keys","i","col","dataLabel","style","height","rowIndex","select","Tooltip","entryDelay","content","access","uuid","permission","onExpand","isArray","interceptors","request","use","response","store","getStore","getInternalActions","setOpenModal","items","push","disable","StatusLabel","statusProp","hideActions","setStatus","isEditing","setIsEditing","newStatus","getLabelProps"],"sourceRoot":""}