{"version":3,"file":"js/289.643d7e1f7beb243d6baf.js","mappings":"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","sources":["webpack:///./src/Components/CancelRequestModal.js","webpack:///./src/Components/common/InputHelpPopover.js","webpack:///./src/Components/access-requests-wizard/schema.js","webpack:///./src/Components/access-requests-wizard/SelectRoles.js","webpack:///./src/Components/access-requests-wizard/ReviewDetails.js","webpack:///./src/Components/access-requests-wizard/AccessRequestsWizard.js","webpack:///./src/Components/access-requests-wizard/SetName.js","webpack:///./src/Components/access-requests-wizard/AccessDuration.js","webpack:///./src/Components/mua-roles-table/RoleToolbar.js","webpack:///./src/Components/mua-roles-table/MUANoResults.js","webpack:///./src/Components/mua-roles-table/MUARolesTable.js","webpack:///./src/Helpers/apiInstance.js","webpack:///./src/Helpers/getActions.js","webpack:///./src/Helpers/getLabelProps.js"],"sourcesContent":["import React from 'react';\nimport { Modal, Button, Spinner } from '@patternfly/react-core';\nimport { useDispatch } from 'react-redux';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport PropTypes from 'prop-types';\nimport apiInstance from '../Helpers/apiInstance';\n\nconst CancelRequestModal = ({ requestId, onClose }) => {\n  const [isLoading, setIsLoading] = React.useState(false);\n  const dispatch = useDispatch();\n  const onCancel = () => {\n    setIsLoading(true);\n    // https://ci.cloud.redhat.com/docs/api-docs/rbac#operations-CrossAccountRequest-patchCrossAccountRequest\n    apiInstance\n      .patch(\n        `${API_BASE}/cross-account-requests/${requestId}/`,\n        { status: 'cancelled' },\n        {\n          headers: {\n            'Content-Type': 'application/json',\n            Accept: 'application/json',\n          },\n        }\n      )\n      .then((res) => {\n        if (res.errors && res.errors.length > 0) {\n          throw Error(res.errors.map((e) => e.detail).join('\\n'));\n        }\n        dispatch(\n          addNotification({\n            variant: 'success',\n            title: 'Request cancelled successfully',\n          })\n        );\n        setIsLoading(false);\n        onClose(true);\n      })\n      .catch((err) => {\n        dispatch(\n          addNotification({\n            variant: 'danger',\n            title: 'There was an error cancelling your request',\n            description: err.message,\n          })\n        );\n        setIsLoading(false);\n        onClose(true);\n      });\n  };\n  return (\n    <Modal\n      title=\"Cancel request?\"\n      isOpen\n      variant=\"small\"\n      onClose={() => onClose(false)}\n      actions={[\n        <Button key=\"confirm\" variant=\"danger\" onClick={onCancel}>\n          Yes, cancel\n        </Button>,\n        <Button key=\"cancel\" variant=\"link\" onClick={() => onClose(false)}>\n          No, keep\n        </Button>,\n      ]}\n    >\n      Request <b>{requestId}</b> will be withdrawn.\n      {isLoading && <Spinner size=\"lg\" />}\n    </Modal>\n  );\n};\n\nCancelRequestModal.propTypes = {\n  requestId: PropTypes.string,\n  onClose: PropTypes.func,\n};\n\nexport default CancelRequestModal;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport HelpIcon from '@patternfly/react-icons/dist/esm/icons/help-icon';\nimport { Popover } from '@patternfly/react-core';\n\nconst InputHelpPopover = ({\n  headerContent = null,\n  bodyContent = null,\n  field = 'input',\n}) => (\n  <Popover headerContent={headerContent} bodyContent={bodyContent}>\n    <button\n      type=\"button\"\n      aria-label={`More info for ${field}`}\n      onClick={(e) => e.preventDefault()}\n      aria-describedby=\"form-name\"\n      className=\"pf-c-form__group-label-help\"\n    >\n      <HelpIcon noVerticalAlign />\n    </button>\n  </Popover>\n);\n\nInputHelpPopover.propTypes = {\n  headerContent: PropTypes.element,\n  bodyContent: PropTypes.element,\n  field: PropTypes.string,\n};\n\nexport default InputHelpPopover;\n","import React from 'react';\nimport { capitalize } from '@patternfly/react-core';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport InputHelpPopover from '../common/InputHelpPopover';\n\nexport const ACCOUNT_NUMBER = 'account-number';\nexport const ORG_ID = 'org-id';\nexport const ACCESS_FROM = 'start';\nexport const ACCESS_TO = 'end';\nexport const SELECTED_ROLES = 'selected-roles';\n\nexport default (isEdit, variant) => ({\n  fields: [\n    {\n      component: 'wizard',\n      name: 'wizard',\n      isDynamic: true,\n      inModal: true,\n      showTitles: true,\n      className: 'accessRequests',\n      title: `${capitalize(variant)} request`,\n      fields: [\n        {\n          name: 'details',\n          nextStep: 'select-roles',\n          title: 'Request details',\n          fields: [\n            {\n              component: 'set-name',\n              name: 'name',\n              validate: [\n                {\n                  type: validatorTypes.REQUIRED,\n                },\n              ],\n            },\n            {\n              component: componentTypes.TEXT_FIELD,\n              isRequired: true,\n              label: 'Account number',\n              isDisabled: isEdit,\n              placeholder: 'Example, 8675309',\n              FormGroupProps: {\n                labelIcon: (\n                  <InputHelpPopover\n                    bodyContent={\n                      <p>\n                        This is the account number that you would like to\n                        receive read access to\n                      </p>\n                    }\n                    field=\"account number\"\n                  />\n                ),\n              },\n              helperText: 'Enter the account number you would like access to',\n              name: ACCOUNT_NUMBER,\n              validate: [{ type: 'validate-account' }],\n            },\n            {\n              component: componentTypes.TEXT_FIELD,\n              isRequired: true,\n              label: 'Organization ID',\n              placeholder: 'Example, 1234567',\n              isDisabled: isEdit,\n              FormGroupProps: {\n                labelIcon: (\n                  <InputHelpPopover\n                    bodyContent={\n                      <p>\n                        This is the org ID of the account that you would like to\n                        receive read access to\n                      </p>\n                    }\n                    field=\"organization ID\"\n                  />\n                ),\n              },\n              helperText: 'Enter the organization ID you would like access to',\n              name: ORG_ID,\n              validate: [{ type: 'validate-org-id' }],\n            },\n            {\n              name: 'access-duration',\n              component: 'access-duration',\n              label: 'Access duration',\n              isRequired: true,\n            },\n            {\n              name: ACCESS_FROM,\n              component: componentTypes.TEXT_FIELD,\n              hideField: true,\n              isRequired: true,\n              validate: [\n                (value) =>\n                  value?.length > 0 ? undefined : 'Invalid start date',\n              ],\n            },\n            {\n              name: ACCESS_TO,\n              component: componentTypes.TEXT_FIELD,\n              hideField: true,\n              isRequired: true,\n              validate: [\n                (value) => (value?.length > 0 ? undefined : 'Invalid end date'),\n              ],\n            },\n          ],\n        },\n        {\n          name: 'select-roles',\n          nextStep: 'review-details',\n          title: 'Select roles',\n          StepTemplate: (props) => props.formFields,\n          fields: [\n            {\n              component: 'select-roles',\n              name: SELECTED_ROLES,\n              validate: [\n                (value) =>\n                  value?.length > 0 ? undefined : 'No roles selected',\n              ],\n            },\n          ],\n        },\n        {\n          name: 'review-details',\n          title: 'Review details',\n          fields: [\n            {\n              component: 'review-details',\n              name: 'review-details',\n            },\n          ],\n        },\n      ],\n    },\n  ],\n});\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport { FormGroup } from '@patternfly/react-core';\nimport MUARolesTable from '../mua-roles-table/MUARolesTable';\nimport { SELECTED_ROLES } from './schema';\n\nconst SelectRoles = (props) => {\n  const { input } = useFieldApi(props);\n  const formOptions = useFormApi();\n  const values = formOptions.getState().values;\n  const [selectedRoles, setSelectedRoles] = useState(\n    values[SELECTED_ROLES] || []\n  );\n\n  useEffect(() => {\n    input.onChange(selectedRoles);\n  }, [selectedRoles]);\n\n  return (\n    <FormGroup fieldId=\"select-role\">\n      <MUARolesTable roles={selectedRoles} setRoles={setSelectedRoles} />\n    </FormGroup>\n  );\n};\n\nSelectRoles.propTypes = {\n  selectedRoles: PropTypes.array,\n  setSelectedRoles: PropTypes.func,\n  title: PropTypes.string,\n  description: PropTypes.string,\n};\n\nexport default SelectRoles;\n","import React from 'react';\nimport {\n  Grid,\n  GridItem,\n  Stack,\n  StackItem,\n  Text,\n  TextVariants,\n} from '@patternfly/react-core';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport PropTypes from 'prop-types';\nimport {\n  ACCESS_FROM,\n  ACCESS_TO,\n  ACCOUNT_NUMBER,\n  SELECTED_ROLES,\n} from './schema';\nimport './review-details.scss';\n\nconst ReviewDetails = () => {\n  const formOptions = useFormApi();\n  const values = formOptions.getState().values;\n\n  return (\n    <React.Fragment>\n      <Stack className=\"accessRequests\">\n        <StackItem className=\"pf-u-mb-md\">\n          <Grid>\n            <GridItem sm={12} md={2}>\n              <Text\n                component={TextVariants.h4}\n                className=\"access-requests-bold-text\"\n              >\n                Account number\n              </Text>\n            </GridItem>\n            <GridItem sm={12} md={10}>\n              <Text component={TextVariants.p}>{values[ACCOUNT_NUMBER]}</Text>\n            </GridItem>\n          </Grid>\n        </StackItem>\n        <StackItem>\n          <Grid>\n            <GridItem sm={12} md={2}>\n              <Text\n                component={TextVariants.h4}\n                className=\"access-requests-bold-text\"\n              >\n                Access duration\n              </Text>\n            </GridItem>\n          </Grid>\n        </StackItem>\n        <StackItem>\n          <Grid>\n            <GridItem sm={12} md={2}>\n              <Text component={TextVariants.h4}>From</Text>\n            </GridItem>\n            <GridItem sm={12} md={10}>\n              <Text component={TextVariants.p}>{values[ACCESS_FROM]}</Text>\n            </GridItem>\n          </Grid>\n        </StackItem>\n        <StackItem className=\"pf-u-mb-md\">\n          <Grid>\n            <GridItem sm={12} md={2}>\n              <Text component={TextVariants.h4}>To</Text>\n            </GridItem>\n            <GridItem sm={12} md={10}>\n              <Text component={TextVariants.p}>{values[ACCESS_TO]}</Text>\n            </GridItem>\n          </Grid>\n        </StackItem>\n        <StackItem>\n          <Grid>\n            <GridItem sm={12} md={2}>\n              <Text\n                component={TextVariants.h4}\n                className=\"access-requests-bold-text\"\n              >\n                Roles\n              </Text>\n            </GridItem>\n            <GridItem sm={12} md={10}>\n              <Text component={TextVariants.p}>\n                {values[SELECTED_ROLES]?.[0]}\n              </Text>\n            </GridItem>\n          </Grid>\n        </StackItem>\n        {values[SELECTED_ROLES]?.slice(1).map((role) => (\n          <StackItem key={role}>\n            <Grid>\n              <GridItem sm={12} md={2}>\n                <Text component={TextVariants.h4}></Text>\n              </GridItem>\n              <GridItem sm={12} md={10}>\n                <Text component={TextVariants.p}>{role}</Text>\n              </GridItem>\n            </Grid>\n          </StackItem>\n        ))}\n      </Stack>\n    </React.Fragment>\n  );\n};\n\nReviewDetails.propTypes = {\n  targetAccount: PropTypes.any,\n  start: PropTypes.any,\n  end: PropTypes.any,\n  roles: PropTypes.any,\n  isLoading: PropTypes.any,\n  error: PropTypes.any,\n  onClose: PropTypes.any,\n};\n\nexport default ReviewDetails;\n","import React, { useRef, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport {\n  Bullseye,\n  Button,\n  capitalize,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  Modal,\n  ModalVariant,\n  Spinner,\n  Title,\n  Wizard,\n} from '@patternfly/react-core';\nimport ExclamationCircleIcon from '@patternfly/react-icons/dist/js/icons/exclamation-circle-icon';\nimport FormRenderer from '@data-driven-forms/react-form-renderer/form-renderer';\nimport Pf4FormTemplate from '@data-driven-forms/pf4-component-mapper/form-template';\nimport componentMapper from '@data-driven-forms/pf4-component-mapper/component-mapper';\nimport SelectRoles from './SelectRoles';\nimport ReviewDetails from './ReviewDetails';\nimport AccessDuration from './AccessDuration';\nimport SetName from './SetName';\nimport apiInstance from '../../Helpers/apiInstance';\nimport schemaBuilder, {\n  ACCESS_FROM,\n  ACCESS_TO,\n  ACCOUNT_NUMBER,\n  ORG_ID,\n  SELECTED_ROLES,\n} from './schema';\n\nconst invalidAccountTitle = 'Invalid Account number';\n\nconst FormTemplate = (props) => (\n  <Pf4FormTemplate {...props} showFormControls={false} />\n);\n\nexport const mapperExtension = {\n  'set-name': SetName,\n  'access-duration': AccessDuration,\n  'select-roles': SelectRoles,\n  'review-details': ReviewDetails,\n};\n\nconst AccessRequestsWizard = ({ requestId, variant, onClose }) => {\n  const dispatch = useDispatch();\n  const isEdit = variant === 'edit';\n  const schema = useRef(schemaBuilder(isEdit, variant));\n  const [cancelWarningVisible, setCancelWarningVisible] = useState(false);\n  const [error, setError] = React.useState();\n  const [initialValues, setInitialValues] = React.useState();\n  const [isLoading, setIsLoading] = React.useState(false);\n  const [isSubmitting, setIsSubmitting] = React.useState(false);\n  const [user, setUser] = React.useState();\n\n  // We need to be logged in (and see the username) which is an async request.\n  // If we're editing we also need to fetch the roles\n  React.useEffect(() => {\n    setIsLoading(true);\n    const userPromise = insights.chrome.auth.getUser();\n    const detailsPromise = isEdit\n      ? apiInstance.get(\n          `${API_BASE}/cross-account-requests/${requestId}/?query_by=user_id`,\n          {\n            headers: { Accept: 'application/json' },\n          }\n        )\n      : new Promise((res) => res(true));\n    Promise.all([userPromise, detailsPromise])\n      .then(([user, details]) => {\n        if (user && user.identity && user.identity.user) {\n          setUser(user.identity.user);\n        } else {\n          throw Error(\"Couldn't get current user. Make sure you're logged in\");\n        }\n        if (isEdit) {\n          if (details.errors) {\n            throw Error(details.errors.map((e) => e.detail).join('\\n'));\n          }\n          if (details && details.target_account) {\n            setInitialValues({\n              [ACCOUNT_NUMBER]: details.target_account,\n              [ORG_ID]: details.target_org,\n              [ACCESS_FROM]: details.start_date,\n              [ACCESS_TO]: details.end_date,\n              [SELECTED_ROLES]: details.roles.map((role) => role.display_name),\n            });\n          } else {\n            throw Error(`Could not fetch details for request ${requestId}`);\n          }\n        }\n        setIsLoading(false);\n      })\n      .catch((err) => {\n        dispatch(\n          addNotification({\n            variant: 'danger',\n            title: 'Could not load access request',\n            description: err.message,\n          })\n        );\n      });\n  }, []);\n\n  const onSubmit = (values) => {\n    setIsSubmitting(true);\n    // https://cloud.redhat.com/docs/api-docs/rbac#operations-CrossAccountRequest-createCrossAccountRequests\n    const body = {\n      target_account: values[ACCOUNT_NUMBER],\n      start_date: values[ACCESS_FROM],\n      end_date: values[ACCESS_TO],\n      target_org: values[ORG_ID],\n      roles: values[SELECTED_ROLES],\n    };\n    setInitialValues(values);\n    apiInstance[isEdit ? 'put' : 'post'](\n      `${API_BASE}/cross-account-requests/${isEdit ? `/${requestId}/` : ''}`,\n      body,\n      {\n        headers: {\n          'Content-Type': 'application/json',\n          Accept: 'application/json',\n        },\n      }\n    )\n      .then((res) => {\n        if (res.errors && res.errors.length > 0) {\n          throw Error(res.errors[0].detail);\n        }\n        dispatch(\n          addNotification({\n            variant: 'success',\n            title: `${isEdit ? 'Edited' : 'Created'} access request`,\n            description: res.request_id,\n          })\n        );\n        onClose(true);\n      })\n      .catch(({ errors = [] }) => {\n        const isInvalidAccount = /Account .* does not exist/.test(\n          errors[0]?.message || errors[0]?.detail\n        );\n        setError({\n          title: isInvalidAccount\n            ? invalidAccountTitle\n            : `Could not ${variant} access request`,\n          description: isInvalidAccount\n            ? 'Please return to Step 1: Request details and input a new account number for your request.'\n            : errors[0]?.message || errors[0]?.detail,\n        });\n        setIsSubmitting(false);\n      });\n  };\n\n  const validatorMapper = {\n    'validate-account': () => (value) =>\n      value && !error ? undefined : 'Please enter a valid account number',\n    'validate-org-id': () => (value) =>\n      value && !error ? undefined : 'Please enter a valid organization ID',\n    'validate-duration': () => (value) => value?.length > 0,\n  };\n\n  if (cancelWarningVisible) {\n    return (\n      <Modal\n        title=\"Exit request creation?\"\n        variant=\"small\"\n        titleIconVariant=\"warning\"\n        isOpen\n        onClose={() => {\n          setCancelWarningVisible(false);\n          onClose(false);\n        }}\n        actions={[\n          <Button\n            key=\"confirm\"\n            variant=\"primary\"\n            onClick={() => onClose(false)}\n          >\n            Exit\n          </Button>,\n          <Button\n            key=\"cancel\"\n            variant=\"link\"\n            onClick={() => setCancelWarningVisible(false)}\n          >\n            Stay\n          </Button>,\n        ]}\n      >\n        All inputs will be discarded.\n      </Modal>\n    );\n  } else if (error || isLoading || isSubmitting) {\n    return (\n      <Modal\n        isOpen\n        variant={ModalVariant.large}\n        showClose={false}\n        className=\"accessRequests\"\n        hasNoBodyWrapper\n        aria-describedby=\"wiz-modal-description\"\n        aria-labelledby=\"wiz-modal-title\"\n      >\n        <Wizard\n          className=\"accessRequests\"\n          title={`${capitalize(variant)} request`}\n          steps={[\n            {\n              name: 'status',\n              component: isLoading ? (\n                <Bullseye>\n                  <Spinner />\n                </Bullseye>\n              ) : (\n                <EmptyState>\n                  {isSubmitting ? (\n                    <>\n                      <EmptyStateIcon icon={() => <Spinner size=\"lg\" />} />\n                      <Title headingLevel=\"h2\" size=\"lg\">\n                        Submitting access request\n                      </Title>\n                      <Button variant=\"link\" onClick={() => onClose(true)}>\n                        Close\n                      </Button>\n                    </>\n                  ) : (\n                    <>\n                      <EmptyStateIcon\n                        icon={ExclamationCircleIcon}\n                        color=\"#C9190B\"\n                      />\n                      <Title headingLevel=\"h2\" size=\"lg\">\n                        {error.title || 'An error occured'}\n                      </Title>\n                      <EmptyStateBody>{error.description}</EmptyStateBody>\n                      {error.title !== invalidAccountTitle && (\n                        <Button variant=\"primary\" onClick={() => setError()}>\n                          Return to Step 1\n                        </Button>\n                      )}\n                    </>\n                  )}\n                </EmptyState>\n              ),\n              isFinishedStep: true,\n            },\n          ]}\n          onClose={() => onClose(true)}\n        />\n      </Modal>\n    );\n  } else {\n    return (\n      <FormRenderer\n        schema={schema.current}\n        subscription={{ values: true }}\n        FormTemplate={FormTemplate}\n        componentMapper={{ ...componentMapper, ...mapperExtension }}\n        validatorMapper={validatorMapper}\n        onSubmit={onSubmit}\n        initialValues={{\n          ...initialValues,\n          'first-name': user?.first_name,\n          'last-name': user?.last_name,\n        }}\n        onCancel={() => setCancelWarningVisible(true)}\n      />\n    );\n  }\n};\n\nAccessRequestsWizard.propTypes = {\n  requestId: PropTypes.string,\n  variant: PropTypes.any,\n  onClose: PropTypes.func,\n};\n\nexport default AccessRequestsWizard;\n","import React from 'react';\nimport { FormGroup, Split, SplitItem, TextInput } from '@patternfly/react-core';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport InputHelpPopover from '../common/InputHelpPopover';\n\nconst SetName = () => {\n  const { getState } = useFormApi();\n  const popoverBody = (\n    <p>\n      Customers will be able to see this information as part of your request\n    </p>\n  );\n\n  return (\n    <Split hasGutter>\n      <SplitItem isFilled>\n        <FormGroup\n          label=\"First name\"\n          name=\"first-name\"\n          labelIcon={\n            <InputHelpPopover bodyContent={popoverBody} field=\"first name\" />\n          }\n        >\n          <TextInput\n            id=\"first-name\"\n            value={getState().values['first-name']}\n            isDisabled\n          />\n        </FormGroup>\n      </SplitItem>\n      <SplitItem isFilled>\n        <FormGroup\n          label=\"Last name\"\n          name=\"last-name\"\n          labelIcon={\n            <InputHelpPopover bodyContent={popoverBody} field=\"last name\" />\n          }\n        >\n          <TextInput\n            id=\"last-name\"\n            value={getState().values['last-name']}\n            isDisabled\n          />\n        </FormGroup>\n      </SplitItem>\n    </Split>\n  );\n};\n\nexport default SetName;\n","import React from 'react';\nimport {\n  DatePicker,\n  FormGroup,\n  HelperText,\n  HelperTextItem,\n  isValidDate,\n  Split,\n  SplitItem,\n  ValidatedOptions,\n} from '@patternfly/react-core';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport InputHelpPopover from '../common/InputHelpPopover';\nimport { ACCESS_FROM, ACCESS_TO } from './schema';\n\nconst AccessDuration = () => {\n  const formOptions = useFormApi();\n  const values = formOptions.getState().values;\n  const [startDate, setStartDate] = React.useState();\n  const [endError, setEndError] = React.useState();\n  const [startError, setStartError] = React.useState();\n\n  const today = new Date();\n  today.setDate(today.getDate() - 1);\n  const maxStartDate = new Date();\n  maxStartDate.setDate(maxStartDate.getDate() + 60);\n\n  const dateFormat = (date) =>\n    date.toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: '2-digit',\n      day: '2-digit',\n    });\n\n  const isCorrectFormat = (date) =>\n    /^([0]?[1-9]|[1][0-2])\\/([0]?[1-9]|[1|2][0-9]|[3][0|1])\\/([0-9]{4})$/.test(\n      date\n    );\n\n  const dateParse = (date) => {\n    const split = date.split('/');\n    if (!isCorrectFormat(date)) {\n      return undefined;\n    }\n    const month = split[0].padStart(2, '0');\n    const day = split[1].padStart(2, '0');\n    const year = split[2].padStart(4, '0');\n    return new Date(`${year}-${month}-${day}T00:00:00`);\n  };\n\n  const startValidator = (date) => {\n    if (isValidDate(date)) {\n      if (date < today) {\n        const message = 'Start date must be today or later';\n        setStartError(message);\n        return message;\n      }\n      if (date > maxStartDate) {\n        const message = 'Start date must be within 60 days of today';\n        setStartError(message);\n        return message;\n      }\n    }\n    setStartError();\n    return '';\n  };\n\n  const endValidator = (date) => {\n    setEndError();\n    if (isValidDate(startDate)) {\n      if (startDate > date) {\n        const message = 'End date must be after start date';\n        setEndError(message);\n        return message;\n      }\n\n      const maxToDate = new Date(startDate);\n      maxToDate.setFullYear(maxToDate.getFullYear() + 1);\n      const message = 'Access duration may not be longer than one year';\n      date > maxToDate && setEndError(message);\n      return date > maxToDate ? message : '';\n    }\n    setEndError();\n    return '';\n  };\n\n  const onStartChange = (_e, str, date) => {\n    setStartDate(date ? new Date(date) : undefined);\n    formOptions.change(ACCESS_FROM, isCorrectFormat(str) ? str : '');\n    if (isValidDate(date) && !startValidator(date)) {\n      date.setDate(date.getDate() + 7);\n      formOptions.change(ACCESS_TO, dateFormat(date));\n      setEndError();\n    }\n  };\n\n  const onEndChange = (_e, str, date) => {\n    if (endValidator(date) || !isCorrectFormat(str)) {\n      formOptions.change(ACCESS_TO, '');\n    } else {\n      formOptions.change(ACCESS_TO, str);\n      startValidator(startDate) &&\n        formOptions.change(ACCESS_FROM, '') &&\n        setStartError();\n    }\n  };\n\n  return (\n    <FormGroup\n      label=\"Access duration\"\n      isRequired\n      labelIcon={\n        <InputHelpPopover\n          bodyContent={\n            <div>\n              This is the time frame you would like to be granted read access to\n              accounts.\n            </div>\n          }\n          field=\"access duration\"\n        />\n      }\n    >\n      <Split hasGutter>\n        <SplitItem>\n          <DatePicker\n            aria-label=\"Start date\"\n            placeholder=\"mm/dd/yyyy\"\n            value={values[ACCESS_FROM]}\n            dateFormat={dateFormat}\n            dateParse={dateParse}\n            onChange={onStartChange}\n            validators={[startValidator]}\n            inputProps={{\n              onBlur: ({ target: { value } }) => onStartChange(value),\n              validated:\n                values[ACCESS_FROM] === '' ||\n                (values[ACCESS_FROM] && !isCorrectFormat(values[ACCESS_FROM]))\n                  ? ValidatedOptions.error\n                  : ValidatedOptions.default,\n            }}\n          />\n          {startError || values[ACCESS_FROM] === '' ? (\n            <HelperText>\n              <HelperTextItem variant=\"error\">\n                {values[ACCESS_FROM] === ''\n                  ? 'Enter a valid date '\n                  : startError}\n              </HelperTextItem>\n            </HelperText>\n          ) : null}\n        </SplitItem>\n        <SplitItem className=\"pf-u-mt-sm\">to</SplitItem>\n        <SplitItem>\n          <DatePicker\n            aria-label=\"End date\"\n            placeholder=\"mm/dd/yyyy\"\n            value={values[ACCESS_TO]}\n            dateFormat={dateFormat}\n            dateParse={dateParse}\n            onChange={onEndChange}\n            validators={[endValidator]}\n            inputProps={{\n              onBlur: ({ target: { value } }) => onEndChange(value),\n              validated:\n                values[ACCESS_TO] === '' ||\n                (values[ACCESS_TO] && !isCorrectFormat(values[ACCESS_TO]))\n                  ? ValidatedOptions.error\n                  : ValidatedOptions.default,\n            }}\n          />\n          {endError || values[ACCESS_TO] === '' ? (\n            <HelperText>\n              <HelperTextItem variant=\"error\">\n                {values[ACCESS_FROM] === '' ? 'Enter a valid date ' : endError}\n              </HelperTextItem>\n            </HelperText>\n          ) : null}\n        </SplitItem>\n      </Split>\n    </FormGroup>\n  );\n};\n\nexport default AccessDuration;\n","import {\n  Toolbar,\n  ToolbarContent,\n  ToolbarItem,\n  Dropdown,\n  DropdownItem,\n  DropdownToggle,\n  InputGroup,\n  TextInput,\n  ChipGroup,\n  Chip,\n  Select,\n  SelectOption,\n  DropdownToggleCheckbox,\n} from '@patternfly/react-core';\nimport FilterIcon from '@patternfly/react-icons/dist/js/icons/filter-icon';\nimport { capitalize } from '@patternfly/react-core/dist/esm/helpers/util';\nimport PropTypes from 'prop-types';\nimport React, { useReducer } from 'react';\n\nconst selectLabelId = 'filter-application';\nconst selectPlaceholder = 'Filter by application';\n\nconst RoleToolbar = ({\n  selectedRoles,\n  setSelectedRoles,\n  isChecked,\n  appSelections,\n  setAppSelections,\n  columns,\n  rows,\n  filteredRows,\n  pagedRows,\n  anySelected,\n  clearFiltersButton,\n  perPage,\n  nameFilter,\n  setNameFilter,\n  AccessRequestsPagination,\n  applications,\n}) => {\n  const initialValue = {\n    isDropdownOpen: false,\n    isSelectOpen: false,\n    isBulkSelectOpen: false,\n    filterColumn: columns[0],\n  };\n\n  const reducer = (state, action) => {\n    switch (action.type) {\n      case 'set':\n        return {\n          ...state,\n          [action.payload.key]: action.payload.value,\n        };\n      case 'reset':\n        return initialValue;\n      default:\n        throw new Error('Unknown action type: ${action.type}');\n    }\n  };\n  const [state, dispatch] = useReducer(reducer, initialValue);\n  const setActions = (name, value) => {\n    dispatch({\n      type: 'set',\n      payload: { key: name, value: value },\n    });\n  };\n  const hasFilters = appSelections.length > 0 || nameFilter;\n  const onSelectAll = (_ev, isSelected) => {\n    if (isSelected) {\n      setSelectedRoles(filteredRows.map((row) => row.display_name));\n    } else {\n      setSelectedRoles([]);\n    }\n  };\n\n  return (\n    <React.Fragment>\n      <Toolbar id=\"access-requests-roles-table-toolbar\">\n        <ToolbarContent>\n          <ToolbarItem>\n            <Dropdown\n              onSelect={() =>\n                setActions('isBulkSelectOpen', !state.isBulkSelectOpen)\n              }\n              position=\"left\"\n              toggle={\n                <DropdownToggle\n                  splitButtonItems={[\n                    <DropdownToggleCheckbox\n                      key=\"a\"\n                      id=\"example-checkbox-2\"\n                      aria-label={anySelected ? 'Deselect all' : 'Select all'}\n                      isChecked={isChecked}\n                      onClick={() => onSelectAll(null, !anySelected)}\n                    />,\n                  ]}\n                  onToggle={(isOpen) => setActions('isBulkSelectOpen', isOpen)}\n                  isDisabled={rows.length === 0}\n                >\n                  {selectedRoles.length !== 0 && (\n                    <React.Fragment>\n                      {selectedRoles.length} selected\n                    </React.Fragment>\n                  )}\n                </DropdownToggle>\n              }\n              isOpen={state.isBulkSelectOpen}\n              dropdownItems={[\n                <DropdownItem key=\"0\" onClick={() => onSelectAll(null, false)}>\n                  Select none (0 items)\n                </DropdownItem>,\n                <DropdownItem\n                  key=\"1\"\n                  onClick={() =>\n                    setSelectedRoles(\n                      selectedRoles.concat(pagedRows.map((r) => r.display_name))\n                    )\n                  }\n                >\n                  Select page ({Math.min(pagedRows.length, perPage)} items)\n                </DropdownItem>,\n                <DropdownItem key=\"2\" onClick={() => onSelectAll(null, true)}>\n                  Select all ({filteredRows.length} items)\n                </DropdownItem>,\n              ]}\n            />\n          </ToolbarItem>\n          <ToolbarItem>\n            <InputGroup>\n              <Dropdown\n                isOpen={state.isDropdownOpen}\n                onSelect={(ev) => {\n                  setActions('isDropdownOpen', false);\n                  setActions('isSelectOpen', false);\n                  setActions('filterColumn', ev.target.value);\n                }}\n                toggle={\n                  <DropdownToggle\n                    onToggle={(isOpen) => setActions('isDropdownOpen', isOpen)}\n                  >\n                    <FilterIcon /> {state.filterColumn}\n                  </DropdownToggle>\n                }\n                dropdownItems={['Role name', 'Application'].map((colName) => (\n                  // Filterable columns are RequestID, AccountID, and Status\n                  <DropdownItem\n                    key={colName}\n                    value={colName}\n                    component=\"button\"\n                  >\n                    {capitalize(colName)}\n                  </DropdownItem>\n                ))}\n              />\n              {state.filterColumn === 'Application' ? (\n                <React.Fragment>\n                  <span id={selectLabelId} hidden>\n                    {selectPlaceholder}\n                  </span>\n                  <Select\n                    aria-labelledby={selectLabelId}\n                    variant=\"checkbox\"\n                    aria-label=\"Select applications\"\n                    onToggle={(isOpen) => setActions('isSelectOpen', isOpen)}\n                    onSelect={(_ev, selection) => {\n                      if (appSelections.includes(selection)) {\n                        setAppSelections((prev) =>\n                          prev.filter((s) => s !== selection)\n                        );\n                      } else {\n                        setAppSelections([...appSelections, selection]);\n                      }\n                    }}\n                    isOpen={state.isSelectOpen}\n                    selections={appSelections}\n                    isCheckboxSelectionBadgeHidden\n                    placeholderText={selectPlaceholder}\n                    className=\"select-toolbar\"\n                  >\n                    {applications.map((app) => (\n                      <SelectOption key={app} value={app}>\n                        {capitalize(app.replace(/-/g, ' '))}\n                      </SelectOption>\n                    ))}\n                  </Select>\n                </React.Fragment>\n              ) : (\n                <TextInput\n                  name=\"rolesSearch\"\n                  id=\"rolesSearch\"\n                  type=\"search\"\n                  iconVariant=\"search\"\n                  aria-label=\"Search input\"\n                  placeholder=\"Filter by role name\"\n                  value={nameFilter}\n                  onChange={(val) => setNameFilter(val)}\n                />\n              )}\n            </InputGroup>\n          </ToolbarItem>\n          <ToolbarItem variant=\"pagination\" align={{ default: 'alignRight' }}>\n            <AccessRequestsPagination id=\"top\" />\n          </ToolbarItem>\n        </ToolbarContent>\n        {hasFilters && (\n          <ToolbarContent>\n            {nameFilter && (\n              <ChipGroup categoryName=\"Role name\">\n                <Chip onClick={() => setNameFilter('')}>{nameFilter}</Chip>\n              </ChipGroup>\n            )}\n            {appSelections.length > 0 && (\n              <ChipGroup categoryName=\"Status\">\n                {appSelections.map((status) => (\n                  <Chip\n                    key={status}\n                    onClick={() =>\n                      setAppSelections((prev) =>\n                        prev.filter((s) => s !== status)\n                      )\n                    }\n                  >\n                    {status}\n                  </Chip>\n                ))}\n              </ChipGroup>\n            )}\n            {clearFiltersButton}\n          </ToolbarContent>\n        )}\n      </Toolbar>\n    </React.Fragment>\n  );\n};\n\nRoleToolbar.propTypes = {\n  selectedRoles: PropTypes.array,\n  setSelectedRoles: PropTypes.func,\n  isChecked: PropTypes.bool,\n  appSelections: PropTypes.any,\n  setAppSelections: PropTypes.func,\n  columns: PropTypes.array,\n  rows: PropTypes.array,\n  filteredRows: PropTypes.array,\n  pagedRows: PropTypes.array,\n  anySelected: PropTypes.bool,\n  clearFiltersButton: PropTypes.object,\n  perPage: PropTypes.number,\n  nameFilter: PropTypes.string,\n  setNameFilter: PropTypes.func,\n  AccessRequestsPagination: PropTypes.func,\n  applications: PropTypes.array,\n};\n\nexport default RoleToolbar;\n","import React from 'react';\nimport {\n  Title,\n  EmptyState,\n  EmptyStateIcon,\n  EmptyStateBody,\n} from '@patternfly/react-core';\nimport { Tbody, Tr, Td } from '@patternfly/react-table';\nimport SearchIcon from '@patternfly/react-icons/dist/js/icons/search-icon';\nimport PropTypes from 'prop-types';\n\nconst MUANoResults = ({ columns, clearFiltersButton }) => {\n  return (\n    <Tbody>\n      <Tr>\n        <Td colSpan={columns.length}>\n          <EmptyState variant=\"small\">\n            <EmptyStateIcon icon={SearchIcon} />\n            <Title headingLevel=\"h2\" size=\"lg\">\n              No matching requests found\n            </Title>\n            <EmptyStateBody>\n              No results match the filter criteria. Remove all filters or clear\n              all filters to show results.\n            </EmptyStateBody>\n            {clearFiltersButton}\n          </EmptyState>\n        </Td>\n      </Tr>\n    </Tbody>\n  );\n};\n\nMUANoResults.propTypes = {\n  columns: PropTypes.array,\n  clearFiltersButton: PropTypes.object,\n};\n\nexport default MUANoResults;\n","import React from 'react';\nimport { Title, Button, Pagination, Tooltip } from '@patternfly/react-core';\nimport {\n  TableComposable,\n  Thead,\n  Tbody,\n  Tr,\n  Th,\n  Td,\n} from '@patternfly/react-table';\nimport { css } from '@patternfly/react-styles';\nimport { useDispatch } from 'react-redux';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport PropTypes from 'prop-types';\nimport apiInstance from '../../Helpers/apiInstance';\nimport RoleToolbar from './RoleToolbar';\nimport MUANoResults from './MUANoResults';\n\nlet rolesCache = [];\nlet applicationsCache = [];\n\nconst MUARolesTable = ({\n  roles: selectedRoles,\n  setRoles: setSelectedRoles,\n}) => {\n  const isReadOnly = setSelectedRoles === undefined;\n  const columns = ['Role name', 'Role description', 'Permissions'];\n  const [rows, setRows] = React.useState(Array.from(rolesCache));\n  const [applications, setApplications] = React.useState(applicationsCache);\n  const [appSelections, setAppSelections] = React.useState([]);\n  React.useEffect(() => {\n    if (rolesCache.length === 0 || applicationsCache.length === 0) {\n      apiInstance\n        .get(\n          `${API_BASE}/roles/?system=true&limit=9999&order_by=display_name&add_fields=groups_in_count`,\n          { headers: { Accept: 'application/json' } }\n        )\n        .then(({ data }) => {\n          data.forEach((role) => {\n            role.isExpanded = false;\n            role.permissions = role.accessCount;\n          });\n          rolesCache = data.map((role) => Object.assign({}, role));\n          setRows(data);\n          // Build application filter from data\n          const apps = Array.from(\n            data\n              .map((role) => role.applications)\n              .flat()\n              .reduce((acc, cur) => {\n                acc.add(cur);\n                return acc;\n              }, new Set())\n          ).sort();\n          applicationsCache = apps;\n          setApplications(apps);\n        })\n        .catch((err) =>\n          dispatch(\n            addNotification({\n              variant: 'danger',\n              title: 'Could not fetch roles list',\n              description: err.message,\n            })\n          )\n        );\n    }\n  }, []);\n\n  // Sorting\n  const [activeSortIndex, setActiveSortIndex] = React.useState('name');\n  const [activeSortDirection, setActiveSortDirection] = React.useState('asc');\n  const onSort = (_ev, index, direction) => {\n    setActiveSortIndex(index);\n    setActiveSortDirection(direction);\n  };\n\n  const [nameFilter, setNameFilter] = React.useState('');\n  const hasFilters = appSelections.length > 0 || nameFilter;\n\n  const selectedNames = selectedRoles.map((role) => role.display_name);\n  const filteredRows = rows\n    .filter((row) =>\n      appSelections.length > 0\n        ? row.applications.find((app) => appSelections.includes(app))\n        : true\n    )\n    .filter((row) => row.name.toLowerCase().includes(nameFilter))\n    .filter((row) =>\n      isReadOnly ? selectedNames.includes(row.display_name) : true\n    );\n\n  // Pagination\n  const [page, setPage] = React.useState(1);\n  const [perPage, setPerPage] = React.useState(10);\n  const AccessRequestsPagination = ({ id }) => (\n    <Pagination\n      itemCount={filteredRows.length}\n      perPage={perPage}\n      page={page}\n      onSetPage={(_ev, pageNumber) => setPage(pageNumber)}\n      id={`access-requests-roles-table-pagination-${id}`}\n      variant={id}\n      onPerPageSelect={(_ev, perPage) => {\n        setPage(1);\n        setPerPage(perPage);\n      }}\n      isCompact={id === 'top'}\n    />\n  );\n  AccessRequestsPagination.propTypes = {\n    id: PropTypes.string,\n  };\n  const pagedRows = filteredRows\n    .sort((a, b) => {\n      if (typeof a[activeSortIndex] === 'number') {\n        // numeric sort\n        if (activeSortDirection === 'asc') {\n          return a[activeSortIndex] - b[activeSortIndex];\n        }\n\n        return b[activeSortIndex] - a[activeSortIndex];\n      } else {\n        // string sort\n        if (activeSortDirection === 'asc') {\n          return (a[activeSortIndex] + '').localeCompare(b[activeSortIndex]);\n        }\n\n        return (b[activeSortIndex] + '').localeCompare(a[activeSortIndex]);\n      }\n    })\n    .slice((page - 1) * perPage, page * perPage);\n\n  // Selecting\n  const anySelected = selectedRoles.length > 0;\n  const someChecked = anySelected ? null : false;\n  const isChecked =\n    selectedRoles.length === filteredRows.length && selectedRoles.length > 0\n      ? true\n      : someChecked;\n  const onSelect = (_ev, isSelected, rowId) => {\n    const changed = pagedRows[rowId].display_name;\n    if (isSelected) {\n      setSelectedRoles(selectedRoles.concat(changed));\n    } else {\n      setSelectedRoles(selectedRoles.filter((role) => role !== changed));\n    }\n  };\n\n  const clearFiltersButton = (\n    <Button\n      variant=\"link\"\n      onClick={() => {\n        setAppSelections([]);\n        setNameFilter('');\n      }}\n    >\n      Clear filters\n    </Button>\n  );\n\n  const roleToolbar = isReadOnly ? null : (\n    <RoleToolbar\n      selectedRoles={selectedRoles}\n      setSelectedRoles={setSelectedRoles}\n      isChecked={isChecked}\n      appSelections={appSelections}\n      setAppSelections={setAppSelections}\n      columns={columns}\n      rows={rows}\n      filteredRows={filteredRows}\n      pagedRows={pagedRows}\n      clearFiltersButton={clearFiltersButton}\n      perPage={perPage}\n      nameFilter={nameFilter}\n      setNameFilter={setNameFilter}\n      AccessRequestsPagination={AccessRequestsPagination}\n      applications={applications}\n    />\n  );\n\n  const expandedColumns = ['Application', 'Resource type', 'Operation'];\n  const dispatch = useDispatch();\n  const onExpand = (row) => {\n    row.isExpanded = !row.isExpanded;\n    setRows([...rows]);\n    if (!row.access) {\n      apiInstance\n        .get(`${API_BASE}/roles/${row.uuid}/`, {\n          headers: { Accept: 'application/json' },\n        })\n        .then((res) => {\n          row.access = res.access.map((a) => a.permission.split(':'));\n          setRows([...rows]);\n        })\n        .catch((err) =>\n          dispatch(\n            addNotification({\n              variant: 'danger',\n              title: `Could not fetch permission list for ${row.name}.`,\n              description: err.message,\n            })\n          )\n        );\n    }\n  };\n  const roleTable = (\n    <TableComposable aria-label=\"My user access roles\" variant=\"compact\">\n      <Thead>\n        <Tr>\n          {!isReadOnly && <Th />}\n          <Th\n            width={30}\n            sort={{\n              sortBy: {\n                index: activeSortIndex,\n                direction: activeSortDirection,\n              },\n              onSort,\n              columnIndex: 'name',\n            }}\n          >\n            {columns[0]}\n          </Th>\n          <Th\n            width={50}\n            sort={{\n              sortBy: {\n                index: activeSortIndex,\n                direction: activeSortDirection,\n              },\n              onSort,\n              columnIndex: 'description',\n            }}\n          >\n            {columns[1]}\n          </Th>\n          <Th\n            width={10}\n            sort={{\n              sortBy: {\n                index: activeSortIndex,\n                direction: activeSortDirection,\n              },\n              onSort,\n              columnIndex: 'permissions',\n            }}\n            modifier=\"nowrap\"\n          >\n            {columns[2]}\n          </Th>\n        </Tr>\n      </Thead>\n      {rows.length === 0 &&\n        [...Array(perPage).keys()].map((i) => (\n          <Tbody key={i}>\n            <Tr>\n              {!isReadOnly && <Td />}\n              {columns.map((col, key) => (\n                <Td dataLabel={col} key={key}>\n                  <div\n                    style={{ height: '22px' }}\n                    className=\"ins-c-skeleton ins-c-skeleton__md\"\n                  >\n                    {' '}\n                  </div>\n                </Td>\n              ))}\n            </Tr>\n          </Tbody>\n        ))}\n      {pagedRows.map((row, rowIndex) => (\n        <Tbody key={rowIndex}>\n          <Tr>\n            {!isReadOnly && (\n              <Td\n                select={{\n                  rowIndex,\n                  onSelect,\n                  isSelected: selectedRoles.find((r) => r === row.display_name),\n                }}\n              />\n            )}\n            <Td dataLabel={columns[0]}>{row.display_name}</Td>\n            <Td dataLabel={columns[1]} className=\"pf-m-truncate\">\n              <Tooltip entryDelay={1000} content={row.description}>\n                <span className=\"pf-m-truncate pf-c-table__text\">\n                  {row.description}\n                </span>\n              </Tooltip>\n            </Td>\n            <Td\n              dataLabel={columns[2]}\n              className={css(\n                'pf-c-table__compound-expansion-toggle',\n                row.isExpanded && 'pf-m-expanded'\n              )}\n            >\n              <button\n                type=\"button\"\n                className=\"pf-c-table__button\"\n                onClick={() => onExpand(row)}\n              >\n                {row.permissions}\n              </button>\n            </Td>\n          </Tr>\n          <Tr isExpanded={row.isExpanded}>\n            {!isReadOnly && <Td />}\n            <Td className=\"pf-u-p-0\" colSpan={3}>\n              <TableComposable className=\"pf-m-no-border-rows\">\n                <Thead>\n                  <Tr>\n                    {expandedColumns.map((col) => (\n                      <Th key={col}>{col}</Th>\n                    ))}\n                  </Tr>\n                </Thead>\n                <Tbody>\n                  {Array.isArray(row.access)\n                    ? row.access.map((permissions) => (\n                        <Tr key={permissions.join(':')}>\n                          <Td dataLabel={expandedColumns[0]}>\n                            {permissions[0]}\n                          </Td>\n                          <Td dataLabel={expandedColumns[1]}>\n                            {permissions[1]}\n                          </Td>\n                          <Td dataLabel={expandedColumns[2]}>\n                            {permissions[2]}\n                          </Td>\n                        </Tr>\n                      ))\n                    : [...Array(row.permissions).keys()].map((i) => (\n                        <Tr key={i}>\n                          {expandedColumns.map((val) => (\n                            <Td key={val} dataLabel={val}>\n                              <div\n                                style={{ height: '22px' }}\n                                className=\"ins-c-skeleton ins-c-skeleton__sm\"\n                              >\n                                {' '}\n                              </div>\n                            </Td>\n                          ))}\n                        </Tr>\n                      ))}\n                </Tbody>\n              </TableComposable>\n            </Td>\n          </Tr>\n        </Tbody>\n      ))}\n      {pagedRows.length === 0 && hasFilters ? (\n        <MUANoResults\n          columns={columns}\n          clearFiltersButton={clearFiltersButton}\n        />\n      ) : null}\n    </TableComposable>\n  );\n\n  return (\n    <React.Fragment>\n      {!isReadOnly && (\n        <React.Fragment>\n          <Title headingLevel=\"h2\">Select roles</Title>\n          <p>Select the roles you would like access to.</p>\n        </React.Fragment>\n      )}\n      {roleToolbar}\n      {roleTable}\n      {isReadOnly && <AccessRequestsPagination id=\"bottom\" />}\n    </React.Fragment>\n  );\n};\n\nMUARolesTable.propTypes = {\n  roles: PropTypes.any,\n  setRoles: PropTypes.any,\n};\n\nexport default MUARolesTable;\n","import axios from 'axios';\nimport {\n  authInterceptor,\n  responseDataInterceptor,\n  interceptor401,\n  interceptor500,\n  errorInterceptor,\n} from '@redhat-cloud-services/frontend-components-utilities/interceptors';\nimport registry from '../store';\nimport { API_ERROR } from '../Redux/action-types';\n\nconst interceptor403 = (error) => {\n  const store = registry.getStore();\n  if (error.response && error.response.status === 403) {\n    store.dispatch({ type: API_ERROR, payload: 403 });\n  }\n\n  throw error;\n};\n\nconst apiInstance = axios.create();\napiInstance.interceptors.request.use(authInterceptor);\napiInstance.interceptors.response.use(responseDataInterceptor);\n\napiInstance.interceptors.response.use(null, interceptor401);\napiInstance.interceptors.response.use(null, interceptor403);\napiInstance.interceptors.response.use(null, interceptor500);\napiInstance.interceptors.response.use(null, errorInterceptor);\n\nexport default apiInstance;\n","import React from 'react';\nimport { Button, Label } from '@patternfly/react-core';\nimport { useDispatch } from 'react-redux';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { getLabelProps } from './getLabelProps';\nimport EditAltIcon from '@patternfly/react-icons/dist/js/icons/edit-alt-icon';\nimport { capitalize } from '@patternfly/react-core/dist/esm/helpers/util';\nimport PropTypes from 'prop-types';\nimport apiInstance from './apiInstance';\n\nexport function getInternalActions(status, requestId, setOpenModal) {\n  const items = [];\n  if (status === 'pending') {\n    items.push({\n      title: 'Edit',\n      onClick: () => setOpenModal({ type: 'edit', requestId }),\n    });\n    items.push({\n      title: 'Cancel',\n      onClick: () => setOpenModal({ type: 'cancel', requestId }),\n    });\n  }\n\n  return { items, disable: items.length === 0 };\n}\n\n// https://marvelapp.com/prototype/257je526/screen/74764732\nexport function StatusLabel({ requestId, status: statusProp, hideActions }) {\n  const [status, setStatus] = React.useState(statusProp);\n  const [isEditing, setIsEditing] = React.useState(false);\n  const [isLoading, setIsLoading] = React.useState(false);\n  const dispatch = useDispatch();\n\n  function onClick(newStatus) {\n    setIsLoading(true);\n    apiInstance\n      .patch(\n        `${API_BASE}/cross-account-requests/${requestId}/`,\n        { status: newStatus },\n        {\n          headers: {\n            'Content-Type': 'application/json',\n            Accept: 'application/json',\n          },\n        }\n      )\n      .then((res) => {\n        if (res.errors && res.errors.length > 0) {\n          throw Error(res.errors.map((e) => e.detail).join('\\n'));\n        }\n        dispatch(\n          addNotification({\n            variant: 'success',\n            title: `Request ${newStatus} successfully`,\n          })\n        );\n        setStatus(newStatus);\n        setIsEditing(false);\n        setIsLoading(false);\n      })\n      .catch((err) => {\n        dispatch(\n          addNotification({\n            variant: 'danger',\n            title: `There was an error ${\n              newStatus === 'approved' ? 'approving' : 'denying'\n            } your request`,\n            description: err.message,\n          })\n        );\n        setIsLoading(false);\n      });\n  }\n\n  const label = <Label {...getLabelProps(status)}>{capitalize(status)}</Label>;\n\n  // For internal view\n  if (hideActions) {\n    return label;\n  }\n\n  return (\n    <React.Fragment>\n      {isEditing || status === 'pending' ? (\n        <React.Fragment>\n          <Button\n            className=\"pf-u-mr-md\"\n            isDisabled={isLoading || status === 'approved'}\n            variant=\"primary\"\n            onClick={() => onClick('approved')}\n          >\n            Approve\n          </Button>\n          <Button\n            className=\"pf-u-mr-md\"\n            isDisabled={isLoading || status === 'denied'}\n            variant=\"danger\"\n            onClick={() => onClick('denied')}\n          >\n            Deny\n          </Button>\n        </React.Fragment>\n      ) : (\n        label\n      )}\n      {['approved', 'denied'].includes(status) && (\n        <Button\n          variant=\"plain\"\n          aria-label=\"Edit status\"\n          onClick={() => setIsEditing(!isEditing)}\n        >\n          <EditAltIcon />\n        </Button>\n      )}\n    </React.Fragment>\n  );\n}\n\nStatusLabel.propTypes = {\n  requestId: PropTypes.string,\n  status: PropTypes.any,\n  hideActions: PropTypes.any,\n};\n","import React from 'react';\nimport CheckCircleIcon from '@patternfly/react-icons/dist/js/icons/check-circle-icon';\nimport ExclamationCircleIcon from '@patternfly/react-icons/dist/js/icons/exclamation-circle-icon';\nimport ErrorCircleOIcon from '@patternfly/react-icons/dist/js/icons/error-circle-o-icon';\nimport PendingIcon from '@patternfly/react-icons/dist/js/icons/in-progress-icon';\nimport ClockIcon from '@patternfly/react-icons/dist/js/icons/history-icon';\n\nexport function getLabelProps(status) {\n  let color = null;\n  let icon = null;\n  if (status === 'pending') {\n    color = 'blue';\n    icon = <PendingIcon />;\n  } else if (status === 'approved') {\n    color = 'green';\n    icon = <CheckCircleIcon />;\n  } else if (status === 'denied') {\n    color = 'red';\n    icon = <ExclamationCircleIcon />;\n  } else if (status === 'cancelled') {\n    color = 'orange';\n    icon = <ErrorCircleOIcon />;\n  } else if (status === 'expired') {\n    color = 'grey';\n    icon = <ClockIcon />;\n  }\n\n  return { color, icon };\n}\n"],"names":["CancelRequestModal","requestId","onClose","React","isLoading","setIsLoading","dispatch","useDispatch","Modal","title","isOpen","variant","actions","Button","key","onClick","apiInstance","patch","API_BASE","status","headers","Accept","then","res","errors","length","Error","map","e","detail","join","addNotification","err","description","message","Spinner","size","propTypes","PropTypes","InputHelpPopover","headerContent","bodyContent","field","Popover","type","preventDefault","className","noVerticalAlign","ACCOUNT_NUMBER","ORG_ID","ACCESS_FROM","ACCESS_TO","SELECTED_ROLES","SelectRoles","props","input","useFieldApi","values","useFormApi","getState","useState","selectedRoles","setSelectedRoles","useEffect","onChange","FormGroup","fieldId","MUARolesTable","roles","setRoles","ReviewDetails","Stack","StackItem","Grid","GridItem","sm","md","Text","component","TextVariants","h4","p","slice","role","targetAccount","start","end","error","invalidAccountTitle","FormTemplate","showFormControls","mapperExtension","popoverBody","Split","hasGutter","SplitItem","isFilled","label","name","labelIcon","TextInput","id","value","isDisabled","formOptions","startDate","setStartDate","endError","setEndError","startError","setStartError","today","Date","setDate","getDate","maxStartDate","dateFormat","date","toLocaleDateString","year","month","day","isCorrectFormat","test","dateParse","split","padStart","startValidator","isValidDate","endValidator","maxToDate","setFullYear","getFullYear","onStartChange","_e","str","undefined","change","onEndChange","isRequired","DatePicker","placeholder","validators","inputProps","onBlur","target","validated","ValidatedOptions","HelperText","HelperTextItem","AccessRequestsWizard","isEdit","schema","useRef","fields","isDynamic","inModal","showTitles","capitalize","nextStep","validate","validatorTypes","REQUIRED","componentTypes","TEXT_FIELD","FormGroupProps","helperText","hideField","StepTemplate","formFields","schemaBuilder","cancelWarningVisible","setCancelWarningVisible","setError","initialValues","setInitialValues","isSubmitting","setIsSubmitting","user","setUser","userPromise","insights","chrome","auth","getUser","detailsPromise","get","Promise","all","details","identity","target_account","target_org","start_date","end_date","display_name","validatorMapper","titleIconVariant","ModalVariant","large","showClose","hasNoBodyWrapper","Wizard","steps","Bullseye","EmptyState","EmptyStateIcon","icon","Title","headingLevel","ExclamationCircleIcon","color","EmptyStateBody","isFinishedStep","current","subscription","componentMapper","onSubmit","body","request_id","isInvalidAccount","first_name","last_name","onCancel","selectLabelId","selectPlaceholder","RoleToolbar","isChecked","appSelections","setAppSelections","columns","rows","filteredRows","pagedRows","anySelected","clearFiltersButton","perPage","nameFilter","setNameFilter","AccessRequestsPagination","applications","initialValue","isDropdownOpen","isSelectOpen","isBulkSelectOpen","filterColumn","useReducer","state","action","payload","setActions","hasFilters","onSelectAll","_ev","isSelected","row","Toolbar","ToolbarContent","ToolbarItem","Dropdown","onSelect","position","toggle","DropdownToggle","splitButtonItems","DropdownToggleCheckbox","onToggle","dropdownItems","DropdownItem","concat","r","Math","min","InputGroup","ev","colName","hidden","Select","selection","includes","prev","filter","s","selections","isCheckboxSelectionBadgeHidden","placeholderText","app","SelectOption","replace","iconVariant","val","align","default","ChipGroup","categoryName","Chip","MUANoResults","Tbody","Tr","Td","colSpan","SearchIcon","rolesCache","applicationsCache","isReadOnly","Array","from","setRows","setApplications","data","forEach","isExpanded","permissions","accessCount","Object","assign","apps","flat","reduce","acc","cur","add","Set","sort","activeSortIndex","setActiveSortIndex","activeSortDirection","setActiveSortDirection","onSort","index","direction","selectedNames","find","toLowerCase","page","setPage","setPerPage","Pagination","itemCount","onSetPage","pageNumber","onPerPageSelect","isCompact","a","b","localeCompare","someChecked","rowId","changed","roleToolbar","expandedColumns","roleTable","TableComposable","Thead","Th","width","sortBy","columnIndex","modifier","keys","i","col","dataLabel","style","height","rowIndex","select","Tooltip","entryDelay","content","css","access","uuid","permission","onExpand","isArray","axios","interceptors","request","use","authInterceptor","response","responseDataInterceptor","interceptor401","store","registry","getStore","API_ERROR","interceptor500","errorInterceptor","getInternalActions","setOpenModal","items","push","disable","StatusLabel","statusProp","hideActions","setStatus","isEditing","setIsEditing","newStatus","Label","getLabelProps"],"sourceRoot":""}