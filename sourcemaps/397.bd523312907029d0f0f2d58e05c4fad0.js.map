{"version":3,"file":"js/397.1659513213204.6d4b9146cf7ae46a3f5a.js","mappings":"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","sources":["webpack:///./src/Components/CancelRequestModal.js","webpack:///./src/Components/MUARolesTable.js","webpack:///./src/Components/common/InputHelpPopover.js","webpack:///./src/Components/access-requests-wizard/schema.js","webpack:///./src/Components/access-requests-wizard/SelectRoles.js","webpack:///./src/Components/access-requests-wizard/ReviewDetails.js","webpack:///./src/Components/access-requests-wizard/AccessRequestsWizard.js","webpack:///./src/Components/access-requests-wizard/SetName.js","webpack:///./src/Components/access-requests-wizard/AccessDuration.js","webpack:///./src/Helpers/apiInstance.js","webpack:///./src/Helpers/getActions.js","webpack:///./src/Helpers/getLabelProps.js"],"sourcesContent":["import React from 'react';\nimport { Modal, Button, Spinner } from '@patternfly/react-core';\nimport { useDispatch } from 'react-redux';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport PropTypes from 'prop-types';\nimport apiInstance from '../Helpers/apiInstance';\n\nconst CancelRequestModal = ({ requestId, onClose }) => {\n  const [isLoading, setIsLoading] = React.useState(false);\n  const dispatch = useDispatch();\n  const onCancel = () => {\n    setIsLoading(true);\n    // https://ci.cloud.redhat.com/docs/api-docs/rbac#operations-CrossAccountRequest-patchCrossAccountRequest\n    apiInstance\n      .patch(\n        `${API_BASE}/cross-account-requests/${requestId}/`,\n        { status: 'cancelled' },\n        {\n          headers: {\n            'Content-Type': 'application/json',\n            Accept: 'application/json',\n          },\n        }\n      )\n      .then((res) => {\n        if (res.errors && res.errors.length > 0) {\n          throw Error(res.errors.map((e) => e.detail).join('\\n'));\n        }\n        dispatch(\n          addNotification({\n            variant: 'success',\n            title: 'Request cancelled successfully',\n          })\n        );\n        setIsLoading(false);\n        onClose(true);\n      })\n      .catch((err) => {\n        dispatch(\n          addNotification({\n            variant: 'danger',\n            title: 'There was an error cancelling your request',\n            description: err.message,\n          })\n        );\n        setIsLoading(false);\n        onClose(true);\n      });\n  };\n  return (\n    <Modal\n      title=\"Cancel request?\"\n      isOpen\n      variant=\"small\"\n      onClose={() => onClose(false)}\n      actions={[\n        <Button key=\"confirm\" variant=\"danger\" onClick={onCancel}>\n          Yes, cancel\n        </Button>,\n        <Button key=\"cancel\" variant=\"link\" onClick={() => onClose(false)}>\n          No, keep\n        </Button>,\n      ]}\n    >\n      Request <b>{requestId}</b> will be withdrawn.\n      {isLoading && <Spinner size=\"lg\" />}\n    </Modal>\n  );\n};\n\nCancelRequestModal.propTypes = {\n  requestId: PropTypes.string,\n  onClose: PropTypes.func,\n};\n\nexport default CancelRequestModal;\n","import React from 'react';\nimport {\n  Title,\n  Toolbar,\n  ToolbarContent,\n  ToolbarItem,\n  Select,\n  Dropdown,\n  SelectOption,\n  DropdownItem,\n  DropdownToggle,\n  InputGroup,\n  TextInput,\n  Button,\n  Pagination,\n  ChipGroup,\n  Chip,\n  DropdownToggleCheckbox,\n  Tooltip,\n  EmptyState,\n  EmptyStateIcon,\n  EmptyStateBody,\n} from '@patternfly/react-core';\nimport {\n  TableComposable,\n  Thead,\n  Tbody,\n  Tr,\n  Th,\n  Td,\n} from '@patternfly/react-table';\nimport FilterIcon from '@patternfly/react-icons/dist/js/icons/filter-icon';\nimport SearchIcon from '@patternfly/react-icons/dist/js/icons/search-icon';\nimport { capitalize } from '@patternfly/react-core/dist/esm/helpers/util';\nimport { css } from '@patternfly/react-styles';\nimport { useDispatch } from 'react-redux';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport PropTypes from 'prop-types';\nimport apiInstance from '../Helpers/apiInstance';\n\nlet rolesCache = [];\nlet applicationsCache = [];\n\nconst MUARolesTable = ({\n  roles: selectedRoles,\n  setRoles: setSelectedRoles,\n}) => {\n  const isReadOnly = setSelectedRoles === undefined;\n  const columns = ['Role name', 'Role description', 'Permissions'];\n  const [rows, setRows] = React.useState(Array.from(rolesCache));\n  const [applications, setApplications] = React.useState(applicationsCache);\n  React.useEffect(() => {\n    if (rolesCache.length === 0 || applicationsCache.length === 0) {\n      apiInstance\n        .get(\n          `${API_BASE}/roles/?limit=9999&order_by=display_name&add_fields=groups_in_count`,\n          { headers: { Accept: 'application/json' } }\n        )\n        .then(({ data }) => {\n          data.forEach((role) => {\n            role.isExpanded = false;\n            role.permissions = role.accessCount;\n          });\n          rolesCache = data.map((role) => Object.assign({}, role));\n          setRows(data);\n\n          // Build application filter from data\n          const apps = Array.from(\n            data\n              .map((role) => role.applications)\n              .flat()\n              .reduce((acc, cur) => {\n                acc.add(cur);\n                return acc;\n              }, new Set())\n          ).sort();\n          applicationsCache = apps;\n          setApplications(apps);\n        })\n        .catch((err) =>\n          dispatch(\n            addNotification({\n              variant: 'danger',\n              title: 'Could not fetch roles list',\n              description: err.message,\n            })\n          )\n        );\n    }\n  }, []);\n\n  // Sorting\n  const [activeSortIndex, setActiveSortIndex] = React.useState('name');\n  const [activeSortDirection, setActiveSortDirection] = React.useState('asc');\n  const onSort = (_ev, index, direction) => {\n    setActiveSortIndex(index);\n    setActiveSortDirection(direction);\n  };\n\n  // Filtering\n  const [isDropdownOpen, setIsDropdownOpen] = React.useState(false);\n  const [filterColumn, setFilterColumn] = React.useState(columns[0]);\n  const [isSelectOpen, setIsSelectOpen] = React.useState(false);\n  const [appSelections, setAppSelections] = React.useState([]);\n  const [nameFilter, setNameFilter] = React.useState('');\n  const hasFilters = appSelections.length > 0 || nameFilter;\n  const selectLabelId = 'filter-application';\n  const selectPlaceholder = 'Filter by application';\n\n  const selectedNames = selectedRoles.map((role) => role.display_name);\n  const filteredRows = rows\n    .filter((row) =>\n      appSelections.length > 0\n        ? row.applications.find((app) => appSelections.includes(app))\n        : true\n    )\n    .filter((row) => row.name.toLowerCase().includes(nameFilter))\n    .filter((row) =>\n      isReadOnly ? selectedNames.includes(row.display_name) : true\n    );\n\n  // Pagination\n  const [page, setPage] = React.useState(1);\n  const [perPage, setPerPage] = React.useState(10);\n  const AccessRequestsPagination = ({ id }) => (\n    <Pagination\n      itemCount={filteredRows.length}\n      perPage={perPage}\n      page={page}\n      onSetPage={(_ev, pageNumber) => setPage(pageNumber)}\n      id={'access-requests-roles-table-pagination-' + id}\n      variant={id}\n      onPerPageSelect={(_ev, perPage) => {\n        setPage(1);\n        setPerPage(perPage);\n      }}\n      isCompact={id === 'top'}\n    />\n  );\n  AccessRequestsPagination.propTypes = {\n    id: PropTypes.string,\n  };\n  const pagedRows = filteredRows\n    .sort((a, b) => {\n      if (typeof a[activeSortIndex] === 'number') {\n        // numeric sort\n        if (activeSortDirection === 'asc') {\n          return a[activeSortIndex] - b[activeSortIndex];\n        }\n\n        return b[activeSortIndex] - a[activeSortIndex];\n      } else {\n        // string sort\n        if (activeSortDirection === 'asc') {\n          return (a[activeSortIndex] + '').localeCompare(b[activeSortIndex]);\n        }\n\n        return (b[activeSortIndex] + '').localeCompare(a[activeSortIndex]);\n      }\n    })\n    .slice((page - 1) * perPage, page * perPage);\n\n  // Selecting\n  const [isBulkSelectOpen, setIsBulkSelectOpen] = React.useState(false);\n  const anySelected = selectedRoles.length > 0;\n  const someChecked = anySelected ? null : false;\n  const isChecked =\n    selectedRoles.length === filteredRows.length && selectedRoles.length > 0\n      ? true\n      : someChecked;\n  const onSelect = (_ev, isSelected, rowId) => {\n    const changed = pagedRows[rowId].display_name;\n    if (isSelected) {\n      setSelectedRoles(selectedRoles.concat(changed));\n    } else {\n      setSelectedRoles(selectedRoles.filter((role) => role !== changed));\n    }\n  };\n\n  const onSelectAll = (_ev, isSelected) => {\n    if (isSelected) {\n      setSelectedRoles(filteredRows.map((row) => row.display_name));\n    } else {\n      setSelectedRoles([]);\n    }\n  };\n\n  const clearFiltersButton = (\n    <Button\n      variant=\"link\"\n      onClick={() => {\n        setAppSelections([]);\n        setNameFilter('');\n      }}\n    >\n      Clear filters\n    </Button>\n  );\n  const roleToolbar = isReadOnly ? null : (\n    <Toolbar id=\"access-requests-roles-table-toolbar\">\n      <ToolbarContent>\n        <ToolbarItem>\n          <Dropdown\n            onSelect={() => setIsBulkSelectOpen(!isBulkSelectOpen)}\n            position=\"left\"\n            toggle={\n              <DropdownToggle\n                splitButtonItems={[\n                  <DropdownToggleCheckbox\n                    key=\"a\"\n                    id=\"example-checkbox-2\"\n                    aria-label={anySelected ? 'Deselect all' : 'Select all'}\n                    isChecked={isChecked}\n                    onClick={() => onSelectAll(null, !anySelected)}\n                  />,\n                ]}\n                onToggle={(isOpen) => setIsBulkSelectOpen(isOpen)}\n                isDisabled={rows.length === 0}\n              >\n                {selectedRoles.length !== 0 && (\n                  <React.Fragment>\n                    {selectedRoles.length} selected\n                  </React.Fragment>\n                )}\n              </DropdownToggle>\n            }\n            isOpen={isBulkSelectOpen}\n            dropdownItems={[\n              <DropdownItem key=\"0\" onClick={() => onSelectAll(null, false)}>\n                Select none (0 items)\n              </DropdownItem>,\n              <DropdownItem\n                key=\"1\"\n                onClick={() =>\n                  setSelectedRoles(\n                    selectedRoles.concat(pagedRows.map((r) => r.display_name))\n                  )\n                }\n              >\n                Select page ({Math.min(pagedRows.length, perPage)} items)\n              </DropdownItem>,\n              <DropdownItem key=\"2\" onClick={() => onSelectAll(null, true)}>\n                Select all ({filteredRows.length} items)\n              </DropdownItem>,\n            ]}\n          />\n        </ToolbarItem>\n        <ToolbarItem>\n          <InputGroup>\n            <Dropdown\n              isOpen={isDropdownOpen}\n              onSelect={(ev) => {\n                setIsDropdownOpen(false);\n                setFilterColumn(ev.target.value);\n                setIsSelectOpen(false);\n              }}\n              toggle={\n                <DropdownToggle\n                  onToggle={(isOpen) => setIsDropdownOpen(isOpen)}\n                >\n                  <FilterIcon /> {filterColumn}\n                </DropdownToggle>\n              }\n              dropdownItems={['Role name', 'Application'].map((colName) => (\n                // Filterable columns are RequestID, AccountID, and Status\n                <DropdownItem key={colName} value={colName} component=\"button\">\n                  {capitalize(colName)}\n                </DropdownItem>\n              ))}\n            />\n            {filterColumn === 'Application' ? (\n              <React.Fragment>\n                <span id={selectLabelId} hidden>\n                  {selectPlaceholder}\n                </span>\n                <Select\n                  aria-labelledby={selectLabelId}\n                  variant=\"checkbox\"\n                  aria-label=\"Select applications\"\n                  onToggle={(isOpen) => setIsSelectOpen(isOpen)}\n                  onSelect={(_ev, selection) => {\n                    if (appSelections.includes(selection)) {\n                      setAppSelections(\n                        appSelections.filter((s) => s !== selection)\n                      );\n                    } else {\n                      setAppSelections([...appSelections, selection]);\n                    }\n                  }}\n                  isOpen={isSelectOpen}\n                  selections={appSelections}\n                  isCheckboxSelectionBadgeHidden\n                  placeholderText={selectPlaceholder}\n                  style={{ maxHeight: '400px', overflowY: 'auto' }}\n                >\n                  {applications.map((app) => (\n                    <SelectOption key={app} value={app}>\n                      {capitalize(app.replace(/-/g, ' '))}\n                    </SelectOption>\n                  ))}\n                </Select>\n              </React.Fragment>\n            ) : (\n              <TextInput\n                name=\"rolesSearch\"\n                id=\"rolesSearch\"\n                type=\"search\"\n                iconVariant=\"search\"\n                aria-label=\"Search input\"\n                placeholder=\"Filter by role name\"\n                value={nameFilter}\n                onChange={(val) => setNameFilter(val)}\n              />\n            )}\n          </InputGroup>\n        </ToolbarItem>\n        <ToolbarItem variant=\"pagination\" align={{ default: 'alignRight' }}>\n          <AccessRequestsPagination id=\"top\" />\n        </ToolbarItem>\n      </ToolbarContent>\n      {hasFilters && (\n        <ToolbarContent>\n          {nameFilter && (\n            <ChipGroup categoryName=\"Role name\">\n              <Chip onClick={() => setNameFilter('')}>{nameFilter}</Chip>\n            </ChipGroup>\n          )}\n          {appSelections.length > 0 && (\n            <ChipGroup categoryName=\"Status\">\n              {appSelections.map((status) => (\n                <Chip\n                  key={status}\n                  onClick={() =>\n                    setAppSelections(appSelections.filter((s) => s !== status))\n                  }\n                >\n                  {status}\n                </Chip>\n              ))}\n            </ChipGroup>\n          )}\n          {clearFiltersButton}\n        </ToolbarContent>\n      )}\n    </Toolbar>\n  );\n\n  const expandedColumns = ['Application', 'Resource type', 'Operation'];\n  const dispatch = useDispatch();\n  const onExpand = (row) => {\n    row.isExpanded = !row.isExpanded;\n    setRows([...rows]);\n    if (!row.access) {\n      apiInstance\n        .get(`${API_BASE}/roles/${row.uuid}/`, {\n          headers: { Accept: 'application/json' },\n        })\n        .then((res) => {\n          row.access = res.access.map((a) => a.permission.split(':'));\n          setRows([...rows]);\n        })\n        .catch((err) =>\n          dispatch(\n            addNotification({\n              variant: 'danger',\n              title: `Could not fetch permission list for ${row.name}.`,\n              description: err.message,\n            })\n          )\n        );\n    }\n  };\n  const roleTable = (\n    <TableComposable aria-label=\"My user access roles\" variant=\"compact\">\n      <Thead>\n        <Tr>\n          {!isReadOnly && <Th />}\n          <Th\n            width={30}\n            sort={{\n              sortBy: {\n                index: activeSortIndex,\n                direction: activeSortDirection,\n              },\n              onSort,\n              columnIndex: 'name',\n            }}\n          >\n            {columns[0]}\n          </Th>\n          <Th\n            width={50}\n            sort={{\n              sortBy: {\n                index: activeSortIndex,\n                direction: activeSortDirection,\n              },\n              onSort,\n              columnIndex: 'description',\n            }}\n          >\n            {columns[1]}\n          </Th>\n          <Th\n            width={10}\n            sort={{\n              sortBy: {\n                index: activeSortIndex,\n                direction: activeSortDirection,\n              },\n              onSort,\n              columnIndex: 'permissions',\n            }}\n            modifier=\"nowrap\"\n          >\n            {columns[2]}\n          </Th>\n        </Tr>\n      </Thead>\n      {rows.length === 0 &&\n        [...Array(perPage).keys()].map((i) => (\n          <Tbody key={i}>\n            <Tr>\n              {!isReadOnly && <Td />}\n              {columns.map((col, key) => (\n                <Td dataLabel={col} key={key}>\n                  <div\n                    style={{ height: '22px' }}\n                    className=\"ins-c-skeleton ins-c-skeleton__md\"\n                  >\n                    {' '}\n                  </div>\n                </Td>\n              ))}\n            </Tr>\n          </Tbody>\n        ))}\n      {pagedRows.map((row, rowIndex) => (\n        <Tbody key={rowIndex}>\n          <Tr>\n            {!isReadOnly && (\n              <Td\n                select={{\n                  rowIndex,\n                  onSelect,\n                  isSelected: selectedRoles.find((r) => r === row.display_name),\n                }}\n              />\n            )}\n            <Td dataLabel={columns[0]}>{row.display_name}</Td>\n            <Td dataLabel={columns[1]} className=\"pf-m-truncate\">\n              <Tooltip entryDelay={1000} content={row.description}>\n                <span className=\"pf-m-truncate pf-c-table__text\">\n                  {row.description}\n                </span>\n              </Tooltip>\n            </Td>\n            <Td\n              dataLabel={columns[2]}\n              className={css(\n                'pf-c-table__compound-expansion-toggle',\n                row.isExpanded && 'pf-m-expanded'\n              )}\n            >\n              <button\n                type=\"button\"\n                className=\"pf-c-table__button\"\n                onClick={() => onExpand(row)}\n              >\n                {row.permissions}\n              </button>\n            </Td>\n          </Tr>\n          <Tr isExpanded={row.isExpanded} borders={false}>\n            {!isReadOnly && <Td />}\n            <Td className=\"pf-u-p-0\" colSpan={3}>\n              <TableComposable isCompact className=\"pf-m-no-border-rows\">\n                <Thead>\n                  <Tr>\n                    {expandedColumns.map((col) => (\n                      <Th key={col}>{col}</Th>\n                    ))}\n                  </Tr>\n                </Thead>\n                <Tbody>\n                  {Array.isArray(row.access)\n                    ? row.access.map((permissions) => (\n                        <Tr key={permissions.join(':')}>\n                          <Td dataLabel={expandedColumns[0]}>\n                            {permissions[0]}\n                          </Td>\n                          <Td dataLabel={expandedColumns[1]}>\n                            {permissions[1]}\n                          </Td>\n                          <Td dataLabel={expandedColumns[2]}>\n                            {permissions[2]}\n                          </Td>\n                        </Tr>\n                      ))\n                    : [...Array(row.permissions).keys()].map((i) => (\n                        <Tr key={i}>\n                          {expandedColumns.map((val) => (\n                            <Td key={val} dataLabel={val}>\n                              <div\n                                style={{ height: '22px' }}\n                                className=\"ins-c-skeleton ins-c-skeleton__sm\"\n                              >\n                                {' '}\n                              </div>\n                            </Td>\n                          ))}\n                        </Tr>\n                      ))}\n                </Tbody>\n              </TableComposable>\n            </Td>\n          </Tr>\n        </Tbody>\n      ))}\n      {pagedRows.length === 0 && hasFilters && (\n        <Tr>\n          <Td colSpan={columns.length}>\n            <EmptyState variant=\"small\">\n              <EmptyStateIcon icon={SearchIcon} />\n              <Title headingLevel=\"h2\" size=\"lg\">\n                No matching requests found\n              </Title>\n              <EmptyStateBody>\n                No results match the filter criteria. Remove all filters or\n                clear all filters to show results.\n              </EmptyStateBody>\n              {clearFiltersButton}\n            </EmptyState>\n          </Td>\n        </Tr>\n      )}\n    </TableComposable>\n  );\n\n  return (\n    <React.Fragment>\n      {!isReadOnly && (\n        <React.Fragment>\n          <Title headingLevel=\"h2\">Select roles</Title>\n          <p>Select the roles you would like access to.</p>\n        </React.Fragment>\n      )}\n      {roleToolbar}\n      {roleTable}\n      {isReadOnly && <AccessRequestsPagination id=\"bottom\" />}\n    </React.Fragment>\n  );\n};\n\nMUARolesTable.propTypes = {\n  roles: PropTypes.any,\n  setRoles: PropTypes.any,\n};\n\nexport default MUARolesTable;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport HelpIcon from '@patternfly/react-icons/dist/esm/icons/help-icon';\nimport { Popover } from '@patternfly/react-core';\n\nconst InputHelpPopover = ({\n  headerContent = null,\n  bodyContent = null,\n  field = 'input',\n}) => (\n  <Popover headerContent={headerContent} bodyContent={bodyContent}>\n    <button\n      type=\"button\"\n      aria-label={`More info for ${field}`}\n      onClick={(e) => e.preventDefault()}\n      aria-describedby=\"form-name\"\n      className=\"pf-c-form__group-label-help\"\n    >\n      <HelpIcon noVerticalAlign />\n    </button>\n  </Popover>\n);\n\nInputHelpPopover.propTypes = {\n  headerContent: PropTypes.element,\n  bodyContent: PropTypes.element,\n  field: PropTypes.string,\n};\n\nexport default InputHelpPopover;\n","import React from 'react';\nimport { capitalize } from '@patternfly/react-core';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport InputHelpPopover from '../common/InputHelpPopover';\n\nexport const ACCOUNT_NUMBER = 'account-number';\nexport const ORG_ID = 'org-id';\nexport const ACCESS_FROM = 'start';\nexport const ACCESS_TO = 'end';\nexport const SELECTED_ROLES = 'selected-roles';\n\nexport default (isEdit, variant) => ({\n  fields: [\n    {\n      component: 'wizard',\n      name: 'wizard',\n      isDynamic: true,\n      inModal: true,\n      showTitles: true,\n      className: 'accessRequests',\n      title: `${capitalize(variant)} request`,\n      fields: [\n        {\n          name: 'details',\n          nextStep: 'select-roles',\n          title: 'Request details',\n          fields: [\n            {\n              component: 'set-name',\n              name: 'name',\n              validate: [\n                {\n                  type: validatorTypes.REQUIRED,\n                },\n              ],\n            },\n            {\n              component: componentTypes.TEXT_FIELD,\n              isRequired: true,\n              label: 'Account number',\n              isDisabled: isEdit,\n              placeholder: 'Example, 8675309',\n              FormGroupProps: {\n                labelIcon: (\n                  <InputHelpPopover\n                    bodyContent={\n                      <p>\n                        This is the account number that you would like to\n                        receive read access to\n                      </p>\n                    }\n                    field=\"account number\"\n                  />\n                ),\n              },\n              helperText: 'Enter the account number you would like access to',\n              name: ACCOUNT_NUMBER,\n              validate: [{ type: 'validate-account' }],\n            },\n            {\n              component: componentTypes.TEXT_FIELD,\n              isRequired: true,\n              label: 'Organization ID',\n              placeholder: 'Example, 1234567',\n              isDisabled: isEdit,\n              FormGroupProps: {\n                labelIcon: (\n                  <InputHelpPopover\n                    bodyContent={\n                      <p>\n                        This is the org ID of the account that you would like to\n                        receive read access to\n                      </p>\n                    }\n                    field=\"organization ID\"\n                  />\n                ),\n              },\n              helperText: 'Enter the organization ID you would like access to',\n              name: ORG_ID,\n              validate: [{ type: 'validate-org-id' }],\n            },\n            {\n              name: 'access-duration',\n              component: 'access-duration',\n              label: 'Access duration',\n              isRequired: true,\n            },\n            {\n              name: ACCESS_FROM,\n              component: componentTypes.TEXT_FIELD,\n              hideField: true,\n              isRequired: true,\n              validate: [\n                (value) =>\n                  value?.length > 0 ? undefined : 'Invalid start date',\n              ],\n            },\n            {\n              name: ACCESS_TO,\n              component: componentTypes.TEXT_FIELD,\n              hideField: true,\n              isRequired: true,\n              validate: [\n                (value) => (value?.length > 0 ? undefined : 'Invalid end date'),\n              ],\n            },\n          ],\n        },\n        {\n          name: 'select-roles',\n          nextStep: 'review-details',\n          title: 'Select roles',\n          StepTemplate: (props) => props.formFields,\n          fields: [\n            {\n              component: 'select-roles',\n              name: SELECTED_ROLES,\n              validate: [\n                (value) =>\n                  value?.length > 0 ? undefined : 'No roles selected',\n              ],\n            },\n          ],\n        },\n        {\n          name: 'review-details',\n          title: 'Review details',\n          fields: [\n            {\n              component: 'review-details',\n              name: 'review-details',\n            },\n          ],\n        },\n      ],\n    },\n  ],\n});\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport { FormGroup } from '@patternfly/react-core';\nimport MUARolesTable from '../MUARolesTable';\nimport { SELECTED_ROLES } from './schema';\n\nconst SelectRoles = (props) => {\n  const { input } = useFieldApi(props);\n  const formOptions = useFormApi();\n  const values = formOptions.getState().values;\n  const [selectedRoles, setSelectedRoles] = useState(\n    values[SELECTED_ROLES] || []\n  );\n\n  useEffect(() => {\n    input.onChange(selectedRoles);\n  }, [selectedRoles]);\n\n  return (\n    <FormGroup fieldId=\"select-role\">\n      <MUARolesTable roles={selectedRoles} setRoles={setSelectedRoles} />\n    </FormGroup>\n  );\n};\n\nSelectRoles.propTypes = {\n  selectedRoles: PropTypes.array,\n  setSelectedRoles: PropTypes.func,\n  title: PropTypes.string,\n  description: PropTypes.string,\n};\n\nexport default SelectRoles;\n","import React from 'react';\nimport {\n  Grid,\n  GridItem,\n  Stack,\n  StackItem,\n  Text,\n  TextVariants,\n} from '@patternfly/react-core';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport PropTypes from 'prop-types';\nimport {\n  ACCESS_FROM,\n  ACCESS_TO,\n  ACCOUNT_NUMBER,\n  SELECTED_ROLES,\n} from './schema';\nimport './review-details.scss';\n\nconst ReviewDetails = () => {\n  const formOptions = useFormApi();\n  const values = formOptions.getState().values;\n\n  return (\n    <React.Fragment>\n      <Stack className=\"accessRequests\">\n        <StackItem className=\"pf-u-mb-md\">\n          <Grid>\n            <GridItem sm={12} md={2}>\n              <Text\n                component={TextVariants.h4}\n                className=\"access-requests-bold-text\"\n              >\n                Account number\n              </Text>\n            </GridItem>\n            <GridItem sm={12} md={10}>\n              <Text component={TextVariants.p}>{values[ACCOUNT_NUMBER]}</Text>\n            </GridItem>\n          </Grid>\n        </StackItem>\n        <StackItem>\n          <Grid>\n            <GridItem sm={12} md={2}>\n              <Text\n                component={TextVariants.h4}\n                className=\"access-requests-bold-text\"\n              >\n                Access duration\n              </Text>\n            </GridItem>\n          </Grid>\n        </StackItem>\n        <StackItem>\n          <Grid>\n            <GridItem sm={12} md={2}>\n              <Text component={TextVariants.h4}>From</Text>\n            </GridItem>\n            <GridItem sm={12} md={10}>\n              <Text component={TextVariants.p}>{values[ACCESS_FROM]}</Text>\n            </GridItem>\n          </Grid>\n        </StackItem>\n        <StackItem className=\"pf-u-mb-md\">\n          <Grid>\n            <GridItem sm={12} md={2}>\n              <Text component={TextVariants.h4}>To</Text>\n            </GridItem>\n            <GridItem sm={12} md={10}>\n              <Text component={TextVariants.p}>{values[ACCESS_TO]}</Text>\n            </GridItem>\n          </Grid>\n        </StackItem>\n        <StackItem>\n          <Grid>\n            <GridItem sm={12} md={2}>\n              <Text\n                component={TextVariants.h4}\n                className=\"access-requests-bold-text\"\n              >\n                Roles\n              </Text>\n            </GridItem>\n            <GridItem sm={12} md={10}>\n              <Text component={TextVariants.p}>\n                {values[SELECTED_ROLES]?.[0]}\n              </Text>\n            </GridItem>\n          </Grid>\n        </StackItem>\n        {values[SELECTED_ROLES]?.slice(1).map((role) => (\n          <StackItem key={role}>\n            <Grid>\n              <GridItem sm={12} md={2}>\n                <Text component={TextVariants.h4}></Text>\n              </GridItem>\n              <GridItem sm={12} md={10}>\n                <Text component={TextVariants.p}>{role}</Text>\n              </GridItem>\n            </Grid>\n          </StackItem>\n        ))}\n      </Stack>\n    </React.Fragment>\n  );\n};\n\nReviewDetails.propTypes = {\n  targetAccount: PropTypes.any,\n  start: PropTypes.any,\n  end: PropTypes.any,\n  roles: PropTypes.any,\n  isLoading: PropTypes.any,\n  error: PropTypes.any,\n  onClose: PropTypes.any,\n};\n\nexport default ReviewDetails;\n","import React, { useRef, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport {\n  Bullseye,\n  Button,\n  capitalize,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  Modal,\n  ModalVariant,\n  Spinner,\n  Title,\n  Wizard,\n} from '@patternfly/react-core';\nimport ExclamationCircleIcon from '@patternfly/react-icons/dist/js/icons/exclamation-circle-icon';\nimport FormRenderer from '@data-driven-forms/react-form-renderer/form-renderer';\nimport Pf4FormTemplate from '@data-driven-forms/pf4-component-mapper/form-template';\nimport componentMapper from '@data-driven-forms/pf4-component-mapper/component-mapper';\nimport SelectRoles from './SelectRoles';\nimport ReviewDetails from './ReviewDetails';\nimport AccessDuration from './AccessDuration';\nimport SetName from './SetName';\nimport apiInstance from '../../Helpers/apiInstance';\nimport schemaBuilder, {\n  ACCESS_FROM,\n  ACCESS_TO,\n  ACCOUNT_NUMBER,\n  ORG_ID,\n  SELECTED_ROLES,\n} from './schema';\n\nconst invalidAccountTitle = 'Invalid Account number';\n\nconst FormTemplate = (props) => (\n  <Pf4FormTemplate {...props} showFormControls={false} />\n);\n\nexport const mapperExtension = {\n  'set-name': SetName,\n  'access-duration': AccessDuration,\n  'select-roles': SelectRoles,\n  'review-details': ReviewDetails,\n};\n\nconst AccessRequestsWizard = ({ requestId, variant, onClose }) => {\n  const dispatch = useDispatch();\n  const isEdit = variant === 'edit';\n  const schema = useRef(schemaBuilder(isEdit, variant));\n  const [cancelWarningVisible, setCancelWarningVisible] = useState(false);\n  const [error, setError] = React.useState();\n  const [initialValues, setInitialValues] = React.useState();\n  const [isLoading, setIsLoading] = React.useState(false);\n  const [isSubmitting, setIsSubmitting] = React.useState(false);\n  const [user, setUser] = React.useState();\n\n  // We need to be logged in (and see the username) which is an async request.\n  // If we're editing we also need to fetch the roles\n  React.useEffect(() => {\n    setIsLoading(true);\n    const userPromise = insights.chrome.auth.getUser();\n    const detailsPromise = isEdit\n      ? apiInstance.get(\n          `${API_BASE}/cross-account-requests/${requestId}/?query_by=user_id`,\n          {\n            headers: { Accept: 'application/json' },\n          }\n        )\n      : new Promise((res) => res(true));\n    Promise.all([userPromise, detailsPromise])\n      .then(([user, details]) => {\n        if (user && user.identity && user.identity.user) {\n          setUser(user.identity.user);\n        } else {\n          throw Error(\"Couldn't get current user. Make sure you're logged in\");\n        }\n        if (isEdit) {\n          if (details.errors) {\n            throw Error(details.errors.map((e) => e.detail).join('\\n'));\n          }\n          if (details && details.target_account) {\n            setInitialValues({\n              [ACCOUNT_NUMBER]: details.target_account,\n              [ORG_ID]: details.target_org,\n              [ACCESS_FROM]: details.start_date,\n              [ACCESS_TO]: details.end_date,\n              [SELECTED_ROLES]: details.roles.map((role) => role.display_name),\n            });\n          } else {\n            throw Error(`Could not fetch details for request ${requestId}`);\n          }\n        }\n        setIsLoading(false);\n      })\n      .catch((err) => {\n        dispatch(\n          addNotification({\n            variant: 'danger',\n            title: 'Could not load access request',\n            description: err.message,\n          })\n        );\n      });\n  }, []);\n\n  const onSubmit = (values) => {\n    setIsSubmitting(true);\n    // https://cloud.redhat.com/docs/api-docs/rbac#operations-CrossAccountRequest-createCrossAccountRequests\n    const body = {\n      target_account: values[ACCOUNT_NUMBER],\n      start_date: values[ACCESS_FROM],\n      end_date: values[ACCESS_TO],\n      target_org: values[ORG_ID],\n      roles: values[SELECTED_ROLES],\n    };\n    setInitialValues(values);\n    apiInstance[isEdit ? 'put' : 'post'](\n      `${API_BASE}/cross-account-requests/${isEdit ? `/${requestId}/` : ''}`,\n      body,\n      {\n        headers: {\n          'Content-Type': 'application/json',\n          Accept: 'application/json',\n        },\n      }\n    )\n      .then((res) => {\n        if (res.errors && res.errors.length > 0) {\n          throw Error(res.errors[0].detail);\n        }\n        dispatch(\n          addNotification({\n            variant: 'success',\n            title: `${isEdit ? 'Edited' : 'Created'} access request`,\n            description: res.request_id,\n          })\n        );\n        onClose(true);\n      })\n      .catch(({ errors = [] }) => {\n        const isInvalidAccount = /Account .* does not exist/.test(\n          errors[0]?.message || errors[0]?.detail\n        );\n        setError({\n          title: isInvalidAccount\n            ? invalidAccountTitle\n            : `Could not ${variant} access request`,\n          description: isInvalidAccount\n            ? 'Please return to Step 1: Request details and input a new account number for your request.'\n            : errors[0]?.message || errors[0]?.detail,\n        });\n        setIsSubmitting(false);\n      });\n  };\n\n  const validatorMapper = {\n    'validate-account': () => (value) =>\n      value && !error ? undefined : 'Please enter a valid account number',\n    'validate-org-id': () => (value) =>\n      value && !error ? undefined : 'Please enter a valid organization ID',\n    'validate-duration': () => (value) => value?.length > 0,\n  };\n\n  if (cancelWarningVisible) {\n    return (\n      <Modal\n        title=\"Exit request creation?\"\n        variant=\"small\"\n        titleIconVariant=\"warning\"\n        isOpen\n        onClose={() => {\n          setCancelWarningVisible(false);\n          onClose(false);\n        }}\n        actions={[\n          <Button\n            key=\"confirm\"\n            variant=\"primary\"\n            onClick={() => onClose(false)}\n          >\n            Exit\n          </Button>,\n          <Button\n            key=\"cancel\"\n            variant=\"link\"\n            onClick={() => setCancelWarningVisible(false)}\n          >\n            Stay\n          </Button>,\n        ]}\n      >\n        All inputs will be discarded.\n      </Modal>\n    );\n  } else if (error || isLoading || isSubmitting) {\n    return (\n      <Modal\n        isOpen\n        variant={ModalVariant.large}\n        showClose={false}\n        className=\"accessRequests\"\n        hasNoBodyWrapper\n        aria-describedby=\"wiz-modal-description\"\n        aria-labelledby=\"wiz-modal-title\"\n      >\n        <Wizard\n          className=\"accessRequests\"\n          title={`${capitalize(variant)} request`}\n          steps={[\n            {\n              name: 'status',\n              component: isLoading ? (\n                <Bullseye>\n                  <Spinner />\n                </Bullseye>\n              ) : (\n                <EmptyState>\n                  {isSubmitting ? (\n                    <>\n                      <EmptyStateIcon icon={() => <Spinner size=\"lg\" />} />\n                      <Title headingLevel=\"h2\" size=\"lg\">\n                        Submitting access request\n                      </Title>\n                      <Button variant=\"link\" onClick={() => onClose(true)}>\n                        Close\n                      </Button>\n                    </>\n                  ) : (\n                    <>\n                      <EmptyStateIcon\n                        icon={ExclamationCircleIcon}\n                        color=\"#C9190B\"\n                      />\n                      <Title headingLevel=\"h2\" size=\"lg\">\n                        {error.title || 'An error occured'}\n                      </Title>\n                      <EmptyStateBody>{error.description}</EmptyStateBody>\n                      {error.title !== invalidAccountTitle && (\n                        <Button variant=\"primary\" onClick={() => setError()}>\n                          Return to Step 1\n                        </Button>\n                      )}\n                    </>\n                  )}\n                </EmptyState>\n              ),\n              isFinishedStep: true,\n            },\n          ]}\n          onClose={() => onClose(true)}\n        />\n      </Modal>\n    );\n  } else {\n    return (\n      <FormRenderer\n        schema={schema.current}\n        subscription={{ values: true }}\n        FormTemplate={FormTemplate}\n        componentMapper={{ ...componentMapper, ...mapperExtension }}\n        validatorMapper={validatorMapper}\n        onSubmit={onSubmit}\n        initialValues={{\n          ...initialValues,\n          'first-name': user?.first_name,\n          'last-name': user?.last_name,\n        }}\n        onCancel={() => setCancelWarningVisible(true)}\n      />\n    );\n  }\n};\n\nAccessRequestsWizard.propTypes = {\n  requestId: PropTypes.string,\n  variant: PropTypes.any,\n  onClose: PropTypes.func,\n};\n\nexport default AccessRequestsWizard;\n","import React from 'react';\nimport { FormGroup, Split, SplitItem, TextInput } from '@patternfly/react-core';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport InputHelpPopover from '../common/InputHelpPopover';\n\nconst SetName = () => {\n  const { getState } = useFormApi();\n  const popoverBody = (\n    <p>\n      Customers will be able to see this information as part of your request\n    </p>\n  );\n\n  return (\n    <Split hasGutter>\n      <SplitItem isFilled>\n        <FormGroup\n          label=\"First name\"\n          name=\"first-name\"\n          labelIcon={\n            <InputHelpPopover bodyContent={popoverBody} field=\"first name\" />\n          }\n        >\n          <TextInput\n            id=\"first-name\"\n            value={getState().values['first-name']}\n            isDisabled\n          />\n        </FormGroup>\n      </SplitItem>\n      <SplitItem isFilled>\n        <FormGroup\n          label=\"Last name\"\n          name=\"last-name\"\n          labelIcon={\n            <InputHelpPopover bodyContent={popoverBody} field=\"last name\" />\n          }\n        >\n          <TextInput\n            id=\"last-name\"\n            value={getState().values['last-name']}\n            isDisabled\n          />\n        </FormGroup>\n      </SplitItem>\n    </Split>\n  );\n};\n\nexport default SetName;\n","import React from 'react';\nimport {\n  DatePicker,\n  FormGroup,\n  HelperText,\n  HelperTextItem,\n  isValidDate,\n  Split,\n  SplitItem,\n  ValidatedOptions,\n} from '@patternfly/react-core';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport InputHelpPopover from '../common/InputHelpPopover';\nimport { ACCESS_FROM, ACCESS_TO } from './schema';\n\nconst AccessDuration = () => {\n  const formOptions = useFormApi();\n  const values = formOptions.getState().values;\n  const [startDate, setStartDate] = React.useState();\n  const [endError, setEndError] = React.useState();\n  const [startError, setStartError] = React.useState();\n\n  const today = new Date();\n  today.setDate(today.getDate() - 1);\n  const maxStartDate = new Date();\n  maxStartDate.setDate(maxStartDate.getDate() + 60);\n\n  const dateFormat = (date) =>\n    date.toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: '2-digit',\n      day: '2-digit',\n    });\n\n  const isCorrectFormat = (date) =>\n    /^([0]?[1-9]|[1][0-2])\\/([0]?[1-9]|[1|2][0-9]|[3][0|1])\\/([0-9]{4})$/.test(\n      date\n    );\n\n  const dateParse = (date) => {\n    const split = date.split('/');\n    if (!isCorrectFormat(date)) {\n      return undefined;\n    }\n    const month = split[0].padStart(2, '0');\n    const day = split[1].padStart(2, '0');\n    const year = split[2].padStart(4, '0');\n    return new Date(`${year}-${month}-${day}T00:00:00`);\n  };\n\n  const startValidator = (date) => {\n    if (isValidDate(date)) {\n      if (date < today) {\n        const message = 'Start date must be today or later';\n        setStartError(message);\n        return message;\n      }\n      if (date > maxStartDate) {\n        const message = 'Start date must be within 60 days of today';\n        setStartError(message);\n        return message;\n      }\n    }\n    setStartError();\n    return '';\n  };\n\n  const endValidator = (date) => {\n    setEndError();\n    if (isValidDate(startDate)) {\n      if (startDate > date) {\n        const message = 'End date must be after start date';\n        setEndError(message);\n        return message;\n      }\n\n      const maxToDate = new Date(startDate);\n      maxToDate.setFullYear(maxToDate.getFullYear() + 1);\n      const message = 'Access duration may not be longer than one year';\n      date > maxToDate && setEndError(message);\n      return date > maxToDate ? message : '';\n    }\n    setEndError();\n    return '';\n  };\n\n  const onStartChange = (str, date) => {\n    setStartDate(date ? new Date(date) : undefined);\n    formOptions.change(ACCESS_FROM, isCorrectFormat(str) ? str : '');\n    if (isValidDate(date) && !startValidator(date)) {\n      date.setDate(date.getDate() + 7);\n      formOptions.change(ACCESS_TO, dateFormat(date));\n      setEndError();\n    }\n  };\n\n  const onEndChange = (str, date) => {\n    if (endValidator(date) || !isCorrectFormat(str)) {\n      formOptions.change(ACCESS_TO, '');\n    } else {\n      formOptions.change(ACCESS_TO, str);\n      startValidator(startDate) &&\n        formOptions.change(ACCESS_FROM, '') &&\n        setStartError();\n    }\n  };\n\n  return (\n    <FormGroup\n      label=\"Access duration\"\n      isRequired\n      labelIcon={\n        <InputHelpPopover\n          bodyContent={\n            <div>\n              This is the org ID of the account that you would like to receive\n              read access to\n            </div>\n          }\n          field=\"access duration\"\n        />\n      }\n    >\n      <Split hasGutter>\n        <SplitItem>\n          <DatePicker\n            aria-label=\"Start date\"\n            placeholder=\"mm/dd/yyyy\"\n            value={values[ACCESS_FROM]}\n            dateFormat={dateFormat}\n            dateParse={dateParse}\n            onChange={onStartChange}\n            validators={[startValidator]}\n            inputProps={{\n              onBlur: ({ target: { value } }) => onStartChange(value),\n              validated:\n                values[ACCESS_FROM] === '' ||\n                (values[ACCESS_FROM] && !isCorrectFormat(values[ACCESS_FROM]))\n                  ? ValidatedOptions.error\n                  : ValidatedOptions.default,\n            }}\n          />\n          {startError || values[ACCESS_FROM] === '' ? (\n            <HelperText>\n              <HelperTextItem variant=\"error\">\n                {values[ACCESS_FROM] === ''\n                  ? 'Enter a valid date '\n                  : startError}\n              </HelperTextItem>\n            </HelperText>\n          ) : null}\n        </SplitItem>\n        <SplitItem className=\"pf-u-mt-sm\">to</SplitItem>\n        <SplitItem>\n          <DatePicker\n            aria-label=\"End date\"\n            placeholder=\"mm/dd/yyyy\"\n            value={values[ACCESS_TO]}\n            dateFormat={dateFormat}\n            dateParse={dateParse}\n            onChange={onEndChange}\n            validators={[endValidator]}\n            inputProps={{\n              onBlur: ({ target: { value } }) => onEndChange(value),\n              validated:\n                values[ACCESS_TO] === '' ||\n                (values[ACCESS_TO] && !isCorrectFormat(values[ACCESS_TO]))\n                  ? ValidatedOptions.error\n                  : ValidatedOptions.default,\n            }}\n          />\n          {endError || values[ACCESS_TO] === '' ? (\n            <HelperText>\n              <HelperTextItem variant=\"error\">\n                {values[ACCESS_FROM] === '' ? 'Enter a valid date ' : endError}\n              </HelperTextItem>\n            </HelperText>\n          ) : null}\n        </SplitItem>\n      </Split>\n    </FormGroup>\n  );\n};\n\nexport default AccessDuration;\n","import axios from 'axios';\nimport {\n  authInterceptor,\n  responseDataInterceptor,\n  interceptor401,\n  interceptor500,\n  errorInterceptor,\n} from '@redhat-cloud-services/frontend-components-utilities/interceptors';\nimport registry from '../store';\nimport { API_ERROR } from '../Redux/action-types';\n\nconst interceptor403 = (error) => {\n  const store = registry.getStore();\n  if (error.response && error.response.status === 403) {\n    store.dispatch({ type: API_ERROR, payload: 403 });\n  }\n\n  throw error;\n};\n\nconst apiInstance = axios.create();\napiInstance.interceptors.request.use(authInterceptor);\napiInstance.interceptors.response.use(responseDataInterceptor);\n\napiInstance.interceptors.response.use(null, interceptor401);\napiInstance.interceptors.response.use(null, interceptor403);\napiInstance.interceptors.response.use(null, interceptor500);\napiInstance.interceptors.response.use(null, errorInterceptor);\n\nexport default apiInstance;\n","import React from 'react';\nimport { Button, Label } from '@patternfly/react-core';\nimport { useDispatch } from 'react-redux';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { getLabelProps } from './getLabelProps';\nimport EditAltIcon from '@patternfly/react-icons/dist/js/icons/edit-alt-icon';\nimport { capitalize } from '@patternfly/react-core/dist/esm/helpers/util';\nimport PropTypes from 'prop-types';\nimport apiInstance from './apiInstance';\n\nexport function getInternalActions(status, requestId, setOpenModal) {\n  const items = [];\n  if (status === 'pending') {\n    items.push({\n      title: 'Edit',\n      onClick: () => setOpenModal({ type: 'edit', requestId }),\n    });\n    items.push({\n      title: 'Cancel',\n      onClick: () => setOpenModal({ type: 'cancel', requestId }),\n    });\n  }\n\n  return { items, disable: items.length === 0 };\n}\n\n// https://marvelapp.com/prototype/257je526/screen/74764732\nexport function StatusLabel({ requestId, status: statusProp, hideActions }) {\n  const [status, setStatus] = React.useState(statusProp);\n  const [isEditing, setIsEditing] = React.useState(false);\n  const [isLoading, setIsLoading] = React.useState(false);\n  const dispatch = useDispatch();\n\n  function onClick(newStatus) {\n    setIsLoading(true);\n    apiInstance\n      .patch(\n        `${API_BASE}/cross-account-requests/${requestId}/`,\n        { status: newStatus },\n        {\n          headers: {\n            'Content-Type': 'application/json',\n            Accept: 'application/json',\n          },\n        }\n      )\n      .then((res) => {\n        if (res.errors && res.errors.length > 0) {\n          throw Error(res.errors.map((e) => e.detail).join('\\n'));\n        }\n        dispatch(\n          addNotification({\n            variant: 'success',\n            title: `Request ${newStatus} successfully`,\n          })\n        );\n        setStatus(newStatus);\n        setIsEditing(false);\n        setIsLoading(false);\n      })\n      .catch((err) => {\n        dispatch(\n          addNotification({\n            variant: 'danger',\n            title: `There was an error ${\n              newStatus === 'approved' ? 'approving' : 'denying'\n            } your request`,\n            description: err.message,\n          })\n        );\n        setIsLoading(false);\n      });\n  }\n\n  const label = <Label {...getLabelProps(status)}>{capitalize(status)}</Label>;\n\n  // For internal view\n  if (hideActions) {\n    return label;\n  }\n\n  return (\n    <React.Fragment>\n      {isEditing || status === 'pending' ? (\n        <React.Fragment>\n          <Button\n            className=\"pf-u-mr-md\"\n            isDisabled={isLoading || status === 'approved'}\n            variant=\"primary\"\n            onClick={() => onClick('approved')}\n          >\n            Approve\n          </Button>\n          <Button\n            className=\"pf-u-mr-md\"\n            isDisabled={isLoading || status === 'denied'}\n            variant=\"danger\"\n            onClick={() => onClick('denied')}\n          >\n            Deny\n          </Button>\n        </React.Fragment>\n      ) : (\n        label\n      )}\n      {['approved', 'denied'].includes(status) && (\n        <Button\n          variant=\"plain\"\n          aria-label=\"Edit status\"\n          onClick={() => setIsEditing(!isEditing)}\n        >\n          <EditAltIcon />\n        </Button>\n      )}\n    </React.Fragment>\n  );\n}\n\nStatusLabel.propTypes = {\n  requestId: PropTypes.string,\n  status: PropTypes.any,\n  hideActions: PropTypes.any,\n};\n","import React from 'react';\nimport CheckCircleIcon from '@patternfly/react-icons/dist/js/icons/check-circle-icon';\nimport ExclamationCircleIcon from '@patternfly/react-icons/dist/js/icons/exclamation-circle-icon';\nimport ErrorCircleOIcon from '@patternfly/react-icons/dist/js/icons/error-circle-o-icon';\nimport PendingIcon from '@patternfly/react-icons/dist/js/icons/in-progress-icon';\nimport ClockIcon from '@patternfly/react-icons/dist/js/icons/history-icon';\n\nexport function getLabelProps(status) {\n  let color = null;\n  let icon = null;\n  if (status === 'pending') {\n    color = 'blue';\n    icon = <PendingIcon />;\n  } else if (status === 'approved') {\n    color = 'green';\n    icon = <CheckCircleIcon />;\n  } else if (status === 'denied') {\n    color = 'red';\n    icon = <ExclamationCircleIcon />;\n  } else if (status === 'cancelled') {\n    color = 'orange';\n    icon = <ErrorCircleOIcon />;\n  } else if (status === 'expired') {\n    color = 'grey';\n    icon = <ClockIcon />;\n  }\n\n  return { color, icon };\n}\n"],"names":["CancelRequestModal","requestId","onClose","React","isLoading","setIsLoading","dispatch","useDispatch","Modal","title","isOpen","variant","actions","Button","key","onClick","apiInstance","API_BASE","status","headers","Accept","then","res","errors","length","Error","map","e","detail","join","addNotification","err","description","message","Spinner","size","propTypes","PropTypes","rolesCache","applicationsCache","MUARolesTable","selectedRoles","roles","setSelectedRoles","setRoles","isReadOnly","undefined","columns","Array","from","rows","setRows","applications","setApplications","data","forEach","role","isExpanded","permissions","accessCount","Object","assign","apps","flat","reduce","acc","cur","add","Set","sort","activeSortIndex","setActiveSortIndex","activeSortDirection","setActiveSortDirection","onSort","_ev","index","direction","isDropdownOpen","setIsDropdownOpen","filterColumn","setFilterColumn","isSelectOpen","setIsSelectOpen","appSelections","setAppSelections","nameFilter","setNameFilter","hasFilters","selectLabelId","selectPlaceholder","selectedNames","display_name","filteredRows","filter","row","find","app","includes","name","toLowerCase","page","setPage","perPage","setPerPage","AccessRequestsPagination","id","Pagination","itemCount","onSetPage","pageNumber","onPerPageSelect","isCompact","pagedRows","a","b","localeCompare","slice","isBulkSelectOpen","setIsBulkSelectOpen","anySelected","someChecked","isChecked","onSelect","isSelected","rowId","changed","concat","onSelectAll","clearFiltersButton","roleToolbar","Toolbar","ToolbarContent","ToolbarItem","Dropdown","position","toggle","DropdownToggle","splitButtonItems","DropdownToggleCheckbox","onToggle","isDisabled","dropdownItems","DropdownItem","r","Math","min","InputGroup","ev","target","value","colName","component","capitalize","hidden","Select","selection","s","selections","isCheckboxSelectionBadgeHidden","placeholderText","style","maxHeight","overflowY","SelectOption","replace","TextInput","type","iconVariant","placeholder","onChange","val","align","default","ChipGroup","categoryName","Chip","expandedColumns","roleTable","TableComposable","Thead","Tr","Th","width","sortBy","columnIndex","modifier","keys","i","Tbody","Td","col","dataLabel","height","className","rowIndex","select","Tooltip","entryDelay","content","css","access","uuid","permission","split","onExpand","borders","colSpan","isArray","EmptyState","EmptyStateIcon","icon","SearchIcon","Title","headingLevel","EmptyStateBody","InputHelpPopover","headerContent","bodyContent","field","Popover","preventDefault","noVerticalAlign","ACCOUNT_NUMBER","ORG_ID","ACCESS_FROM","ACCESS_TO","SELECTED_ROLES","SelectRoles","props","input","useFieldApi","values","useFormApi","getState","useState","useEffect","FormGroup","fieldId","ReviewDetails","Stack","StackItem","Grid","GridItem","sm","md","Text","TextVariants","targetAccount","start","end","error","invalidAccountTitle","FormTemplate","showFormControls","mapperExtension","popoverBody","Split","hasGutter","SplitItem","isFilled","label","labelIcon","formOptions","startDate","setStartDate","endError","setEndError","startError","setStartError","today","Date","setDate","getDate","maxStartDate","dateFormat","date","toLocaleDateString","year","month","day","isCorrectFormat","test","dateParse","padStart","startValidator","isValidDate","endValidator","maxToDate","setFullYear","getFullYear","onStartChange","str","change","onEndChange","isRequired","DatePicker","validators","inputProps","onBlur","validated","ValidatedOptions","HelperText","HelperTextItem","AccessRequestsWizard","isEdit","schema","useRef","fields","isDynamic","inModal","showTitles","nextStep","validate","validatorTypes","componentTypes","FormGroupProps","helperText","hideField","StepTemplate","formFields","schemaBuilder","cancelWarningVisible","setCancelWarningVisible","setError","initialValues","setInitialValues","isSubmitting","setIsSubmitting","user","setUser","userPromise","insights","chrome","auth","getUser","detailsPromise","Promise","all","details","identity","target_account","target_org","start_date","end_date","validatorMapper","titleIconVariant","ModalVariant","showClose","hasNoBodyWrapper","Wizard","steps","Bullseye","ExclamationCircleIcon","color","isFinishedStep","current","subscription","componentMapper","onSubmit","body","request_id","isInvalidAccount","first_name","last_name","onCancel","axios","interceptors","request","use","authInterceptor","response","responseDataInterceptor","interceptor401","store","registry","API_ERROR","payload","interceptor500","errorInterceptor","getInternalActions","setOpenModal","items","push","disable","StatusLabel","statusProp","hideActions","setStatus","isEditing","setIsEditing","newStatus","Label","getLabelProps"],"sourceRoot":""}