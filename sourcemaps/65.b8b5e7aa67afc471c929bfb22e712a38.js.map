{"version":3,"file":"js/65.436335590004d45a6b3c.js","mappings":"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","sources":["webpack:///./node_modules/@redhat-cloud-services/frontend-components-notifications/esm/redux/actions/notifications.js","webpack:///./src/App.js","webpack:///./src/AppEntry.js","webpack:///./src/Components/ErrorReducerCatcher.js","webpack:///./src/Redux/action-types.js","webpack:///./src/Routes.js","webpack:///./src/Redux/error-reducer.js","webpack:///./src/store.js","webpack:///./node_modules/react-redux/es/hooks/useDispatch.js"],"sourcesContent":["import { ADD_NOTIFICATION, REMOVE_NOTIFICATION, CLEAR_NOTIFICATIONS } from './action-types';\nexport var addNotification = function addNotification(notification) {\n  return {\n    type: ADD_NOTIFICATION,\n    payload: notification\n  };\n};\nexport var removeNotification = function removeNotification(index) {\n  return {\n    type: REMOVE_NOTIFICATION,\n    payload: index\n  };\n};\nexport var clearNotifications = function clearNotifications() {\n  return {\n    type: CLEAR_NOTIFICATIONS\n  };\n};\nexport default {\n  addNotification: addNotification,\n  removeNotification: removeNotification,\n  clearNotifications: clearNotifications\n};","import React, { Fragment, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { useHistory } from 'react-router-dom';\nimport { Routes } from './Routes';\nimport NotificationPortal from '@redhat-cloud-services/frontend-components-notifications/NotificationPortal';\nimport ErroReducerCatcher from './Components/ErrorReducerCatcher';\n\nimport './index.css';\n\nconst App = ({ basename }) => {\n  const history = useHistory();\n  useEffect(() => {\n    insights.chrome.init();\n\n    insights.chrome.identifyApp('access-requests');\n    const unregister = insights.chrome.on('APP_NAVIGATION', (event) => {\n      if (event?.domEvent?.href) {\n        history.push(event?.domEvent?.href.replace(basename), '');\n      }\n    });\n    return () => {\n      unregister();\n    };\n  }, []);\n\n  return (\n    <Fragment>\n      <NotificationPortal />\n      <ErroReducerCatcher>\n        <Routes />\n      </ErroReducerCatcher>\n    </Fragment>\n  );\n};\n\nApp.propTypes = {\n  basename: PropTypes.string.isRequired,\n};\n\nexport default App;\n","import React from 'react';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport registry, { RegistryContext } from './store';\nimport App from './App';\nimport { getBaseName } from '@redhat-cloud-services/frontend-components-utilities/helpers/helpers';\n\nconst basename = getBaseName(window.location.pathname, 3);\n\nconst AppEntry = () => (\n  <RegistryContext.Provider\n    value={{\n      getRegistry: () => registry,\n    }}\n  >\n    <Provider store={registry.getStore()}>\n      <Router basename={basename}>\n        <App basename={basename} />\n      </Router>\n    </Provider>\n  </RegistryContext.Provider>\n);\n\nexport default AppEntry;\n","import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport NotAuthorized from '@redhat-cloud-services/frontend-components/NotAuthorized/NotAuthorized';\nimport { useLocation } from 'react-router-dom';\nimport { API_ERROR } from '../Redux/action-types';\n\nconst errorStates = {\n  403: NotAuthorized,\n};\n\nconst ErroReducerCatcher = ({ children }) => {\n  const errorCode = useSelector(({ errorReducer: { errorCode } }) => errorCode);\n  const { pathname } = useLocation();\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (errorCode) {\n      dispatch({ type: API_ERROR, payload: undefined });\n    }\n  }, [pathname]);\n\n  if (errorCode) {\n    const State = errorStates[errorCode];\n    const name = 'Access Requests';\n    return <State serviceName={name} />;\n  }\n\n  return children;\n};\n\nErroReducerCatcher.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default ErroReducerCatcher;\n","export const API_ERROR = 'API_ERROR';\n","import { Redirect, Route, Switch } from 'react-router-dom';\nimport React, { Suspense, lazy, useContext, useState, useEffect } from 'react';\nimport {\n  Bullseye,\n  Spinner,\n  Switch as ToggleSwitch,\n} from '@patternfly/react-core';\n\nconst AccessRequestsPage = lazy(() => import('./Routes/AccessRequestsPage'));\nconst AccessRequestDetailsPage = lazy(() =>\n  import('./Routes/AccessRequestDetailsPage')\n);\nimport { RegistryContext } from './store';\nconst isDev = process.env.NODE_ENV !== 'production';\n\nexport const Routes = () => {\n  const { getRegistry } = useContext(RegistryContext);\n  const [isInternal, setIsInternal] = useState(true);\n\n  useEffect(() => {\n    insights.chrome.init();\n    Promise.resolve(insights.chrome.auth.getUser()).then((user) => {\n      setIsInternal(user?.identity?.user?.is_internal);\n    });\n  });\n\n  const AccessRequestDetailsPageWrapper = () => (\n    <AccessRequestDetailsPage\n      isInternal={isInternal}\n      getRegistry={getRegistry}\n    />\n  );\n  const AccessRequestsPageWrapper = () => (\n    <AccessRequestsPage isInternal={isInternal} getRegistry={getRegistry} />\n  );\n\n  return (\n    <Suspense\n      fallback={\n        <Bullseye>\n          <Spinner />\n        </Bullseye>\n      }\n    >\n      {isDev && (\n        <ToggleSwitch\n          id=\"toggle-view\"\n          label=\"Internal view\"\n          labelOff=\"External view\"\n          isChecked={isInternal}\n          onChange={() => setIsInternal(!isInternal)}\n        />\n      )}\n      <Switch>\n        <Route path=\"/\" exact component={AccessRequestsPageWrapper} />\n        <Route\n          path=\"/:requestId\"\n          exact\n          component={AccessRequestDetailsPageWrapper}\n        />\n        <Route>\n          <Redirect to=\"/\" />\n        </Route>\n      </Switch>\n    </Suspense>\n  );\n};\n","import { API_ERROR } from './action-types';\n\nconst setErrorState = (_, { payload }) => ({\n  errorCode: payload,\n});\n\nconst errorReducer = {\n  [API_ERROR]: setErrorState,\n};\n\nexport default errorReducer;\n","import { createContext } from 'react';\nimport ReducerRegistry, {\n  applyReducerHash,\n} from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport notificationsMiddleware from '@redhat-cloud-services/frontend-components-notifications/notificationsMiddleware';\nimport { notificationsReducer } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport errorReducer from './Redux/error-reducer';\n\nexport const RegistryContext = createContext({\n  getRegistry: () => {},\n});\n\nconst registry = new ReducerRegistry({}, [\n  notificationsMiddleware({\n    errorTitleKey: ['message'],\n    errorDescriptionKey: ['errors', 'stack'],\n  }),\n]);\n\nregistry.register({\n  errorReducer: applyReducerHash(errorReducer),\n  notifications: notificationsReducer,\n});\n\nexport default registry;\n","import { ReactReduxContext } from '../components/Context';\nimport { useStore as useDefaultStore, createStoreHook } from './useStore';\n/**\n * Hook factory, which creates a `useDispatch` hook bound to a given context.\n *\n * @param {React.Context} [context=ReactReduxContext] Context passed to your `<Provider>`.\n * @returns {Function} A `useDispatch` hook bound to the specified context.\n */\n\nexport function createDispatchHook(context) {\n  if (context === void 0) {\n    context = ReactReduxContext;\n  }\n\n  var useStore = context === ReactReduxContext ? useDefaultStore : createStoreHook(context);\n  return function useDispatch() {\n    var store = useStore();\n    return store.dispatch;\n  };\n}\n/**\n * A hook to access the redux `dispatch` function.\n *\n * @returns {any|function} redux store's `dispatch` function\n *\n * @example\n *\n * import React, { useCallback } from 'react'\n * import { useDispatch } from 'react-redux'\n *\n * export const CounterComponent = ({ value }) => {\n *   const dispatch = useDispatch()\n *   const increaseCounter = useCallback(() => dispatch({ type: 'increase-counter' }), [])\n *   return (\n *     <div>\n *       <span>{value}</span>\n *       <button onClick={increaseCounter}>Increase counter</button>\n *     </div>\n *   )\n * }\n */\n\nexport var useDispatch = /*#__PURE__*/createDispatchHook();"],"names":["addNotification","notification","type","payload","removeNotification","index","clearNotifications","App","basename","history","useHistory","useEffect","insights","chrome","init","identifyApp","unregister","on","event","domEvent","href","push","replace","Fragment","propTypes","PropTypes","getBaseName","window","location","pathname","value","getRegistry","registry","store","errorStates","NotAuthorized","ErroReducerCatcher","children","errorCode","useSelector","errorReducer","useLocation","dispatch","useDispatch","API_ERROR","undefined","State","serviceName","AccessRequestsPage","lazy","AccessRequestDetailsPage","Routes","useContext","RegistryContext","useState","isInternal","setIsInternal","Promise","resolve","auth","getUser","then","user","identity","is_internal","Suspense","fallback","Bullseye","Spinner","process","Switch","Route","path","exact","component","Redirect","to","_","createContext","ReducerRegistry","notificationsMiddleware","errorTitleKey","errorDescriptionKey","register","applyReducerHash","notifications","notificationsReducer","createDispatchHook","context","useStore"],"sourceRoot":""}