{"version":3,"file":"js/exposed-./RootApp.643d7e1f7beb243d6baf.js","mappings":"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","sources":["webpack:///./src/App.js","webpack:///./src/AppEntry.js","webpack:///./src/Components/ErrorReducerCatcher.js","webpack:///./src/Redux/action-types.js","webpack:///./src/pathnames.js","webpack:///./src/Redux/error-reducer.js","webpack:///./src/store.js","webpack:///./src/Hooks/useUserData.ts","webpack:///./src/Routing.tsx"],"sourcesContent":["import React, { Fragment } from 'react';\nimport { Bullseye, Spinner } from '@patternfly/react-core';\nimport ErroReducerCatcher from './Components/ErrorReducerCatcher';\nimport useUserData from './Hooks/useUserData';\nimport Routing from './Routing';\n\nimport './index.css';\n\nconst App = () => {\n  const userData = useUserData();\n\n  if (!userData.ready) {\n    return (\n      <Bullseye>\n        <Spinner />\n      </Bullseye>\n    );\n  }\n\n  return (\n    <Fragment>\n      <ErroReducerCatcher>\n        <Routing userData={userData} />\n      </ErroReducerCatcher>\n    </Fragment>\n  );\n};\n\nexport default App;\n","import React, { useEffect } from 'react';\nimport { Provider } from 'react-redux';\nimport useChrome from '@redhat-cloud-services/frontend-components/useChrome';\nimport registry, { RegistryContext } from './store';\nimport App from './App';\n\nconst AppEntry = () => {\n  const chrome = useChrome();\n\n  useEffect(() => {\n    chrome.updateDocumentTitle('Access Requests');\n  }, []);\n\n  return (\n    <RegistryContext.Provider\n      value={{\n        getRegistry: () => registry,\n      }}\n    >\n      <Provider store={registry.getStore()}>\n        <App />\n      </Provider>\n    </RegistryContext.Provider>\n  );\n};\n\nexport default AppEntry;\n","import React, { Fragment, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport NotAuthorized from '@redhat-cloud-services/frontend-components/NotAuthorized/NotAuthorized';\nimport NotificationPortal from '@redhat-cloud-services/frontend-components-notifications/NotificationPortal/';\nimport { useLocation } from 'react-router-dom';\nimport { API_ERROR } from '../Redux/action-types';\n\nconst errorStates = {\n  403: NotAuthorized,\n};\n\nconst ErroReducerCatcher = ({ children }) => {\n  const errorCode = useSelector(({ errorReducer: { errorCode } }) => errorCode);\n  const { pathname } = useLocation();\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (errorCode) {\n      dispatch({ type: API_ERROR, payload: undefined });\n    }\n  }, [pathname]);\n\n  if (errorCode) {\n    const State = errorStates[errorCode];\n    const name = 'Access Requests';\n    return <State serviceName={name} />;\n  }\n\n  return (\n    <Fragment>\n      <NotificationPortal />\n      {children}\n    </Fragment>\n  );\n};\n\nErroReducerCatcher.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default ErroReducerCatcher;\n","export const API_ERROR = 'API_ERROR';\n","const pathnames = {\n  accessRequests: {\n    link: '/access-requests',\n    route: '/',\n  },\n  accessRequestsDetail: {\n    link: '/access-requests/:requestId',\n    route: '/:requestId',\n  },\n};\n\nexport default pathnames;\n","import { API_ERROR } from './action-types';\n\nconst setErrorState = (_, { payload }) => ({\n  errorCode: payload,\n});\n\nconst errorReducer = {\n  [API_ERROR]: setErrorState,\n};\n\nexport default errorReducer;\n","import { createContext } from 'react';\nimport ReducerRegistry, {\n  applyReducerHash,\n} from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport notificationsMiddleware from '@redhat-cloud-services/frontend-components-notifications/notificationsMiddleware';\nimport { notificationsReducer } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport errorReducer from './Redux/error-reducer';\n\nexport const RegistryContext = createContext({\n  getRegistry: () => {},\n});\n\nconst registry = new ReducerRegistry({}, [\n  notificationsMiddleware({\n    errorTitleKey: ['message'],\n    errorDescriptionKey: ['errors', 'stack'],\n  }),\n]);\n\nregistry.register({\n  errorReducer: applyReducerHash(errorReducer),\n  notifications: notificationsReducer,\n});\n\nexport default registry;\n","import useChrome from '@redhat-cloud-services/frontend-components/useChrome';\nimport { useEffect, useState } from 'react';\n\nexport interface UserData {\n  ready: boolean;\n  isInternal?: boolean;\n}\n\nconst useUserData = () => {\n  const chrome = useChrome();\n  const [userData, setUserData] = useState<UserData>({\n    ready: false,\n    isInternal: true,\n  });\n\n  useEffect(() => {\n    if (chrome && !userData.ready)\n      chrome.auth.getUser().then((user) => {\n        setUserData({\n          ready: true,\n          isInternal: user?.identity?.user?.is_internal,\n        });\n      });\n  }, [chrome, userData.ready]);\n\n  return userData;\n};\n\nexport default useUserData;\n","import React, { Fragment, Suspense, lazy, useMemo, useState } from 'react';\nimport { Route, Routes } from 'react-router-dom';\nimport { Switch as ToggleSwitch } from '@patternfly/react-core';\nimport { UserData } from './Hooks/useUserData';\nimport pathnames from './pathnames';\nimport InvalidObject from '@redhat-cloud-services/frontend-components/InvalidObject';\n\nconst AccessRequestsPage = lazy(() => import('./Routes/AccessRequestsPage'));\nconst AccessRequestDetailsPage = lazy(\n  () => import('./Routes/AccessRequestDetailsPage')\n);\n\ninterface RouteType {\n  path?: string;\n  element: React.ComponentType;\n  childRoutes?: RouteType[];\n  elementProps?: Record<string, unknown>;\n}\n\nconst renderRoutes = (routes: RouteType[] = []) =>\n  routes.map(({ path, element: Element, childRoutes, elementProps }) => (\n    <Route key={path} path={path} element={<Element {...elementProps} />}>\n      {renderRoutes(childRoutes)}\n    </Route>\n  ));\n\nconst isDev = process.env.NODE_ENV !== 'production';\n\nexport const Routing = ({ userData }: { userData: UserData }) => {\n  const [isInternal, setIsInternal] = useState(userData.isInternal);\n\n  const routes = [\n    {\n      path: pathnames.accessRequests.route,\n      element: AccessRequestsPage,\n      elementProps: { isInternal },\n    },\n    {\n      path: pathnames.accessRequestsDetail.route,\n      element: AccessRequestDetailsPage,\n      elementProps: { isInternal },\n    },\n  ];\n\n  const renderedRoutes = useMemo(() => renderRoutes(routes), [routes]);\n\n  return (\n    <Suspense fallback={Fragment}>\n      {isDev && (\n        <ToggleSwitch\n          className=\"pf-u-p-sm\"\n          id=\"toggle-view\"\n          label=\"Internal view\"\n          labelOff=\"External view\"\n          checked={isInternal}\n          onChange={() => setIsInternal((prev) => !prev)}\n        />\n      )}\n      <Routes>\n        {renderedRoutes}\n        {/* Catch all unmatched routes */}\n        <Route path=\"*\" element={<InvalidObject />} />\n      </Routes>\n    </Suspense>\n  );\n};\n\nexport default Routing;\n"],"names":["userData","useUserData","ready","Fragment","Bullseye","Spinner","chrome","useChrome","useEffect","updateDocumentTitle","Provider","value","getRegistry","registry","store","getStore","errorStates","NotAuthorized","ErroReducerCatcher","children","errorCode","useSelector","errorReducer","pathname","useLocation","dispatch","useDispatch","type","API_ERROR","payload","undefined","State","serviceName","propTypes","PropTypes","isRequired","accessRequests","link","route","accessRequestsDetail","_","RegistryContext","createContext","ReducerRegistry","notificationsMiddleware","errorTitleKey","errorDescriptionKey","register","applyReducerHash","notifications","notificationsReducer","setUserData","useState","isInternal","auth","getUser","then","user","identity","is_internal","AccessRequestsPage","lazy","AccessRequestDetailsPage","renderRoutes","routes","map","path","element","Element","childRoutes","elementProps","Route","key","setIsInternal","renderedRoutes","useMemo","Suspense","fallback","Routes"],"sourceRoot":""}