{"version":3,"file":"js/83.1657697034701.3cc4c94850b28fa9597b.js","mappings":"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","sources":["webpack:///./src/Components/ErrorReducerCatcher.js","webpack:///./src/Redux/action-types.js","webpack:///./src/Routes.js","webpack:///./src/App.js","webpack:///./src/AppEntry.js","webpack:///./src/bootstrap.js","webpack:///./src/Redux/error-reducer.js","webpack:///./src/store.js"],"sourcesContent":["import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport NotAuthorized from '@redhat-cloud-services/frontend-components/NotAuthorized/NotAuthorized';\nimport { useLocation } from 'react-router-dom';\nimport { API_ERROR } from '../Redux/action-types';\n\nconst errorStates = {\n  403: NotAuthorized,\n};\n\nconst ErroReducerCatcher = ({ children }) => {\n  const errorCode = useSelector(({ errorReducer: { errorCode } }) => errorCode);\n  const { pathname } = useLocation();\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (errorCode) {\n      dispatch({ type: API_ERROR, payload: undefined });\n    }\n  }, [pathname]);\n\n  if (errorCode) {\n    const State = errorStates[errorCode];\n    const name = 'Access Requests';\n    return <State serviceName={name} />;\n  }\n\n  return children;\n};\n\nErroReducerCatcher.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default ErroReducerCatcher;\n","export const API_ERROR = 'API_ERROR';\n","import { Redirect, Route, Switch } from 'react-router-dom';\nimport React, { Suspense, lazy, useContext, useState, useEffect } from 'react';\nimport {\n  Bullseye,\n  Spinner,\n  Switch as ToggleSwitch,\n} from '@patternfly/react-core';\n\nconst AccessRequestsPage = lazy(() => import('./Routes/AccessRequestsPage'));\nconst AccessRequestDetailsPage = lazy(() =>\n  import('./Routes/AccessRequestDetailsPage')\n);\nimport { RegistryContext } from './store';\nconst isDev = process.env.NODE_ENV !== 'production';\n\nexport const Routes = () => {\n  const { getRegistry } = useContext(RegistryContext);\n  const [isInternal, setIsInternal] = useState(true);\n\n  useEffect(() => {\n    insights.chrome.init();\n    Promise.resolve(insights.chrome.auth.getUser()).then((user) => {\n      setIsInternal(user?.identity?.user?.is_internal);\n    });\n  });\n\n  const AccessRequestDetailsPageWrapper = () => (\n    <AccessRequestDetailsPage\n      isInternal={isInternal}\n      getRegistry={getRegistry}\n    />\n  );\n  const AccessRequestsPageWrapper = () => (\n    <AccessRequestsPage isInternal={isInternal} getRegistry={getRegistry} />\n  );\n\n  return (\n    <Suspense\n      fallback={\n        <Bullseye>\n          <Spinner />\n        </Bullseye>\n      }\n    >\n      {isDev && (\n        <ToggleSwitch\n          id=\"toggle-view\"\n          label=\"Internal view\"\n          labelOff=\"External view\"\n          isChecked={isInternal}\n          onChange={() => setIsInternal(!isInternal)}\n        />\n      )}\n      <Switch>\n        <Route path=\"/\" exact component={AccessRequestsPageWrapper} />\n        <Route\n          path=\"/:requestId\"\n          exact\n          component={AccessRequestDetailsPageWrapper}\n        />\n        <Route>\n          <Redirect to=\"/\" />\n        </Route>\n      </Switch>\n    </Suspense>\n  );\n};\n","import React, { Fragment, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { useHistory } from 'react-router-dom';\nimport { Routes } from './Routes';\nimport NotificationPortal from '@redhat-cloud-services/frontend-components-notifications/NotificationPortal';\nimport ErroReducerCatcher from './Components/ErrorReducerCatcher';\n\nimport './index.css';\n\nconst App = ({ basename }) => {\n  const history = useHistory();\n  useEffect(() => {\n    insights.chrome.init();\n\n    insights.chrome.identifyApp('access-requests');\n    const unregister = insights.chrome.on('APP_NAVIGATION', (event) => {\n      if (event?.domEvent?.href) {\n        history.push(event?.domEvent?.href.replace(basename), '');\n      }\n    });\n    return () => {\n      unregister();\n    };\n  }, []);\n\n  return (\n    <Fragment>\n      <NotificationPortal />\n      <ErroReducerCatcher>\n        <Routes />\n      </ErroReducerCatcher>\n    </Fragment>\n  );\n};\n\nApp.propTypes = {\n  basename: PropTypes.string.isRequired,\n};\n\nexport default App;\n","import React from 'react';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport registry, { RegistryContext } from './store';\nimport App from './App';\nimport { getBaseName } from '@redhat-cloud-services/frontend-components-utilities/helpers/helpers';\n\nconst basename = getBaseName(window.location.pathname, 3);\n\nconst AppEntry = () => (\n  <RegistryContext.Provider\n    value={{\n      getRegistry: () => registry,\n    }}\n  >\n    <Provider store={registry.getStore()}>\n      <Router basename={basename}>\n        <App basename={basename} />\n      </Router>\n    </Provider>\n  </RegistryContext.Provider>\n);\n\nexport default AppEntry;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport AppEntry from './AppEntry';\n\nconst root = document.getElementById('root');\n\nReactDOM.render(<AppEntry />, root, () =>\n  root.setAttribute('data-ouia-safe', true)\n);\n","import { API_ERROR } from './action-types';\n\nconst setErrorState = (_, { payload }) => ({\n  errorCode: payload,\n});\n\nconst errorReducer = {\n  [API_ERROR]: setErrorState,\n};\n\nexport default errorReducer;\n","import { createContext } from 'react';\nimport ReducerRegistry, {\n  applyReducerHash,\n} from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport notificationsMiddleware from '@redhat-cloud-services/frontend-components-notifications/notificationsMiddleware';\nimport { notificationsReducer } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport errorReducer from './Redux/error-reducer';\n\nexport const RegistryContext = createContext({\n  getRegistry: () => {},\n});\n\nconst registry = new ReducerRegistry({}, [\n  notificationsMiddleware({\n    errorTitleKey: ['message'],\n    errorDescriptionKey: ['errors', 'stack'],\n  }),\n]);\n\nregistry.register({\n  errorReducer: applyReducerHash(errorReducer),\n  notifications: notificationsReducer,\n});\n\nexport default registry;\n"],"names":["errorStates","NotAuthorized","ErroReducerCatcher","children","errorCode","useSelector","errorReducer","pathname","useLocation","dispatch","useDispatch","useEffect","type","API_ERROR","payload","undefined","State","serviceName","propTypes","PropTypes","AccessRequestsPage","lazy","AccessRequestDetailsPage","Routes","getRegistry","useContext","RegistryContext","useState","isInternal","setIsInternal","insights","chrome","init","Promise","resolve","auth","getUser","then","user","identity","is_internal","Suspense","fallback","Bullseye","Spinner","process","Switch","Route","path","exact","component","Redirect","to","App","basename","history","useHistory","identifyApp","unregister","on","event","domEvent","href","push","replace","Fragment","NotificationPortal","getBaseName","window","location","value","registry","store","root","document","getElementById","ReactDOM","setAttribute","_","createContext","ReducerRegistry","notificationsMiddleware","errorTitleKey","errorDescriptionKey","register","applyReducerHash","notifications","notificationsReducer"],"sourceRoot":""}