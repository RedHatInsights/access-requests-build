{"version":3,"sources":["webpack://@redhat-cloud-services/access-requests-frontend/./src/App.js","webpack://@redhat-cloud-services/access-requests-frontend/./src/AppEntry.js","webpack://@redhat-cloud-services/access-requests-frontend/./src/Routes.js","webpack://@redhat-cloud-services/access-requests-frontend/./src/store.js"],"names":["withRouter","connect","props","useEffect","insights","chrome","init","identifyApp","on","event","history","push","navId","Fragment","childProps","getBaseName","pathname","level","release","pathName","replace","split","shift","Array","reduce","acc","_curr","key","Provider","store","basename","window","location","AccessRequestsPage","lazy","AccessRequestDetailsPage","Routes","React","isInternal","setIsInternal","Suspense","fallback","Bullseye","Spinner","id","label","labelOff","isChecked","onChange","Switch","Route","path","exact","component","match","requestId","params","Redirect","to","registry","ReducerRegistry","notificationsMiddleware","errorTitleKey","errorDescriptionKey","register","notifications","notificationsReducer","getStore"],"mappings":"+PA8BA,SAAeA,iBAAWC,gBAvBd,SAACC,GAWX,OAVAC,gBAAU,WAIR,OAHAC,SAASC,OAAOC,OAEhBF,SAASC,OAAOE,YAAY,mBACrBH,SAASC,OAAOG,GACrB,kBACA,SAAAC,GAAK,O,UAASP,MAAMQ,QAAQC,KAAnB,WAA4BF,EAAMG,aAE5C,IAGD,kBAAC,EAAAC,SAAD,KACE,kBAAC,KAAD,MACA,kBAAC,IAAD,CAAQC,WAAaZ,U,2ICd3B,SAASa,EAAYC,GAAqB,IAAXC,EAAW,uDAAH,EACjCC,EAAU,IACRC,EAAWH,EAASI,QAAQ,WAAY,IAAIC,MAAM,KASxD,OAPAF,EAASG,QAEW,SAAhBH,EAAS,KACXA,EAASG,QACTJ,EAAU,UAGL,IAAK,IAAIK,MAAMN,IAASO,QAAO,SAACC,EAAKC,EAAOC,GACjD,gBAAUF,GAAV,OAAgBN,EAASQ,IAAQ,IAAjC,OAAsCA,EAAOV,EAAQ,EAAK,IAAM,MAC/DC,GAWL,QARiB,kBACf,kBAAC,EAAAU,SAAD,CAAUC,MAAOA,KACf,kBAAC,gBAAD,CAAQC,SAAUf,EAAYgB,OAAOC,SAAShB,WAC5C,kBAAC,IAAD,U,yGCtBAiB,GAAqBC,WAAK,kBAAM,kEAChCC,GAA2BD,WAAK,kBAAM,iEAE/BE,EAAS,WAAM,MACUC,cAAe,GADzB,WACnBC,EADmB,KACPC,EADO,KAO1B,OACE,kBAAC,EAAAC,SAAD,CAAUC,SAAU,kBAAC,EAAAC,SAAD,KAAU,kBAAC,EAAAC,QAAD,QAC5B,kBAAC,SAAD,CAAcC,GAAG,cAAcC,MAAM,gBAAgBC,SAAS,gBAAgBC,UAAWT,EAAYU,SAAU,kBAAMT,GAAeD,MACpI,kBAAC,EAAAW,OAAD,KACE,kBAAC,EAAAC,MAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAPM,kBAChC,kBAACpB,EAAD,CAAoBK,WAAYA,OAO5B,kBAAC,EAAAY,MAAD,CAAOC,KAAK,cAAcC,OAAK,EAACC,UAVE,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OACtC,kBAACnB,EAAD,CAA0BoB,UAAWD,EAAME,OAAOD,UAAWjB,WAAYA,OAUrE,kBAAC,EAAAY,MAAD,KACE,kBAAC,EAAAO,SAAD,CAAUC,GAAG,W,+EChBjBC,EAAW,IAAIC,KAAgB,GAAI,EACvCC,QAAwB,CACtBC,cAAe,CAAC,WAChBC,oBAAqB,CAAC,SAAU,aAIpCJ,EAASK,SAAS,CAChBC,cAAeC,OAGjB,QAAeP,EAASQ","file":"293.7e05e1bf0fa36a331897.js","sourcesContent":["import React, { Fragment, useEffect } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { Routes } from './Routes';\nimport { connect } from 'react-redux';\nimport NotificationPortal from '@redhat-cloud-services/frontend-components-notifications/NotificationPortal';\nimport './index.css';\n\nconst App = (props) => {\n  useEffect(() => {\n    insights.chrome.init();\n\n    insights.chrome.identifyApp('access-requests');\n    return insights.chrome.on(\n      'APP_NAVIGATION',\n      event => this.props.history.push(`/${event.navId}`)\n    );\n  }, []);\n\n  return (\n    <Fragment>\n      <NotificationPortal />\n      <Routes childProps={ props } />\n    </Fragment>\n  );\n};\n\n/**\n * connect: https://github.com/reactjs/react-redux/blob/master/docs/api.md\n *          https://reactjs.org/docs/higher-order-components.html\n */\nexport default withRouter(connect()(App));\n","import React from 'react';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport App from './App';\n\n// https://github.com/RedHatInsights/frontend-components/blob/07332f7ebeaf80cd99b3a7a1a843a43e9e2daf7e/packages/utils/src/helpers/helpers.js\nfunction getBaseName(pathname, level = 2) {\n  let release = '/';\n  const pathName = pathname.replace(/(#|\\?).*/, '').split('/');\n\n  pathName.shift();\n\n  if (pathName[0] === 'beta') {\n    pathName.shift();\n    release = `/beta/`;\n  }\n\n  return [ ...new Array(level) ].reduce((acc, _curr, key) => {\n    return `${acc}${pathName[key] || ''}${key < (level - 1) ? '/' : ''}`;\n  }, release);\n}\n\nconst AppEntry = () => (\n  <Provider store={store}>\n    <Router basename={getBaseName(window.location.pathname)}>\n      <App/>\n    </Router>\n  </Provider>\n);\n\nexport default AppEntry;\n","import { Redirect, Route, Switch } from 'react-router-dom';\nimport React, { Suspense, lazy } from 'react';\nimport { Bullseye, Spinner, Switch as ToggleSwitch } from '@patternfly/react-core';\n\nconst AccessRequestsPage = lazy(() => import('./Routes/AccessRequestsPage'));\nconst AccessRequestDetailsPage = lazy(() => import('./Routes/AccessRequestDetailsPage'));\n\nexport const Routes = () => {\n  const [isInternal, setIsInternal] = React.useState(true);\n  const AccessRequestDetailsPageWrapper = ({ match }) =>\n    <AccessRequestDetailsPage requestId={match.params.requestId} isInternal={isInternal} />;\n  const AccessRequestsPageWrapper = () =>\n    <AccessRequestsPage isInternal={isInternal} />;\n\n  return (\n    <Suspense fallback={<Bullseye><Spinner /></Bullseye>}>\n      <ToggleSwitch id=\"test-switch\" label=\"Internal view\" labelOff=\"External view\" isChecked={isInternal} onChange={() => setIsInternal(!isInternal)} />\n      <Switch>\n        <Route path=\"/\" exact component={AccessRequestsPageWrapper} />\n        <Route path=\"/:requestId\" exact component={AccessRequestDetailsPageWrapper} />\n        <Route>\n          <Redirect to=\"/\" />\n        </Route>\n      </Switch>\n    </Suspense>\n  );\n}\n\n","// I don't fully understand this. It's just for notifications.\nimport ReducerRegistry from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport notificationsMiddleware from '@redhat-cloud-services/frontend-components-notifications/notificationsMiddleware';\nimport { notificationsReducer } from '@redhat-cloud-services/frontend-components-notifications/redux';\n\nconst registry = new ReducerRegistry({}, [\n  notificationsMiddleware({\n    errorTitleKey: ['message'],\n    errorDescriptionKey: ['errors', 'stack'],\n  }),\n]);\n\nregistry.register({\n  notifications: notificationsReducer,\n});\n\nexport default registry.getStore();\n"],"sourceRoot":""}